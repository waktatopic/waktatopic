/******/ (function (modules) {
	// webpackBootstrap
	/******/ // The module cache
	/******/ var installedModules = {};
	/******/
	/******/ // The require function
	/******/ function __webpack_require__(moduleId) {
		/******/
		/******/ // Check if module is in cache
		/******/ if (installedModules[moduleId]) {
			/******/ return installedModules[moduleId].exports;
			/******/
		}
		/******/ // Create a new module (and put it into the cache)
		/******/ var module = (installedModules[moduleId] = {
			/******/ i: moduleId,
			/******/ l: false,
			/******/ exports: {},
			/******/
		});
		/******/
		/******/ // Execute the module function
		/******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ // Flag the module as loaded
		/******/ module.l = true;
		/******/
		/******/ // Return the exports of the module
		/******/ return module.exports;
		/******/
	}
	/******/
	/******/
	/******/ // expose the modules object (__webpack_modules__)
	/******/ __webpack_require__.m = modules;
	/******/
	/******/ // expose the module cache
	/******/ __webpack_require__.c = installedModules;
	/******/
	/******/ // identity function for calling harmony imports with the correct context
	/******/ __webpack_require__.i = function (value) {
		return value;
	};
	/******/
	/******/ // define getter function for harmony exports
	/******/ __webpack_require__.d = function (exports, name, getter) {
		/******/ if (!__webpack_require__.o(exports, name)) {
			/******/ Object.defineProperty(exports, name, {
				/******/ configurable: false,
				/******/ enumerable: true,
				/******/ get: getter,
				/******/
			});
			/******/
		}
		/******/
	};
	/******/
	/******/ // getDefaultExport function for compatibility with non-harmony modules
	/******/ __webpack_require__.n = function (module) {
		/******/ var getter =
			module && module.__esModule
				? /******/ function getDefault() {
						return module["default"];
				  }
				: /******/ function getModuleExports() {
						return module;
				  };
		/******/ __webpack_require__.d(getter, "a", getter);
		/******/ return getter;
		/******/
	};
	/******/
	/******/ // Object.prototype.hasOwnProperty.call
	/******/ __webpack_require__.o = function (object, property) {
		return Object.prototype.hasOwnProperty.call(object, property);
	};
	/******/
	/******/ // __webpack_public_path__
	/******/ __webpack_require__.p = "";
	/******/
	/******/ // Load entry module and return exports
	/******/ return __webpack_require__((__webpack_require__.s = 76));
	/******/
})(
	/************************************************************************/
	/******/ [
		/* 0 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;
			var _$ = true ? window.jQuery : require("jquery"),
				_html2canvas = true ? window.html2canvas : require("html2canvas"),
				_THREE = true ? window.THREE : require("three"),
				_React = true ? window.React : require("react"),
				_ReactDOM = true ? window.ReactDOM : require("react-dom"),
				_PDFJS = true ? window.pdfjsLib : require("pdfjs"),
				_tr = function _tr(s) {
					return ((window.iberezansky || {}).tr && window.iberezansky.tr(s)) || s;
				};

			exports.$ = _$;
			exports.html2canvas = _html2canvas;
			exports.THREE = _THREE;
			exports.React = _React;
			exports.ReactDOM = _ReactDOM;
			exports.PDFJS = _PDFJS;
			exports.tr = _tr;

			/***/
		},
		/* 1 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _$ = true ? window.jQuery : require("jquery"),
				_html2canvas = true ? window.html2canvas : require("html2canvas"),
				_THREE = true ? window.THREE : require("three"),
				_PDFJS = true ? window.PDFJS : require("pdfjs"),
				_tr = function _tr(s) {
					return ((window.iberezansky || {}).tr && window.iberezansky.tr(s)) || s;
				};

			if (window.FB3D_LOCALE) {
				window.iberezansky = _extends({}, window.iberezansky, {
					tr: function tr(s) {
						return (FB3D_LOCALE.dictionary || {})[s] || s;
					},
				});
			}

			exports.$ = _$;
			exports.html2canvas = _html2canvas;
			exports.THREE = _THREE;
			exports.PDFJS = _PDFJS;
			exports.tr = _tr;

			/***/
		},
		/* 2 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var BaseMathUtils = (function () {
				function BaseMathUtils() {
					_classCallCheck(this, BaseMathUtils);
				}

				BaseMathUtils.sum1 = function sum1(ka, a, kb, b) {
					return [ka * a[0] + kb * b[0]];
				};

				BaseMathUtils.sum2 = function sum2(ka, a, kb, b) {
					return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1]];
				};

				BaseMathUtils.sum3 = function sum3(ka, a, kb, b) {
					return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2]];
				};

				BaseMathUtils.sum4 = function sum4(ka, a, kb, b) {
					return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2], ka * a[3] + kb * b[3]];
				};

				BaseMathUtils.rk4 = function rk4(dy, t, dt, y) {
					var sum =
						arguments.length > 4 && arguments[4] !== undefined
							? arguments[4]
							: BaseMathUtils.sum[y.length - 1];

					var k1 = dy(t, y),
						k2 = dy(t + dt / 2, sum(1, y, dt / 2, k1)),
						k3 = dy(t + dt / 2, sum(1, y, dt / 2, k2)),
						k4 = dy(t + dt, sum(1, y, dt, k3));
					return sum(1, y, dt / 6, sum(1, sum(1, k1, 2, k2), 1, sum(2, k3, 1, k4)));
				};

				BaseMathUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
					return y[0] + ((y[1] - y[0]) / (x[1] - x[0])) * (xi - x[0]);
				};

				BaseMathUtils.interpolateLinear = function interpolateLinear(x, y, xi) {
					var yi = void 0;
					if (x[0] > x[1]) {
						x = x.reverse();
						y = y.reverse();
					}
					if (xi < x[0]) {
						yi = y[0];
					} else if (xi > x[1]) {
						yi = y[1];
					} else {
						yi = BaseMathUtils.extrapolateLinear(x, y, xi);
					}
					return yi;
				};

				BaseMathUtils.calcScale = function calcScale(srcW, srcH, dstW, dstH) {
					return dstW / srcW; // Math.min(dstW/srcW, dstH/srcH)
				};

				BaseMathUtils.mulM = function mulM(a, b) {
					var r = [];
					for (var i = 0; i < a.length; ++i) {
						r.push([]);
						for (var j = 0; j < b[0].length; ++j) {
							r[i][j] = 0;
							for (var k = 0; k < b.length; ++k) {
								r[i][j] += a[i][k] * b[k][j];
							}
						}
					}
					return r;
				};

				BaseMathUtils.transM = function transM(m) {
					var r = [];
					for (var i = 0; i < m.length; ++i) {
						for (var j = 0; j < m[0].length; ++j) {
							if (!r[j]) {
								r[j] = [];
							}
							r[j][i] = m[i][j];
						}
					}
					return r;
				};

				BaseMathUtils.mat = function mat(data) {
					var s = 0;
					for (
						var _iterator = data,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var x = _ref;

						s += x;
					}
					return s / data.length;
				};

				BaseMathUtils.disp = function disp(data) {
					var M = BaseMathUtils.mat(data);
					var s = 0;
					for (
						var _iterator2 = data,
							_isArray2 = Array.isArray(_iterator2),
							_i2 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var x = _ref2;

						s += (x - M) * (x - M);
					}
					return s / data.length;
				};

				BaseMathUtils.predict1 = function predict1(data, num) {
					var r = [],
						l = data.length,
						D = BaseMathUtils.disp(data);
					if (D < l && l > 1) {
						var am = [],
							bm = [];
						for (var i = 0; i < l; ++i) {
							am.push([i, 1]);
							bm.push([data[i]]);
						}
						var ta = BaseMathUtils.transM(am),
							a = BaseMathUtils.mulM(ta, am),
							b = BaseMathUtils.mulM(ta, bm),
							d = a[0][0] * a[1][1] - a[1][0] * a[0][1],
							p = [
								-(a[0][1] * b[1][0] - b[0][0] * a[1][1]) / d,
								(a[0][0] * b[1][0] - a[1][0] * b[0][0]) / d,
							];
						for (var _i3 = 0; _i3 < num; ++_i3) {
							var v = Math.round(p[0] * (_i3 + l) + p[1]);
							if (r.indexOf(v) === -1) {
								r.push(v);
							}
						}
					}
					return r;
				};

				BaseMathUtils.predict = function predict(data, num) {
					var r = [],
						l = data.length;
					var sgns = 0;
					for (var i = 0; i < l - 1; ++i) {
						sgns += Math.sign(data[i + 1] - data[i]);
					}
					if (Math.abs(sgns) <= (l - 1) % 2) {
						sgns = -1;
					} else {
						sgns = Math.sign(sgns);
					}
					for (var _i4 = 0, cur = data[l - 1]; _i4 < num && cur > 0; ++_i4) {
						cur += sgns;
						r.push(cur);
					}
					return r;
				};

				BaseMathUtils.getUnique = function getUnique() {
					return Math.ceil(1e9 * Math.random());
				};

				BaseMathUtils.setSplinePoints = function setSplinePoints(spline, ps) {
					if (spline.points.length !== ps.x.length) {
						console.warn("setSplinePoints: bad points");
					}
					for (var i = 0; i < spline.points.length; ++i) {
						spline.points[i].set(ps.x[i], ps.y[i], ps.z ? ps.z[i] : 0);
					}
				};

				BaseMathUtils.mapl2L = function mapl2L(ls, len, n, f) {
					var dL = len / (n - 1);
					var L = 0;
					for (var i = 0, d = ls[0]; i < ls.length - 1 && L < len + 0.1 * dL; ++i, d += ls[i]) {
						if (Math.abs(L - d) < Math.abs(L - d - ls[i + 1])) {
							f(i, L);
							L += dL;
						}
					}
					if (L < len + 0.1 * dL) {
						console.warn("mapl2L: ls is not enought");
					}
				};

				BaseMathUtils.det2 = function det2(a, b, c, d) {
					return a * d - b * c;
				};

				BaseMathUtils.solve2Lin = function solve2Lin(a1, b1, a2, b2) {
					var res = void 0;
					var d = BaseMathUtils.det2(a1[0], a1[1], a2[0], a2[1]);
					if (Math.abs(d) > BaseMathUtils.eps) {
						var dx = BaseMathUtils.det2(b1, a1[1], b2, a2[1]),
							dy = BaseMathUtils.det2(a1[0], b1, a2[0], b2);
						res = {
							x: dx / d,
							y: dy / d,
						};
					}
					return res;
				};

				BaseMathUtils.isInsidePoly = function isInsidePoly(ps, p) {
					var done = false,
						ct = void 0;
					for (var i = 0; i < ps.length; ++i) {
						if (BaseMathUtils.v2dist(p, ps[i]) < BaseMathUtils.eps) {
							ct = 1;
							done = true;
							break;
						}
					}
					while (!done) {
						done = true;
						ct = 0;
						var np = { x: p.x + Math.random() - 0.5, y: p.y + Math.random() - 0.5 },
							rn = { x: np.x - p.x, y: np.y - p.y },
							a1 = [rn.y, -rn.x],
							b1 = p.x * rn.y - p.y * rn.x;
						for (var _i5 = 0; _i5 < ps.length; ++_i5) {
							var p0 = ps[_i5],
								p1 = ps[(_i5 + 1) % ps.length],
								n = { x: p1.x - p0.x, y: p1.y - p0.y },
								a2 = [n.y, -n.x],
								b2 = p0.x * n.y - p0.y * n.x,
								ip = BaseMathUtils.solve2Lin(a1, b1, a2, b2);
							if (ip) {
								if (
									BaseMathUtils.v2dist(ip, p0) < BaseMathUtils.eps ||
									BaseMathUtils.v2dist(ip, p1) < BaseMathUtils.eps
								) {
									done = false;
									break;
								} else if (
									ip.x > Math.min(p0.x, p1.x) - BaseMathUtils.eps &&
									ip.x < Math.max(p0.x, p1.x) + BaseMathUtils.eps &&
									ip.y > Math.min(p0.y, p1.y) - BaseMathUtils.eps &&
									ip.y < Math.max(p0.y, p1.y) + BaseMathUtils.eps
								) {
									if (BaseMathUtils.v2dist(ip, p) < BaseMathUtils.eps) {
										ct = 1;
										break;
									} else {
										var tn = { x: ip.x - p.x, y: ip.y - p.y };
										ct += tn.x * rn.x + tn.y * rn.y > 0;
									}
								}
							}
						}
					}
					return ct % 2;
				};

				BaseMathUtils.isInsideConvPoly = function isInsideConvPoly(ps, p) {
					var sg = [0, 0];
					for (var i = 0; i < ps.length; ++i) {
						var p0 = ps[i],
							p1 = ps[(i + 1) % ps.length],
							a = { x: p0.x - p.x, y: p0.y - p.y },
							b = { x: p1.x - p.x, y: p1.y - p.y };
						++sg[(a.x * b.y - a.y * b.x < 0) + 0];
					}
					return ~sg.indexOf(ps.length);
				};

				BaseMathUtils.v2len = function v2len(v2) {
					return Math.sqrt(v2.x * v2.x + v2.y * v2.y);
				};

				BaseMathUtils.v2dist = function v2dist(v21, v22) {
					return BaseMathUtils.v2len({
						x: v22.x - v21.x,
						y: v22.y - v21.y,
					});
				};

				BaseMathUtils.computeSquare = function computeSquare(ps) {
					var a = [];
					var p = 0;
					for (var i = 0; i < ps.length; ++i) {
						a.push(BaseMathUtils.v2dist(ps[i], ps[(i + 1) % ps.length]));
						p += 0.5 * a[i];
					}
					return Math.sqrt(p * (p - a[0]) * (p - a[1]) * (p - a[2]));
				};

				BaseMathUtils.computeInterpCoefs = function computeInterpCoefs(tri, p) {
					var s = BaseMathUtils.computeSquare(tri),
						coefs = [],
						l = tri.length;
					for (var i = 0; i < l; ++i) {
						coefs[i] = BaseMathUtils.computeSquare([p, tri[(i + 1) % l], tri[(i + 2) % l]]) / s;
					}
					return coefs;
				};

				return BaseMathUtils;
			})();

			BaseMathUtils.sum = [BaseMathUtils.sum1, BaseMathUtils.sum2, BaseMathUtils.sum3, BaseMathUtils.sum4];
			BaseMathUtils.eps = 1e-4;
			exports.default = BaseMathUtils;

			/***/
		},
		/* 3 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Utils = (function () {
				function Utils() {
					_classCallCheck(this, Utils);
				}

				Utils.normalizeUrl = function normalizeUrl(url) {
					function split(s) {
						return s.replace(/\\/g, "/").split("/");
					}
					var base = split(window.location.href);
					url = split(url);
					if (base[2] === url[2]) {
						url[0] = base[0];
					}
					return url.join("/");
				};

				Utils._escapeHTMLclb = function _escapeHTMLclb(c) {
					return Utils._escapeHTMLchars[c] || c;
				};

				Utils.escapeHTML = function escapeHTML(s) {
					return s.replace(/[&<>]/g, Utils._escapeHTMLclb);
				};

				Utils.extends = function _extends(der, base) {
					for (var name in base) {
						if (!der.hasOwnProperty(name)) {
							der[name] = base[name];
						}
					}
				};

				Utils.defaultCmp = function defaultCmp(a, b) {
					return a - b;
				};

				Utils.lowerBound = function lowerBound(a, x, cmp) {
					cmp = cmp || Utils.defaultCmp;
					var l = 0,
						h = a.length - 1;
					while (h - l > 1) {
						var mid = Math.floor((l + h) / 2);
						if (cmp(x, a[mid]) < 0) {
							h = mid;
						} else {
							l = mid;
						}
					}
					return cmp(x, a[h]) >= 0 ? h : l;
				};

				return Utils;
			})();

			Utils.MOBILE_DIAG = 11;
			Utils._escapeHTMLchars = {
				"&": "&amp;",
				"<": "&lt;",
				">": "&gt;",
			};
			exports.default = Utils;

			/***/
		},
		/* 4 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var GraphUtils = (function () {
				function GraphUtils() {
					_classCallCheck(this, GraphUtils);
				}

				GraphUtils.createCanvas = function createCanvas(width, height) {
					var c = document.createElement("canvas");
					if (width) {
						c.width = width;
					}
					if (height) {
						c.height = height;
					}
					return c;
				};

				GraphUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
					return y[0] + ((y[1] - y[0]) / (x[1] - x[0])) * (xi - x[0]);
				};

				GraphUtils.interpolate01 = function interpolate01(y1, y2, t) {
					return GraphUtils.extrapolateLinear([0, 1], [y1, y2], t);
				};

				GraphUtils.getColorBytes = function getColorBytes(color) {
					return [(color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff];
				};

				GraphUtils.inverseColor = function inverseColor(color) {
					var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

					var bs = GraphUtils.getColorBytes(color),
						ibs = [0xff - bs[0], 0xff - bs[1], 0xff - bs[2]],
						nbs = [
							Math.round(GraphUtils.interpolate01(bs[0], ibs[0], t)),
							Math.round(GraphUtils.interpolate01(bs[1], ibs[1], t)),
							Math.round(GraphUtils.interpolate01(bs[2], ibs[2], t)),
						];
					return GraphUtils.bytes2Color(nbs);
				};

				GraphUtils.color2Rgba = function color2Rgba(color, a) {
					return GraphUtils.bytes2Rgba(GraphUtils.getColorBytes(color), a);
				};

				GraphUtils.bytes2Rgba = function bytes2Rgba(bs, a) {
					return "rgba(" + bs.join(",") + "," + a + ")";
				};

				GraphUtils.bytes2Color = function bytes2Color(bs) {
					return bs[2] | (bs[1] << 8) | (bs[0] << 16);
				};

				return GraphUtils;
			})();

			exports.default = GraphUtils;

			/***/
		},
		/* 5 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _BaseMathUtils2 = __webpack_require__(2);

			var _BaseMathUtils3 = _interopRequireDefault(_BaseMathUtils2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var MathUtils = (function (_BaseMathUtils) {
				_inherits(MathUtils, _BaseMathUtils);

				function MathUtils() {
					_classCallCheck(this, MathUtils);

					return _possibleConstructorReturn(this, _BaseMathUtils.apply(this, arguments));
				}

				MathUtils.splitSpline = function splitSpline(spline, N) {
					var o = { len: 0, ls: [0] },
						dl = 1 / N;
					for (var i = 0; i <= N; ++i) {
						var p = spline.getPoint(i * dl);
						if (i) {
							var d = MathUtils.v1.distanceTo(p);
							o.len += d;
							o.ls.push(d);
						}
						MathUtils.v1.copy(p);
					}
					return o;
				};

				MathUtils.getLinearIndeces = function getLinearIndeces(spline, n) {
					var del = 5000,
						dDel = 1 / del;
					var ls = [0];
					var l = 0;
					for (var i = 0; i <= del; ++i) {
						var p = spline.getPoint(i * dDel);
						if (i) {
							var d = MathUtils.v1.distanceTo(p);
							l += d;
							ls.push(d);
						}
						MathUtils.v1.copy(p);
					}
					ls.push(1e7);

					var res = [],
						dl = l / (n - 1);
					for (var _i = 0, L = 0, _d = ls[0]; _i < ls.length - 1; ++_i, _d += ls[_i]) {
						if (Math.abs(L - _d) < Math.abs(L - _d - ls[_i + 1])) {
							res.push(_i * dDel);
							L += dl;
						}
					}

					return res;
				};

				MathUtils.refinePoly = function refinePoly(poly, maxDl) {
					var res = [];
					for (var i = 0; i < poly.length; ++i) {
						var p0 = poly[i],
							p1 = poly[(i + 1) % poly.length],
							l = _BaseMathUtils3.default.v2dist(p0, p1),
							n = Math.ceil(l / maxDl),
							dl = l / n;
						res.push(p0);
						for (var j = 1; j < n; ++j) {
							res.push(
								new _libs.THREE.Vector2(
									p0.x + (j * dl * (p1.x - p0.x)) / l,
									p0.y + (j * dl * (p1.y - p0.y)) / l
								)
							);
						}
					}
					return res;
				};

				return MathUtils;
			})(_BaseMathUtils3.default);

			MathUtils.v1 = new _libs.THREE.Vector3();
			exports.default = MathUtils;

			/***/
		},
		/* 6 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _GraphUtils = __webpack_require__(4);

			var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var ImageBase = (function () {
				function ImageBase(context, width, height, color) {
					_classCallCheck(this, ImageBase);

					this.renderPause = false;
					this.context = context;
					this.wnd = context.wnd;
					this.doc = context.doc;
					this.element = context.element || context.doc.body;
					this.c = context.renderCanvas || ImageBase.renderCanvas;
					this.ctx = context.renderCanvasCtx || ImageBase.renderCanvasCtx;
					this.resW = this.width = width;
					this.resH = this.height = height;
					this.color = color;
				}

				ImageBase.prototype.setRenderCanvas = function setRenderCanvas(c, ctx) {
					this.c = c;
					this.ctx = ctx;
				};

				ImageBase.prototype.setResolution = function setResolution(res) {
					var k = res.width / this.resW;
					this.resW = res.width;
					this.resH = k * this.resH; // res.height;
				};

				ImageBase.prototype.dispose = function dispose() {};

				ImageBase.prototype.renderBlankPage = function renderBlankPage() {
					this.ctx.beginPath();
					this.ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.color, 1);
					this.ctx.rect(0, 0, this.c.width, this.c.height);
					this.ctx.fill();
				};

				ImageBase.prototype.setRenderPause = function setRenderPause(renderPause) {
					this.renderPause = renderPause;
					if (!renderPause && this.continueRender) {
						this.continueRender();
						delete this.continueRender;
					}
				};

				ImageBase.prototype.cancelRender = function cancelRender() {
					if (this.renderTask && this.renderTask.cancel) {
						this.renderTask.cancel();
						delete this.renderTask;
					}
				};

				ImageBase.prototype.renderImage = function renderImage(image) {
					this.pushCtx();
					this.ctx.clearRect(0, 0, this.c.width, this.c.height);
					this.ctx.drawImage(image, 0, 0);
					this.popCtx();
				};

				ImageBase.prototype.normToConv = function normToConv(p) {
					return {
						x: p.x * this.c.width,
						y: (1 - p.y) * this.c.height,
					};
				};

				ImageBase.prototype.renderHit = function renderHit(poly) {
					var ctx = this.ctx;
					ctx.fillStyle = "rgba(255,255,0,0.4)";
					ctx.beginPath();
					var p = this.normToConv(poly[0]);
					ctx.moveTo(p.x, p.y);
					for (var i = 1; i < poly.length; ++i) {
						p = this.normToConv(poly[i]);
						ctx.lineTo(p.x, p.y);
					}
					ctx.closePath();
					ctx.fill();
				};

				ImageBase.prototype.pushCtx = function pushCtx() {
					if (Math.abs(this.resW - this.c.width) >= 1) {
						this.c.width = Math.ceil(this.resW);
					}
					if (Math.abs(this.resH - this.c.height) >= 1) {
						this.c.height = Math.ceil(this.resH);
					}
					this.ctx.save();
					this.ctx.scale(this.c.width / this.width, this.c.height / this.height);
					return this.ctx;
				};

				ImageBase.prototype.popCtx = function popCtx() {
					this.ctx.restore();
				};

				ImageBase.prototype.renderNotFoundPage = function renderNotFoundPage() {
					this.renderBlankPage();
				};

				ImageBase.prototype.finishRender = function finishRender() {
					var canceled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

					if (this.onChange) {
						this.onChange(this.c, canceled);
					}
				};

				ImageBase.prototype.finishLoad = function finishLoad() {
					if (this.onLoad) {
						this.onLoad();
					} else {
						this.startRender();
					}
				};

				ImageBase.prototype.getSimulatedDoc = function getSimulatedDoc() {
					return undefined;
				};

				return ImageBase;
			})();

			ImageBase.renderCanvas = _GraphUtils2.default.createCanvas();
			ImageBase.renderCanvasCtx = ImageBase.renderCanvas.getContext("2d");
			exports.default = ImageBase;

			/***/
		},
		/* 7 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var EventConverter = (function () {
				// virtuals
				// getObject(e, data);
				// getCallback(object);
				// test(object1, object1);

				function EventConverter(wnd, doc) {
					_classCallCheck(this, EventConverter);

					this.wnd = wnd;
					this.doc = doc;
					this.enabled = true;
				}

				EventConverter.prototype.setEnable = function setEnable(vl) {
					if (!vl) {
						if (this.mCapObject) {
							this.notify(this.mCapObject, _libs.$.Event("mouseup"), "mouseup");
							this.mCapObject = undefined;
						}
						if (this.mHovObject) {
							this.notify(this.mHovObject, _libs.$.Event("mouseout"), "mouseout");
							this.mHovObject = undefined;
						}
					}
					this.enabled = vl;
				};

				EventConverter.prototype.getCallback = function getCallback(object) {
					return undefined;
				};

				EventConverter.prototype.notify = function notify(object, e, type) {
					var callback = this.getCallback(object);
					if (callback) {
						var props = _extends({}, e, {
							type: type,
							view: this.wnd,
						});
						var jE = _libs.$.Event(type, props);
						callback(jE, object);
					}
				};

				EventConverter.prototype.convert = function convert(e, data) {
					if (!this.enabled) return;

					if (this.filter) {
						e = this.filter(this.element, e);
					}

					var object = this.getObject(e, data),
						notify = ~e.type.indexOf("touch")
							? this.convertTouch(e, data, object)
							: this.convertMouse(e, data, object);
					if (notify && object) {
						this.notify(object, e, e.type);
					}
				};

				EventConverter.prototype.convertTouch = function convertTouch(e, data, object) {
					var notify = true;
					switch (e.type) {
						case "touchstart": {
							if (this.tCapObject) {
								this.notify(this.tCapObject, e, "touchend");
							}
							this.tCapObject = object;
							break;
						}
						case "touchend": {
							if (this.tCapObject && !this.test(this.tCapObject, object)) {
								this.notify(this.tCapObject, e, "touchend");
								notify = false;
							} else if (object && this.test(this.tCapObject, object)) {
								this.notify(object, e, "touchtap");
							}
							this.tCapObject = undefined;
							break;
						}
						case "touchtap": {
							notify = false;
							break;
						}
					}
					return notify;
				};

				EventConverter.prototype.convertMouse = function convertMouse(e, data, object) {
					if (
						e.originalEvent &&
						e.originalEvent.sourceCapabilities &&
						e.originalEvent.sourceCapabilities.firesTouchEvents
					) {
						return false;
					}
					var notify = true;
					switch (e.type) {
						case "mousedown": {
							if (this.mCapObject) {
								this.notify(this.mCapObject, e, "mouseup");
							}
							this.mCapObject = object;
							break;
						}
						case "mouseup": {
							if (this.mCapObject && !this.test(this.mCapObject, object)) {
								this.notify(this.mCapObject, e, "mouseup");
								notify = false;
							}
							break;
						}
						case "click": {
							notify = this.test(this.mCapObject, object);
							this.mCapObject = undefined;
							break;
						}
						case "mouseenter":
						case "mouseover":
						case "mousemove": {
							if (!this.test(this.mHovObject, object) && this.mHovObject) {
								this.notify(this.mHovObject, e, "mouseout");
								this.mHovObject = undefined;
							}
							if (!this.mHovObject && object) {
								this.notify(object, e, "mouseover");
								this.mHovObject = object;
							}
							notify = e.type === "mousemove";
							break;
						}
						case "mouseleave":
						case "mouseout": {
							if (this.mHovObject) {
								this.notify(this.mHovObject, e, "mouseout");
								this.mHovObject = undefined;
							}
							notify = false;
							break;
						}
					}
					return notify;
				};

				return EventConverter;
			})();

			exports.default = EventConverter;

			/***/
		},
		/* 8 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _Cache = __webpack_require__(14);

			var _Cache2 = _interopRequireDefault(_Cache);

			var _BlankImage = __webpack_require__(46);

			var _BlankImage2 = _interopRequireDefault(_BlankImage);

			var _StaticImage = __webpack_require__(62);

			var _StaticImage2 = _interopRequireDefault(_StaticImage);

			var _PdfImage = __webpack_require__(60);

			var _PdfImage2 = _interopRequireDefault(_PdfImage);

			var _InteractiveImage = __webpack_require__(54);

			var _InteractiveImage2 = _interopRequireDefault(_InteractiveImage);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var ImageFactory = (function () {
				function ImageFactory(context, cache) {
					_classCallCheck(this, ImageFactory);

					this.context = context;
					this.cache = cache || new _Cache2.default();
				}

				ImageFactory.prototype.build = function build(info) {
					var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
					var widthTexels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 210;
					var heightTexels = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 297;
					var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0xffffff;
					var injector = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

					var image = void 0;
					switch (info.type) {
						case "html": {
							image = new _InteractiveImage2.default(
								this.context,
								widthTexels,
								heightTexels,
								color,
								info.src,
								this.cache,
								injector
							);
							break;
						}
						case "image": {
							image = new _StaticImage2.default(this.context, widthTexels, heightTexels, color, info.src);
							break;
						}
						case "pdf": {
							image = new _PdfImage2.default(this.context, widthTexels, heightTexels, color, info.src, n);
							break;
						}
						case "blank":
						default: {
							image = new _BlankImage2.default(this.context, widthTexels, heightTexels, color);
							break;
						}
					}
					return image;
				};

				return ImageFactory;
			})();

			exports.default = ImageFactory;

			/***/
		},
		/* 9 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _book = __webpack_require__(11);

			var _BaseMathUtils = __webpack_require__(2);

			var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var BookPropsBuilder = (function () {
				function BookPropsBuilder(onReady, style) {
					_classCallCheck(this, BookPropsBuilder);

					this.onReady = onReady;
					this.defaults = (0, _book.props)(style);
				}

				BookPropsBuilder.prototype.dispose = function dispose() {};

				BookPropsBuilder.prototype.calcSize = function calcSize(width, height) {
					var scale = _BaseMathUtils2.default.calcScale(
						width,
						height,
						this.defaults.width,
						this.defaults.height
					);
					return {
						width: scale * width,
						height: scale * height,
					};
				};

				BookPropsBuilder.prototype.calcTexels = function calcTexels(width, height) {
					var sheet = this.defaults.sheet,
						scale = _BaseMathUtils2.default.calcScale(width, height, sheet.widthTexels, sheet.heightTexels);
					return {
						widthTexels: scale * width,
						heightTexels: scale * height,
					};
				};

				BookPropsBuilder.prototype.calcProps = function calcProps(width, height) {
					this.props = _extends(
						{},
						this.defaults,
						{
							pages: this.pages,
						},
						this.calcSize(width, height),
						{
							sheet: _extends({}, this.defaults.sheet, this.calcTexels(width, height)),
							cover: _extends({}, this.defaults.cover),
							page: _extends({}, this.defaults.page),
						}
					);
				};

				BookPropsBuilder.prototype.calcSheets = function calcSheets(pages) {
					return (this.sheets = Math.ceil(Math.max(0, pages - 4) / 2));
				};

				BookPropsBuilder.prototype.getSheets = function getSheets() {
					return this.sheets;
				};

				BookPropsBuilder.prototype.getProps = function getProps() {
					return this.props;
				};

				BookPropsBuilder.prototype.getPageCallback = function getPageCallback() {
					return this.binds.pageCallback;
				};

				BookPropsBuilder.prototype.ready = function ready() {
					if (this.onReady) {
						this.onReady(this.getProps(), this.getSheets(), this.getPageCallback());
					}
				};

				return BookPropsBuilder;
			})();

			exports.default = BookPropsBuilder;

			/***/
		},
		/* 10 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _typeof =
				typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
					? function (obj) {
							return typeof obj;
					  }
					: function (obj) {
							return obj &&
								typeof Symbol === "function" &&
								obj.constructor === Symbol &&
								obj !== Symbol.prototype
								? "symbol"
								: typeof obj;
					  };

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(1);

			var _sheetBlock = __webpack_require__(44);

			var _sheetBlock2 = _interopRequireDefault(_sheetBlock);

			var _MathUtils = __webpack_require__(5);

			var _MathUtils2 = _interopRequireDefault(_MathUtils);

			var _ThreeUtils = __webpack_require__(21);

			var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			// import ThreeMarkup from './ThreeMarkup';

			var SheetBlock = (function () {
				function SheetBlock(visual, p, first, last) {
					var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

					var _this = this;

					var state = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "closed";
					var height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

					_classCallCheck(this, SheetBlock);

					this.visual = visual;
					this.p = _extends({}, p, {
						first: first,
						last: last,
					});
					var props = this.getProps();

					var loadedPoints = this.loadPoints();
					Object.keys(loadedPoints).map(function (k) {
						_this[k] = loadedPoints[k][props.shape] || loadedPoints[k][0];
					});

					this.pSpline = new _libs.THREE.CatmullRomCurve3([]);
					for (var i = 0; i < this.interpolationPoints.x[0].length; ++i) {
						this.pSpline.points.push(new _libs.THREE.Vector3());
					}

					this.iSpline = new _libs.THREE.CatmullRomCurve3([]);
					for (var _i = 0; _i < _sheetBlock2.default.resX; ++_i) {
						this.iSpline.points.push(new _libs.THREE.Vector3());
					}

					this.aSplines = [];

					//this.three = new THREE.Object3D();

					this.geometry = _sheetBlock2.default.geometry.clone();

					this.p.sideFaces = [
						{
							first: 0,
							last: _sheetBlock2.default.faces[0],
						},
						{
							first: _sheetBlock2.default.faces[0],
							last: _sheetBlock2.default.faces[1],
						},
					];

					this.sideTexture = new _libs.THREE.Texture();
					this.sideTexture.wrapT = _libs.THREE.RepeatWrapping;
					this.sideTexture.repeat.set(0, last - first);
					this.sideTexture.image = props.sideTexture;
					this.sideTexture.needsUpdate = true;

					this.materials = [
						new _libs.THREE.MeshPhongMaterial(),
						new _libs.THREE.MeshPhongMaterial(),
						new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }),
						new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }),
						new _libs.THREE.MeshPhongMaterial(), //{opacity: 0, transparent: true}
						new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }),
					];

					this.p.setTexture(this.materials[0], 2 * first);
					this.p.setTexture(this.materials[1], 2 * last - 1);

					this.mesh = new _libs.THREE.Mesh(this.geometry, this.materials);
					this.mesh.castShadow = true;
					this.mesh.receiveShadow = true;
					// this.mesh.frustumCulled = true;

					//this.three.add(this.mesh);
					this.three = this.mesh;
					this.three.userData.self = this;

					this.markers = [];
					if (this.p.marker.use) {
						var l = this.geometry.vertices.length;
						var is = void 0;
						// is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
						is = Array.apply(0, Array(l)).map(function (_, i) {
							return i;
						});

						for (
							var _iterator = is,
								_isArray = Array.isArray(_iterator),
								_i2 = 0,
								_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
							;

						) {
							var _ref;

							if (_isArray) {
								if (_i2 >= _iterator.length) break;
								_ref = _iterator[_i2++];
							} else {
								_i2 = _iterator.next();
								if (_i2.done) break;
								_ref = _i2.value;
							}

							var _i3 = _ref;

							var marker = _ThreeUtils2.default.createMarker(
								this.geometry.vertices[_i3],
								_i3 < l / 2 ? 0xff0000 : 0x00ff00,
								this.p.marker.size
							);
							this.markers.push({
								marker: marker,
								vertex: _i3,
							});
							this.three.add(marker);
						}
					}

					this.corner = {
						use: true,
						height: 0,
						maxDistance: 0,
						points: [],
						OZ: new _libs.THREE.Vector3(0, 0, 1),
						axis: new _libs.THREE.Vector3(),
					};
					this.set(0, "closed", height, first, last); // calculate corner points

					this.set(angle, state, height, first, last); // init position

					// if(!SheetBlock.markup) {
					//   SheetBlock.markup=true;
					//   this.markup = new ThreeMarkup(this, 0, [{
					//     x: 0,
					//     y: 0,
					//   }, {
					//     x: 0.5,
					//     y: 1
					//   }, {
					//     x: 1,
					//     y: 0
					//   }].map((p)=>new THREE.Vector2(p.x, p.y)), {});
					// }
				}

				SheetBlock.prototype.dispose = function dispose() {
					for (
						var _iterator2 = this.materials,
							_isArray2 = Array.isArray(_iterator2),
							_i4 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						if (_isArray2) {
							if (_i4 >= _iterator2.length) break;
							_ref2 = _iterator2[_i4++];
						} else {
							_i4 = _iterator2.next();
							if (_i4.done) break;
							_ref2 = _i4.value;
						}

						var m = _ref2;

						if (m.map) {
							m.map = null;
							m.needsUpdate = true;
						}
						m.dispose();
					}
					delete this.materials;
					this.geometry.dispose();
				};

				SheetBlock.prototype.getSize = function getSize() {
					return this.p.last - this.p.first;
				};

				SheetBlock.prototype.getProps = function getProps() {
					return _extends({}, this.p.page, {
						width: this.p.page.width - (this.reducedWidth ? 1e-3 * this.p.page.width : 0),
						sheets: this.p.sheets,
					});
				};

				SheetBlock.prototype.reduceWidth = function reduceWidth(reducedWidth) {
					this.reducedWidth = reducedWidth;
					this.set(this.angle);
				};

				SheetBlock.prototype.getTopCerners = function getTopCerners() {
					var off = !(this.angle > Math.PI / 2) ? this.geometry.vertices.length / 2 : 0;
					return [
						this.geometry.vertices[off],
						this.geometry.vertices[_sheetBlock2.default.resX - 1 + off],
						this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off],
						this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off],
					];
				};

				SheetBlock.prototype.getTopSize = function getTopSize() {
					var vs = this.getTopCerners();
					var w0 = new _libs.THREE.Vector3(),
						w1 = new _libs.THREE.Vector3();
					w0.copy(vs[0]);
					this.three.localToWorld(w0);
					w1.copy(vs[1]);
					this.three.localToWorld(w1);
					return {
						width: Math.abs(w1.x - w0.x),
						height: vs[0].distanceTo(vs[2]),
					};
				};

				SheetBlock.prototype.getTopWorldRotation = function getTopWorldRotation(q) {
					q.x = -Math.PI / 2;
					return q;
				};

				SheetBlock.prototype.getTopWorldPosition = function getTopWorldPosition(v) {
					var vs = this.getTopCerners();
					v.set(0, -100, 0);
					var w = new _libs.THREE.Vector3();
					for (
						var _iterator3 = vs,
							_isArray3 = Array.isArray(_iterator3),
							_i5 = 0,
							_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
						;

					) {
						var _ref3;

						if (_isArray3) {
							if (_i5 >= _iterator3.length) break;
							_ref3 = _iterator3[_i5++];
						} else {
							_i5 = _iterator3.next();
							if (_i5.done) break;
							_ref3 = _i5.value;
						}

						var vi = _ref3;

						w.copy(vi);
						this.three.localToWorld(w);
						v.x += 0.25 * w.x;
						v.y = Math.max(w.y, w.y);
						v.z += 0.25 * w.z;
					}
					return v;
				};

				SheetBlock.prototype.getInterpolationPoints = function getInterpolationPoints(inds, mod) {
					var ps = { x: [], y: [] },
						K = this.getProps().wave;
					for (
						var _iterator4 = inds,
							_isArray4 = Array.isArray(_iterator4),
							_i6 = 0,
							_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
						;

					) {
						var _ref4;

						if (_isArray4) {
							if (_i6 >= _iterator4.length) break;
							_ref4 = _iterator4[_i6++];
						} else {
							_i6 = _iterator4.next();
							if (_i6.done) break;
							_ref4 = _i6.value;
						}

						var i = _ref4;

						ps.x.push([].concat(this.interpolationPoints.x[i]));
						ps.y.push(
							~mod.indexOf(i)
								? this.interpolationPoints.y[i].map(function (n) {
										return K * n;
								  })
								: [].concat(this.interpolationPoints.y[i])
						);
					}
					return ps;
				};

				SheetBlock.prototype.set = function set(angle) {
					var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
					var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.corner.height;
					var first = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.p.first;
					var last = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.p.last;
					var flipDirection = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "right";

					var PI = Math.PI;
					this.state = state;
					var closedAngle = void 0,
						binderTurn = void 0;
					if ((typeof angle === "undefined" ? "undefined" : _typeof(angle)) === "object") {
						this.angle = angle.openedAngle;
						closedAngle = angle.closedAngle;
						binderTurn = angle.binderTurn > PI / 2 ? PI - angle.binderTurn : angle.binderTurn;
					} else {
						this.angle = angle;
					}

					this.corner.height = height;
					if (this.p.first !== first || this.p.last !== last) {
						this.sideTexture.repeat.set(0, last - first);
						this.sideTexture.needsUpdate = true;
						if (this.p.first !== first) {
							this.p.setTexture(this.materials[0], 2 * first);
						}
						if (this.p.last !== last) {
							this.p.setTexture(this.materials[1], 2 * last - 1);
						}
					}
					this.p.first = first;
					this.p.last = last;
					var points = void 0;
					var props = this.getProps();
					if (this.state === "closed") {
						points = this.getInterpolationPoints(
							this.closedInterpolationIndeces,
							this.closedInterpolationIndeces
						);
					} else if (this.state === "opened") {
						if (closedAngle !== undefined && Math.abs(closedAngle - PI / 2) > 1e-2) {
							points = this.getInterpolationPoints(this.flatInterpolationIndeces, []);
							var ps = this.getPointsAtAngle(
								this.getInterpolationPoints(
									this.closedInterpolationIndeces,
									this.closedInterpolationIndeces
								),
								closedAngle > PI / 2 ? PI - closedAngle : closedAngle
							);
							points.x = [ps.x].concat(points.x);
							points.y = [ps.y].concat(points.y);
							// console.log(ps);
						} else {
							points = this.getInterpolationPoints(
								this.openedInterpolationIndeces[
									flipDirection === "right"
										? this.angle > PI / 2
											? "left"
											: "right"
										: this.angle < PI / 2
										? "left"
										: "right"
								],
								this.closedInterpolationIndeces
							);
						}
					}
					var hl = void 0,
						hr = void 0,
						offset = 0.5 * props.sheets * props.depth;
					if (this.state === "closed") {
						offset -= 7e-6 * this.p.scale;
					}
					if (this.angle <= PI / 2) {
						hl = (props.sheets - first) * props.depth;
						hr = (props.sheets - last) * props.depth;
					} else {
						hl = first * props.depth;
						hr = last * props.depth;
					}

					var dDepth = 0.1 * props.depth;
					if (hl > hr) {
						hr -= dDepth;
						hl += dDepth;
					} else {
						hr += dDepth;
						hl -= dDepth;
					}

					var inAngle = this.angle > PI / 2 ? PI - this.angle : this.angle,
						hAngle = this.state === "closed" ? inAngle : binderTurn === undefined ? PI / 2 : binderTurn;

					var _getPointsAtAngleAndH = this.getPointsAtAngleAndHs(points, inAngle, hAngle, [
							hl / props.width,
							hr / props.width,
						]),
						left = _getPointsAtAngleAndH[0],
						right = _getPointsAtAngleAndH[1];

					if (this.angle > PI / 2) {
						this.inverse(left);
						this.inverse(right);
						offset = -offset;
					}
					this.setPoints(left, right, offset);
				};

				SheetBlock.prototype.setPoints = function setPoints(left, right, offset) {
					var _this2 = this;

					var p = this.getProps();
					var i = 0;

					var ys = [right, left];
					for (var y = 0; y < _sheetBlock2.default.resY; ++y) {
						for (var z = 0; z < _sheetBlock2.default.resZ; ++z) {
							for (var x = 0; x < _sheetBlock2.default.resX; ++x) {
								this.geometry.vertices[i++].set(
									ys[y].x[x] * p.width + offset,
									ys[y].y[x] * p.width,
									(z * p.height) / (_sheetBlock2.default.resZ - 1) - 0.5 * p.height
								);
							}
						}
					}
					if (i !== this.geometry.vertices.length) {
						console.warn("setPoints: bad mapping!");
					}

					if (this.corner.use && !this.corner.points.length) {
						var plane = new _libs.THREE.Plane(),
							normal = plane.normal,
							planeOffset = (1 - this.getProps().flexibleCorner) * Math.min(p.width, p.height),
							proj = new _libs.THREE.Vector3();
						plane.setFromNormalAndCoplanarPoint(
							new _libs.THREE.Vector3(-1, 0, -1).normalize(),
							new _libs.THREE.Vector3(planeOffset + offset, 0, 0.5 * p.height)
						);
						for (var _i7 = 0, l = this.geometry.vertices.length; _i7 < l; ++_i7) {
							plane.projectPoint(this.geometry.vertices[_i7], proj);
							proj.sub(this.geometry.vertices[_i7]);
							if (proj.x * normal.x + proj.y * normal.y + proj.z * normal.z > 0) {
								var d = proj.length() / planeOffset;
								this.corner.maxDistance = Math.max(this.corner.maxDistance, d);
								this.corner.points.push({ vertex: _i7, distance: d });
							}
						}
					}

					if (this.corner.use && Math.abs(this.corner.height) > 1e-3) {
						var d2Angle = function d2Angle(d) {
							return (
								(p.cornerDeviation * _this2.corner.height) /
								(1 + Math.exp(-p.bending * (d - 0.5 * _this2.corner.maxDistance)))
							);
						};
						this.corner.axis.set(-1, 0, 1).normalize();
						this.corner.axis.applyAxisAngle(this.corner.OZ, this.angle);
						for (
							var _iterator5 = this.corner.points,
								_isArray5 = Array.isArray(_iterator5),
								_i8 = 0,
								_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
							;

						) {
							var _ref5;

							if (_isArray5) {
								if (_i8 >= _iterator5.length) break;
								_ref5 = _iterator5[_i8++];
							} else {
								_i8 = _iterator5.next();
								if (_i8.done) break;
								_ref5 = _i8.value;
							}

							var point = _ref5;

							this.geometry.vertices[point.vertex].applyAxisAngle(
								this.corner.axis,
								d2Angle(point.distance)
							);
						}
					}

					for (
						var _iterator6 = this.markers,
							_isArray6 = Array.isArray(_iterator6),
							_i9 = 0,
							_iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();
						;

					) {
						var _ref6;

						if (_isArray6) {
							if (_i9 >= _iterator6.length) break;
							_ref6 = _iterator6[_i9++];
						} else {
							_i9 = _iterator6.next();
							if (_i9.done) break;
							_ref6 = _i9.value;
						}

						var m = _ref6;

						m.marker.position.copy(this.geometry.vertices[m.vertex]);
					}

					this.geometry.computeVertexNormals();
					//this.geometry.computeFaceNormals();
					this.geometry.computeBoundingSphere();
					//this.geometry.computeBoundingBox();
					this.geometry.verticesNeedUpdate = true;

					if (this.markup) {
						this.markup.computeVertices();
					}
				};

				SheetBlock.prototype.inverse = function inverse(ps) {
					for (var i = 0; i < ps.x.length; ++i) {
						ps.x[i] = -ps.x[i];
					}
					return ps;
				};

				SheetBlock.prototype.getPointsAtHs = function getPointsAtHs(ps, angle, hs) {
					var _this3 = this;

					var N = 1000;
					_MathUtils2.default.setSplinePoints(this.pSpline, ps);
					var bl = void 0 /* = MathUtils.splitSpline(this.pSpline, N)*/,
						r = [];
					{
						var p1 = _extends({}, this.pSpline.getPoint((N - 1) / N)),
							p2 = _extends({}, this.pSpline.getPoint(1)),
							dp = { x: p2.x - p1.x, y: p2.y - p1.y },
							ln = Math.sqrt(dp.x * dp.x + dp.y * dp.y),
							sp = this.pSpline.points[this.pSpline.points.length - 1];
						sp.set(sp.x + (0.2 * dp.x) / ln, sp.y + (0.2 * dp.y) / ln, 0);
						bl = _MathUtils2.default.splitSpline(this.pSpline, N);
					}
					bl.ls.push(1e7);
					_MathUtils2.default.mapl2L(bl.ls, bl.len, _sheetBlock2.default.resX, function (i) {
						for (var j = 0; j < hs.length; ++j) {
							if (!i) {
								r[j] = { x: [-hs[j] * Math.sin(angle)], y: [hs[j] * Math.cos(angle)] };
							} else {
								var p0 = _extends({}, _this3.pSpline.getPoint((i - 1) / N)),
									_p = _this3.pSpline.getPoint(i / N),
									x = -(_p.y - p0.y),
									y = _p.x - p0.x,
									l = Math.sqrt(x * x + y * y);
								r[j].x.push(_p.x + (x / l) * hs[j]);
								r[j].y.push(_p.y + (y / l) * hs[j]);
							}
						}
					});

					var nps = [];

					var _loop = function _loop(j) {
						nps[j] = { x: [], y: [] };
						_MathUtils2.default.setSplinePoints(_this3.iSpline, r[j]);
						var l = _MathUtils2.default.splitSpline(_this3.iSpline, N);
						l.ls.push(1e7);
						_MathUtils2.default.mapl2L(l.ls, 1, _sheetBlock2.default.resX, function (i) {
							var p = _this3.iSpline.getPoint(i / N);
							nps[j].x.push(p.x);
							nps[j].y.push(p.y);
						});
					};

					for (var j = 0; j < hs.length; ++j) {
						_loop(j);
					}
					return nps;
				};

				SheetBlock.prototype.getPointsAtAngleAndHs = function getPointsAtAngleAndHs(points, angle, hAngle, hs) {
					var ps = this.getPointsAtAngle(points, angle);
					return this.getPointsAtHs(ps, hAngle, hs);
				};

				SheetBlock.prototype.getPointsAtAngle = function getPointsAtAngle(points, angle) {
					var ps = { x: [], y: [] },
						angles = [];
					angle /= Math.PI / 2;
					for (var j = 0; j < points.x.length; ++j) {
						angles.push(j / (points.x.length - 1));
					}
					for (var i = 0; i < points.x[0].length; ++i) {
						var xps = [],
							yps = [];
						for (var _j = 0; _j < points.x.length; ++_j) {
							xps.push(points.x[_j][i]);
							yps.push(points.y[_j][i]);
						}
						ps.x.push(this.interpolate(angles, xps, angle));
						ps.y.push(this.interpolate(angles, yps, angle));
					}
					return ps;
				};

				SheetBlock.prototype.interpolate = function interpolate(x, y, xi) {
					if (!this.aSplines[x.length]) {
						this.aSplines[x.length] = new _libs.THREE.CatmullRomCurve3([]);
						var ps = this.aSplines[x.length].points;
						for (var i = 0; i < x.length; ++i) {
							ps.push(new _libs.THREE.Vector3());
						}
					}
					var spline = this.aSplines[x.length];
					for (var _i10 = 0; _i10 < x.length; ++_i10) {
						spline.points[_i10].set(x[_i10], y[_i10], 0);
					}
					return spline.getPoint(Math.min(1, Math.max(xi, 0))).y;
				};

				SheetBlock.prototype.loadPoints = function loadPoints() {
					var x = [],
						y = [];
					var _arr = [0, 0.2877, 0.6347, 0.8174, 1.0];
					for (var _i11 = 0; _i11 < _arr.length; _i11++) {
						var r = _arr[_i11];
						x.push(r * Math.cos((0.9 * Math.PI) / 4));
						y.push(r * Math.sin((0.9 * Math.PI) / 4));
					}

					var openedInterpolationIndeces = [
							{
								left: [2, 3, 4],
								right: [2, 3, 4],
							},
							{
								left: [2, 6, 5],
								right: [2, 3, 4],
							},
							{
								left: [2, 3, 4],
								right: [2, 3, 4],
							},
						],
						closedInterpolationIndeces = [
							[0, 1, 2],
							[0, 1, 2],
							[0, 1, 2],
						],
						flatInterpolationIndeces = [
							[5, 4],
							[8, 7],
							[5, 4],
						],
						interpolationPoints = [
							{
								x: [
									[0, 0.25, 0.5, 0.75, 1.0],
									[0, 0.2482, 0.4997, 0.75, 1.0],
									[0, 0.2428, 0.4989, 0.75, 1.0],
									[0, 0.125, 0.3214, 0.566, 0.8192],
									// [0,0.1250,0.3214,0.5745,0.8660],
									[0, 0, 0, 0, 0],
									x,
								],
								y: [
									[0, 0, 0, 0, 0],
									[0, 0.03, 0.0166, 0.0033, 0.0001],
									[0, 0.0596, 0.0331, 0.0065, 0.0002],
									[0, 0.2165, 0.383, 0.492, 0.5736],
									// [0,0.2165,0.3830,0.4821,0.5000],
									[0, 0.25, 0.5, 0.75, 1.0],
									y,
								],
							},
							{
								x: [
									[0, 0.25, 0.5, 0.75, 1.0], //closed
									[0, 0.2482, 0.4997, 0.75, 1.0],
									[0, 0.2428, 0.4989, 0.75, 1.0],
									[0, 0.125, 0.3214, 0.5574, 0.8192], //right
									[0, -0.0434, 0.0, 0.1302, 0.342],
									[0, 0.0434, -0.0, -0.1302, -0.342], //left
									[0, 0.1705, 0.341, 0.4821, 0.5736],
									[0, 0, 0, 0, 0], //flat
									x,
								],
								y: [
									[0, 0, 0, 0, 0], //closed
									[0, 0.03, 0.0166, 0.0033, 0.0001],
									[0, 0.0596, 0.0331, 0.0065, 0.0002],
									[0, 0.2165, 0.383, 0.5018, 0.5736], //right
									[0, 0.2462, 0.5, 0.7386, 0.9397],
									[0, 0.2462, 0.5, 0.7386, 0.9397], //left
									[0, 0.1828, 0.3657, 0.5745, 0.8192],
									[0, 0.25, 0.5, 0.75, 1.0], //flat
									y,
								],
							},
							// Old interpolation points
							{
								x: [
									[0, 0.2877, 0.6347, 0.8174, 1.0],
									[0.0, 0.286, 0.632, 0.815, 0.997],
									[0.0, 0.279, 0.623, 0.806, 0.988],
									[0.0, 0.126, 0.411, 0.593, 0.774],
									[0, 0, 0, 0, 0],
									x,
								],
								y: [
									[0, 0, 0, 0, 0],
									[0.0, 0.03, 0.01, 0.002, 0.0],
									[0.0, 0.06, 0.017, 0.004, 0.0],
									[0.0, 0.259, 0.44, 0.446, 0.429],
									[0, 0.2877, 0.6347, 0.8174, 1.0],
									y,
								],
							},
						];

					return {
						interpolationPoints: interpolationPoints,
						openedInterpolationIndeces: openedInterpolationIndeces,
						closedInterpolationIndeces: closedInterpolationIndeces,
						flatInterpolationIndeces: flatInterpolationIndeces,
					};
				};

				return SheetBlock;
			})();

			exports.default = SheetBlock;

			/***/
		},
		/* 11 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			exports.props = props;
			function props() {
				var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "volume";

				// const props = {
				//   height,
				//   width,
				//   gravity,
				//   injector,
				//   cachedPages,
				//   renderInactivePages,
				//   renderWhileFlipping,
				//   pagesForPredicting,
				//   preloadPages,
				//   sheet: {
				//     startVelocity,
				//     cornerDeviation,
				//     flexibility,
				//     flexibleCorner,
				//     bending,
				//     wave,
				//     shape,
				//     widthTexels,
				//     heightTexels,
				//     color,
				//     sideTexture
				//   },
				//   cover: {
				//     ...sheet,
				//     padding,
				//     binderTexture,
				//     depth,
				//     mass
				//   },
				//   page: {
				//     ...sheet,
				//     depth,
				//     mass
				//   }
				// };

				var def = {
						height: 0.297,
						width: 0.21,
						backgroundColor: "",
						backgroundImage: "",
						backgroundStyle: "",
						highlightLinks: true,
						lighting: "mixed",
						gravity: 1,
						cachedPages: 50,
						renderInactivePages: true,
						renderInactivePagesOnMobile: true,
						renderWhileFlipping: false,
						pagesForPredicting: 5,
						preloadPages: 5,
						autoPlayDuration: 5000,
						rtl: false,
						interactiveCorners: true,
						maxDepth: 0.008,
						sheet: {
							startVelocity: 1.2,
							cornerDeviation: 0.15,
							flexibility: 10,
							flexibleCorner: 0.5,
							bending: 11,
							wave: 0.3,
							shape: 0,
							widthTexels: 1920,
							heightTexels: 1080,
							color: 0xffffff,
							side: "color",
						},
						cover: {
							side: "transparent",
							binderTexture: "",
							depth: 0.0003,
							padding: 0,
							mass: 0.001,
						},
						page: {
							depth: 0.0001,
							mass: 0.001,
						},
						cssLayerProps: {
							width: 1024,
						},
					},
					styles = {
						volume: def,
						flat: _extends({}, def, {
							lighting: "ambient",
							sheet: _extends({}, def.sheet, {
								wave: 0.05,
								side: "transparent",
								shape: 1,
							}),
							cover: _extends({}, def.cover, {
								depth: 0.00002,
							}),
							page: _extends({}, def.page, {
								depth: 0.00001,
							}),
						}),
						"volume-paddings": _extends({}, def, {
							cover: _extends({}, def.cover, {
								padding: 0.0025,
							}),
						}),
					};
				styles["volume-unrolling"] = _extends({}, styles.volume, {
					sheet: _extends({}, styles.volume.sheet, {
						shape: 1,
					}),
				});
				styles["volume-paddings-unrolling"] = _extends({}, styles["volume-paddings"], {
					sheet: _extends({}, styles["volume-paddings"].sheet, {
						shape: 1,
					}),
				});
				return styles[style] || def;
			}

			/***/
		},
		/* 12 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;
			exports.CSS3DSprite = exports.CSS3DObject = undefined;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			_libs.THREE.CSS3DObject = (function (_THREE$Object3D) {
				_inherits(CSS3DObject, _THREE$Object3D);

				function CSS3DObject() {
					var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

					_classCallCheck(this, CSS3DObject);

					var _this = _possibleConstructorReturn(this, _THREE$Object3D.call(this));

					if (element) {
						_this.set(element);
					}
					return _this;
				}

				CSS3DObject.prototype.set = function set(element) {
					this.element = element;
					this.element.style.position = "absolute";

					this.addEventListener("removed", function () {
						if (this.element.parentNode !== null) {
							this.element.parentNode.removeChild(this.element);
						}
					});
				};

				return CSS3DObject;
			})(_libs.THREE.Object3D);

			_libs.THREE.CSS3DSprite = (function (_THREE$CSS3DObject) {
				_inherits(CSS3DSprite, _THREE$CSS3DObject);

				function CSS3DSprite(element) {
					_classCallCheck(this, CSS3DSprite);

					return _possibleConstructorReturn(this, _THREE$CSS3DObject.call(this, element));
				}

				return CSS3DSprite;
			})(_libs.THREE.CSS3DObject);

			_libs.THREE.CSS3DRenderer = function CSS3DRenderer() {
				_classCallCheck(this, CSS3DRenderer);

				var _width, _height;
				var _widthHalf, _heightHalf;

				var matrix = new _libs.THREE.Matrix4();

				var cache = {
					camera: { fov: 0, style: "" },
					objects: {},
				};

				var domElement = document.createElement("div");
				domElement.style.overflow = "hidden";

				this.domElement = domElement;

				var cameraElement = document.createElement("div");

				cameraElement.style.WebkitTransformStyle = "preserve-3d";
				cameraElement.style.MozTransformStyle = "preserve-3d";
				cameraElement.style.transformStyle = "preserve-3d";

				domElement.appendChild(cameraElement);

				var isIE = 1; ///Trident/i.test( navigator.userAgent);

				this.setClearColor = function () {};

				this.getSize = function () {
					return {
						width: _width,
						height: _height,
					};
				};

				this.setSize = function (width, height) {
					_width = width;
					_height = height;
					_widthHalf = _width / 2;
					_heightHalf = _height / 2;

					domElement.style.width = width + "px";
					domElement.style.height = height + "px";

					cameraElement.style.width = width + "px";
					cameraElement.style.height = height + "px";
				};

				function epsilon(value) {
					var r = void 0;
					//r=Math.abs( value) < 1e-6 ? 0 : value;
					r = Math.round((value + Number.EPSILON) * 1e5) / 1e5;
					return r;
				}

				function getCameraCSSMatrix(matrix) {
					var elements = matrix.elements;
					return (
						"matrix3d(" +
						[
							epsilon(elements[0]),
							epsilon(-elements[1]),
							epsilon(elements[2]),
							epsilon(elements[3]),
							epsilon(elements[4]),
							epsilon(-elements[5]),
							epsilon(elements[6]),
							epsilon(elements[7]),
							epsilon(elements[8]),
							epsilon(-elements[9]),
							epsilon(elements[10]),
							epsilon(elements[11]),
							epsilon(elements[12]),
							epsilon(-elements[13]),
							epsilon(elements[14]),
							epsilon(elements[15]),
						].join(",") +
						")"
					);
				}

				function getObjectCSSMatrix(matrix, cameraCSSMatrix) {
					var elements = matrix.elements;
					var matrix3d =
						"matrix3d(" +
						[
							epsilon(elements[0]),
							epsilon(elements[1]),
							epsilon(elements[2]),
							epsilon(elements[3]),
							epsilon(-elements[4]),
							epsilon(-elements[5]),
							epsilon(-elements[6]),
							epsilon(-elements[7]),
							epsilon(elements[8]),
							epsilon(elements[9]),
							epsilon(elements[10]),
							epsilon(elements[11]),
							epsilon(elements[12]),
							epsilon(elements[13]),
							epsilon(elements[14]),
							epsilon(elements[15]),
						].join(",") +
						")";

					if (isIE) {
						return (
							"translate(-50%,-50%)" +
							"translate(" +
							_widthHalf +
							"px," +
							_heightHalf +
							"px)" +
							cameraCSSMatrix +
							matrix3d
						);
					}

					return "translate(-50%,-50%)" + matrix3d;
				}

				function renderObject(object, camera, cameraCSSMatrix) {
					if (object instanceof _libs.THREE.CSS3DObject) {
						var style;

						if (object instanceof _libs.THREE.CSS3DSprite) {
							matrix.copy(camera.matrixWorldInverse);
							matrix.transpose();
							matrix.copyPosition(object.matrixWorld);
							matrix.scale(object.scale);

							matrix.elements[3] = 0;
							matrix.elements[7] = 0;
							matrix.elements[11] = 0;
							matrix.elements[15] = 1;

							style = getObjectCSSMatrix(matrix, cameraCSSMatrix);
						} else {
							style = getObjectCSSMatrix(object.matrixWorld, cameraCSSMatrix);
						}

						var element = object.element;
						var cachedStyle = cache.objects[object.id] && cache.objects[object.id].style;

						if (cachedStyle === undefined || cachedStyle !== style) {
							element.style.WebkitTransform = style;
							element.style.MozTransform = style;
							element.style.transform = style;

							cache.objects[object.id] = { style: style };
							if (isIE) {
								cache.objects[object.id].distanceToCameraSquared = getDistanceToSquared(camera, object);
							}
						}

						if (element.parentNode !== cameraElement) {
							cameraElement.appendChild(element);
						}
					}

					for (var i = 0, l = object.children.length; i < l; i++) {
						renderObject(object.children[i], camera, cameraCSSMatrix);
					}
				}

				var getDistanceToSquared = (function () {
					var a = new _libs.THREE.Vector3();
					var b = new _libs.THREE.Vector3();

					return function (object1, object2) {
						a.setFromMatrixPosition(object1.matrixWorld);
						b.setFromMatrixPosition(object2.matrixWorld);

						return a.distanceToSquared(b);
					};
				})();

				function zOrder(scene) {
					var order = Object.keys(cache.objects).sort(function (a, b) {
						return cache.objects[a].distanceToCameraSquared - cache.objects[b].distanceToCameraSquared;
					});
					var zMax = order.length;

					scene.traverse(function (object) {
						var index = order.indexOf(object.id + "");

						if (index !== -1) {
							object.element.style.zIndex = zMax - index;
						}
					});
				}

				this.render = function (scene, camera) {
					var fov = camera.projectionMatrix.elements[5] * _heightHalf;

					if (cache.camera.fov !== fov) {
						domElement.style.WebkitPerspective = fov + "px";
						domElement.style.MozPerspective = fov + "px";
						domElement.style.perspective = fov + "px";

						cache.camera.fov = fov;
					}

					scene.updateMatrixWorld();

					if (camera.parent === null) camera.updateMatrixWorld();

					var cameraCSSMatrix = "translateZ(" + fov + "px)" + getCameraCSSMatrix(camera.matrixWorldInverse);

					var style = cameraCSSMatrix + "translate(" + _widthHalf + "px," + _heightHalf + "px)";

					if (cache.camera.style !== style && !isIE) {
						cameraElement.style.WebkitTransform = style;
						cameraElement.style.MozTransform = style;
						cameraElement.style.transform = style;

						cache.camera.style = style;
					}

					renderObject(scene, camera, cameraCSSMatrix);

					if (isIE) {
						// IE10 and 11 does not support 'preserve-3d'.
						// Thus, z-order in 3D will not work.
						// We have to calc z-order manually and set CSS z-index for IE.
						// FYI: z-index can't handle object intersection
						zOrder(scene);
					}
				};
			};

			exports.default = _libs.THREE.CSS3DRenderer;

			var _CSS3DObject = _libs.THREE.CSS3DObject,
				_CSS3DSprite = _libs.THREE.CSS3DSprite;
			exports.CSS3DObject = _CSS3DObject;
			exports.CSS3DSprite = _CSS3DSprite;

			/***/
		},
		/* 13 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _CSS3DRenderer = __webpack_require__(12);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var CSSLayer = (function (_CSS3DObject) {
				_inherits(CSSLayer, _CSS3DObject);

				CSSLayer.init = function init(doc) {
					var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 150;

					CSSLayer.delay = delay;
					CSSLayer.style = (0, _libs.$)(
						(
							"<style type=text/css>\n      .css-layer {\n    \t\topacity: 1;\n    \t\ttransition: opacity " +
							delay +
							"ms ease-out;\n        visibility: visible;\n        overflow: hidden;\n    \t}\n    \t.css-layer.hidden {\n    \t\ttransition: opacity " +
							delay +
							"ms ease-in, visibility " +
							delay +
							"ms step-end;\n    \t\topacity: 0;\n        visibility: hidden;\n        display: block;\n        pointer-events: none;\n      }\n      .fb3d-block {\n        position: absolute;\n      }\n      .fb3d-audio audio, .fb3d-link a, .fb3d-iframe iframe, .fb3d-video video, .fb3d-youtube .youtube {\n        display: block;\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n      }\n      .fb3d-image {\n        text-align: center;\n      }\n      .fb3d-link a {\n        cursor: pointer;\n        background-color: rgba(255,255,0,.1);\n        transition: background-color .15s ease-in;\n      }\n      .fb3d-link a:hover {\n        background-color: rgba(255,255,0,.2);\n        transition: background-color .15s ease-out;\n      }\n      .fb3d-iframe iframe {\n        border: 0;\n      }\n      .fb3d-image img {\n        max-width: 100%;\n        max-height: 100%;\n      }\n    </style>"
						).fb3dQFilter()
					).appendTo(doc.head);
				};

				CSSLayer.dispose = function dispose() {
					CSSLayer.style.remove();
				};

				function CSSLayer(width, height, props) {
					_classCallCheck(this, CSSLayer);

					var _this = _possibleConstructorReturn(this, _CSS3DObject.call(this));

					_this.props = props;
					_this.jContainer = (0, _libs.$)('<div class="hidden css-layer"></div>');
					_this.setSize(width, height);
					_this.setData();
					_this.set(_this.jContainer[0]);
					return _this;
				}

				CSSLayer.prototype.setSize = function setSize(width, height) {
					var widthPxs = this.props.width,
						heightPxs = (height / width) * widthPxs;
					this.jContainer.width(widthPxs).height(heightPxs);
					this.scale.x = 1 / (widthPxs / width);
					this.scale.y = 1 / (widthPxs / width);
				};

				CSSLayer.prototype.callInternal = function callInternal(name) {
					if (this.object && this.object[name]) {
						try {
							this.object[name]();
						} catch (e) {
							console.error(e);
						}
					}
				};

				CSSLayer.prototype.dispose = function dispose() {
					this.clearInternals();
				};

				CSSLayer.prototype.clearInternals = function clearInternals() {
					this.callInternal("dispose");
					!this.css || this.css.remove();
					!this.html || this.html.remove();
				};

				CSSLayer.prototype.setData = function setData() {
					var css = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
					var html = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
					var js = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

					this.clearInternals();

					this.css = (0, _libs.$)('<style type="text/css">' + css + "</style>").appendTo(this.jContainer);
					this.html = (0, _libs.$)(html).appendTo(this.jContainer);
					var init = eval(js);
					if (init) {
						this.object = init(this.jContainer, this.props) || {};
					}
				};

				CSSLayer.prototype.pendedCall = function pendedCall(clb) {
					var _this2 = this;

					var timestamp = (this.timestamp = Date.now());
					setTimeout(function () {
						if (timestamp === _this2.timestamp) {
							clb();
						}
					}, CSSLayer.delay * 0.5);
				};

				CSSLayer.prototype.isHidden = function isHidden() {
					return this.jContainer.hasClass("hidden");
				};

				CSSLayer.prototype.hide = function hide() {
					var _this3 = this;

					var res = void 0;
					if (!this.isHidden()) {
						this.jContainer.addClass("hidden");
						this.callInternal("hide");
						res = new Promise(function (resolve) {
							_this3.pendedCall(function () {
								_this3.callInternal("hidden");
								resolve();
							});
						});
					} else {
						res = Promise.resolve();
					}
					return res;
				};

				CSSLayer.prototype.show = function show() {
					var _this4 = this;

					var res = void 0;
					if (this.isHidden()) {
						this.jContainer.removeClass("hidden");
						this.callInternal("show");
						res = new Promise(function (resolve) {
							_this4.pendedCall(function () {
								_this4.callInternal("shown");
								resolve();
							});
						});
					} else {
						res = Promise.resolve();
					}
					return res;
				};

				return CSSLayer;
			})(_CSS3DRenderer.CSS3DObject);

			exports.default = CSSLayer;

			/***/
		},
		/* 14 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Cache = (function () {
				function Cache() {
					var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
					var sizeof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cache.countSizeof;

					_classCallCheck(this, Cache);

					this.os = new Map();
					this.sizeof = sizeof;
					this.maxSize = maxSize;
					this.size = 0;
				}

				Cache.prototype.forEach = function forEach(clb) {
					this.os.forEach(function (v, k) {
						return clb([k, v]);
					});
				};

				Cache.countSizeof = function countSizeof(value) {
					return 1;
				};

				Cache.prototype.remove = function remove(k) {
					var res = false;
					var v = this.os.get(k);
					if (!v.locked || !v.locked(k)) {
						this.size -= this.sizeof(v);
						if (v.dispose) {
							v.dispose();
						}
						this.os.delete(k);
						res = true;
					}
					return res;
				};

				Cache.prototype.freeSpace = function freeSpace() {
					var arr = [];
					for (
						var _iterator = this.os,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var p = _ref;

						arr.push({ timestamp: p[1].timestamp, key: p[0] });
					}
					arr.sort(function (a, b) {
						return a.timestamp - b.timestamp;
					});
					for (var i = 0; i < arr.length && this.size > (3 * this.maxSize) / 4; ++i) {
						this.remove(arr[i].key);
					}
				};

				Cache.prototype.dispose = function dispose() {
					var arr = [];
					for (
						var _iterator2 = this.os,
							_isArray2 = Array.isArray(_iterator2),
							_i2 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var p = _ref2;

						arr.push({ v: p[1], k: p[0] });
					}
					for (
						var _iterator3 = arr,
							_isArray3 = Array.isArray(_iterator3),
							_i3 = 0,
							_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
						;

					) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var o = _ref3;

						if (o.v.dispose) {
							o.v.dispose();
						}
						this.os.delete(o.k);
					}
				};

				Cache.recursionSizeof = function recursionSizeof(value) {
					var size = 0;
					if (value) {
						++size;
						var len = value.length;
						if (len === undefined) {
							for (var p in value) {
								if (value.hasOwnProperty(p)) {
									size += Cache.recursionSizeof(value[p]);
								}
							}
						} else {
							size += len;
						}
					}
					return size;
				};

				Cache.prototype.getTimestamp = function getTimestamp() {
					return Date.now();
				};

				Cache.prototype.get = function get(key) {
					var value = this.os.get(key);
					if (value) {
						value.timestamp = this.getTimestamp();
					}
					return value;
				};

				Cache.prototype.put = function put(key, value) {
					value.timestamp = this.getTimestamp();
					this.os.set(key, value);
					this.size += this.sizeof(value);
					if (this.size > this.maxSize) {
						this.freeSpace();
					}
					return value;
				};

				return Cache;
			})();

			exports.default = Cache;

			/***/
		},
		/* 15 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var Controller = (function (_THREE$EventDispatche) {
				_inherits(Controller, _THREE$EventDispatche);

				function Controller() {
					_classCallCheck(this, Controller);

					return _possibleConstructorReturn(this, _THREE$EventDispatche.apply(this, arguments));
				}

				Controller.prototype.handleDefault = function handleDefault(id, e, data) {
					//console.log(id+'-'+e.type+'-'+data);
				};

				Controller.prototype.dispatchAsync = function dispatchAsync(e) {
					var _this2 = this;

					Promise.resolve().then(function () {
						return _this2.dispatchEvent(e);
					});
				};

				Controller.prototype.dispose = function dispose() {};

				return Controller;
			})(_libs.THREE.EventDispatcher);

			exports.default = Controller;

			/***/
		},
		/* 16 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _EventConverter2 = __webpack_require__(7);

			var _EventConverter3 = _interopRequireDefault(_EventConverter2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var CustomEventConverter = (function (_EventConverter) {
				_inherits(CustomEventConverter, _EventConverter);

				// custom
				// testIntersection(e, data);
				// custom.object
				// test(object);

				function CustomEventConverter(wnd, doc) {
					var customTest =
						arguments.length > 2 && arguments[2] !== undefined
							? arguments[2]
							: function () {
									return false;
							  };
					var eDoc = arguments[3];

					_classCallCheck(this, CustomEventConverter);

					var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

					_this.eDoc = eDoc;
					_this.customTest = customTest;
					_this.customs = [];
					return _this;
				}

				CustomEventConverter.prototype.test = function test(object1, object2) {
					return object1 && object2 ? this.customTest(object1, object2) : false;
				};

				CustomEventConverter.prototype.getCallback = function getCallback(object) {
					return object.target.callback;
				};

				CustomEventConverter.prototype.addCustom = function addCustom(custom) {
					this.customs.push(custom);
				};

				CustomEventConverter.prototype.getObject = function getObject(e, data) {
					var object = void 0;
					if (data.doc === this.eDoc) {
						for (
							var _iterator = this.customs,
								_isArray = Array.isArray(_iterator),
								_i = 0,
								_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
							;

						) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var custom = _ref;

							object = custom.testIntersection(e, data);
							if (object) {
								break;
							}
						}
					}
					return object;
				};

				return CustomEventConverter;
			})(_EventConverter3.default);

			exports.default = CustomEventConverter;

			/***/
		},
		/* 17 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _Utils = __webpack_require__(3);

			var _Utils2 = _interopRequireDefault(_Utils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Finder = (function () {
				Finder.isDelimetr = function isDelimetr(s) {
					return s === Finder.DELIMITER;
				};

				Finder.prototype.merge = function merge() {
					var as = [],
						map = [],
						strs = this.strs;
					var p = 0;
					for (var i = 0; i < strs.length; ++i) {
						if (strs[i].length) {
							map.push({
								base: i,
								offset: p,
							});
							as.push(strs[i]);
							p += strs[i].length;
							if (
								i < strs.length - 1 &&
								!Finder.isDelimetr(strs[i].charAt(strs[i].length - 1)) &&
								!Finder.isDelimetr(strs[i + 1].charAt(0))
							) {
								as.push(Finder.DELIMITER);
								++p;
							}
						}
					}
					this.map = map;
					this.str = as.join("");
				};

				Finder.prototype.addHits = function addHits(p) {
					var info =
						this.map[
							_Utils2.default.lowerBound(this.map, { offset: p }, function (a, b) {
								return a.offset - b.offset;
							})
						];
					var chars = this.pattern.length,
						i = info.base;
					p -= info.offset;
					while (chars) {
						if (this.strs[i].length) {
							var delimeter =
									i < this.strs.length - 1 &&
									!Finder.isDelimetr(this.strs[i].charAt(this.strs[i].length - 1)) &&
									!Finder.isDelimetr(this.strs[i + 1].charAt(0)),
								length = Math.min(this.strs[i].length + (delimeter ? 1 : 0) - p, chars);
							if (p < this.strs[i].length) {
								this.hits.push({
									index: i,
									offset: p,
									length: Math.min(length, this.strs[i].length - p),
								});
							}
							chars -= length;
							++i;
							p = 0;
						}
					}
				};

				Finder.prototype.addContext = function addContext(p) {
					var f = p,
						l = p + this.pattern.length - 1,
						dels = this.props.contextLength,
						prevDels = dels + 1;
					while (dels && prevDels - dels) {
						prevDels = dels;
						if (dels % 2) {
							for (var i = f - 2; i >= 0; --i) {
								if (Finder.isDelimetr(this.str[i]) || i === 0) {
									f = i === 0 ? 0 : i + 1;
									--dels;
									break;
								}
							}
						} else {
							for (var _i = l + 2; _i < this.str.length; ++_i) {
								if (Finder.isDelimetr(this.str[_i]) || _i === this.str.length - 1) {
									l = _i === this.str.length - 1 ? _i === this.str.length - 1 : _i - 1;
									--dels;
									break;
								}
							}
						}
					}
					this.contexts.push(this.str.substr(f, l - f + 1));
				};

				Finder.prototype.getHits = function getHits() {
					return this.hits;
				};

				Finder.prototype.getContexts = function getContexts() {
					return this.contexts;
				};

				function Finder(strs, pattern, props) {
					_classCallCheck(this, Finder);

					this.props = _extends({}, Finder.defaults, props);
					this.strs = strs;
					var data = this.merge(strs);
					this.hits = [];
					this.contexts = [];
					this.pattern = pattern.toLowerCase();
					this.lstr = this.str.toLowerCase();
					var p = 0;
					while (true) {
						p = this.lstr.indexOf(this.pattern, p);
						if (p === -1) {
							break;
						} else {
							this.addHits(p);
							this.addContext(p);
							p += this.pattern.length;
						}
					}
				}

				return Finder;
			})();

			Finder.DELIMITER = " ";
			Finder.defaults = {
				contextLength: 7,
				hits: true,
				contexts: true,
			};
			exports.default = Finder;

			/***/
		},
		/* 18 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _FullScreen2 = __webpack_require__(53);

			var _FullScreen3 = _interopRequireDefault(_FullScreen2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var FullScreenX = (function (_FullScreen) {
				_inherits(FullScreenX, _FullScreen);

				function FullScreenX() {
					_classCallCheck(this, FullScreenX);

					return _possibleConstructorReturn(this, _FullScreen.apply(this, arguments));
				}

				FullScreenX.available = function available() {
					return true;
				};

				FullScreenX.activated = function activated() {
					return _FullScreen.available.call(this)
						? _FullScreen.activated.call(this)
						: FullScreenX.node.hasClass(FullScreenX.classX);
				};

				FullScreenX.addEventListener = function addEventListener(element, handler) {
					if (_FullScreen.available.call(this)) {
						_FullScreen.addEventListener.call(this, element, handler);
					} else {
						FullScreenX.handler = handler;
					}
				};

				FullScreenX.removeEventListener = function removeEventListener(element, handler) {
					if (_FullScreen.available.call(this)) {
						_FullScreen.removeEventListener.call(this, element, handler);
					} else {
						FullScreenX.handler = FullScreenX.defHandler;
					}
				};

				FullScreenX.request = function request(element) {
					if (_FullScreen.available.call(this)) {
						_FullScreen.request.call(this, element);
					} else {
						if (!FullScreenX.node.hasClass(FullScreenX.classX)) {
							FullScreenX.node = (0, _libs.$)(element || document.body);
							FullScreenX.node.addClass(FullScreenX.classX);
							Promise.resolve().then(FullScreenX.handler);
						}
					}
				};

				FullScreenX.cancel = function cancel() {
					if (_FullScreen.available.call(this)) {
						_FullScreen.cancel.call(this);
					} else {
						if (FullScreenX.node.hasClass(FullScreenX.classX)) {
							FullScreenX.node.removeClass(FullScreenX.classX);
							FullScreenX.node = FullScreenX.defNode;
							Promise.resolve().then(FullScreenX.handler);
						}
					}
				};

				return FullScreenX;
			})(_FullScreen3.default);

			FullScreenX.defNode = (0, _libs.$)();
			FullScreenX.node = FullScreenX.defNode;

			FullScreenX.defHandler = function () {
				return undefined;
			};

			FullScreenX.handler = FullScreenX.defHandler;
			FullScreenX.classX = "fb3d-fullscreenx";
			FullScreenX.style = (0, _libs.$)(
				(
					'\n\t\t<style type="text/css">\n      .' +
					FullScreenX.classX +
					" {\n        position: fixed !important;\n\t\t\t\tleft: 0 !important;\n        top: 0 !important;\n        width: 100% !important;\n        height: 100% !important;\n\t\t\t\tz-index: 2147483647 !important;\n\t\t\t\tmargin: 0 !important;\n\t\t\t\tbox-sizing: border-box !important;\n        background-color: #333;\n      }\n    </style>\n\t"
				).fb3dQFilter()
			).appendTo("head");
			exports.default = FullScreenX;

			/***/
		},
		/* 19 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			var _Utils = __webpack_require__(3);

			var _Utils2 = _interopRequireDefault(_Utils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			_libs.PDFJS.GlobalWorkerOptions.workerSrc = (
				window.PDFJS_LOCALE
					? PDFJS_LOCALE
					: __webpack_require__.i({ pdfJsWorker: "js/pdf.worker.js", pdfJsCMapUrl: "cmaps/" })
			).pdfJsWorker;
			_libs.PDFJS.cMapUrl = (
				window.PDFJS_LOCALE
					? PDFJS_LOCALE
					: __webpack_require__.i({ pdfJsWorker: "js/pdf.worker.js", pdfJsCMapUrl: "cmaps/" })
			).pdfJsCMapUrl;
			_libs.PDFJS.cMapPacked = true;
			_libs.PDFJS.disableAutoFetch = true;
			_libs.PDFJS.disableStream = true;
			_libs.PDFJS.disableRange = false;
			_libs.PDFJS.imageResourcesPath = "images/pdfjs/";
			_libs.PDFJS.externalLinkTarget = _libs.PDFJS.LinkTarget.BLANK;
			_libs.PDFJS.disableFontFace = undefined;

			var Pdf = (function () {
				function Pdf(src, loadingProgress, openOptions) {
					var _this = this;

					_classCallCheck(this, Pdf);

					this.src = _Utils2.default.normalizeUrl(src);
					this.handlerQueue = [];
					this.progresData = { loaded: -1, total: 1 };
					this.loadingProgress = loadingProgress;

					this.task = _libs.PDFJS.getDocument(
						_extends(
							{
								url: this.src,
								rangeChunkSize: 512 * 1024,
								cMapUrl: _libs.PDFJS.cMapUrl,
								cMapPacked: _libs.PDFJS.cMapPacked,
								disableAutoFetch: _libs.PDFJS.disableAutoFetch,
								disableStream: _libs.PDFJS.disableStream,
								disableRange: _libs.PDFJS.disableRange,
								imageResourcesPath: _libs.PDFJS.imageResourcesPath,
								externalLinkTarget: _libs.PDFJS.externalLinkTarget,
								disableFontFace: _libs.PDFJS.disableFontFace,
							},
							openOptions
						)
					);
					this.task.onProgress = function (data) {
						if (_this.loadingProgress) {
							var cur = Math.floor((100 * data.loaded) / data.total),
								old = Math.floor((100 * _this.progresData.loaded) / _this.progresData.total);
							if (cur !== old) {
								cur = isNaN(cur) ? 0 : cur;
								cur = cur > 100 ? 100 : cur;
								Promise.resolve().then(function () {
									_this.loadingProgress(cur);
								});
							}
						}
						_this.progresData = data;
					};
					this.task.promise
						.then(function (handler) {
							if (handler.numPages > 1) {
								Promise.all([handler.getPage(1), handler.getPage(2)]).then(function (pages) {
									_this.init(handler, pages);
								});
							} else {
								_this.init(handler);
							}
						})
						.catch(function (e) {
							console.error(e);
							if (_this.errorHandler) {
								_this.errorHandler(e);
							}
						});
				}

				Pdf.prototype.init = function init(handler, pages) {
					this.handler = handler;
					if (pages) {
						var p0s = Pdf.getPageSize(pages[0]),
							p1s = Pdf.getPageSize(pages[1]);
						this.doubledPages = p0s.width / p0s.height / (p1s.width / p1s.height) < 0.75;
					} else {
						this.doubledPages = false;
					}
					var done = Promise.resolve(handler);

					var _loop = function _loop() {
						if (_isArray) {
							if (_i >= _iterator.length) return "break";
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) return "break";
							_ref = _i.value;
						}

						var clb = _ref;

						done = done.then(function (handler) {
							clb(handler);
							return handler;
						});
					};

					for (
						var _iterator = this.handlerQueue.reverse(),
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						var _ret = _loop();

						if (_ret === "break") break;
					}
				};

				Pdf.prototype.getPageType = function getPageType(n) {
					return !this.doubledPages || n === 0 || n === this.getPagesNum() - 1
						? "full"
						: n & 1
						? "left"
						: "right";
				};

				Pdf.prototype.getPage = function getPage(n) {
					return this.handler.getPage(this.doubledPages ? Math.ceil(n / 2) + 1 : n + 1);
				};

				Pdf.prototype.getDestination = function getDestination(dest) {
					var _this2 = this;

					var destPromise = void 0;
					if (typeof dest === "string") {
						destPromise = this.handler.getDestination(dest);
					} else {
						destPromise = Promise.resolve(dest);
					}
					destPromise = destPromise
						.then(function (dest) {
							return _this2.handler.getPageIndex(dest[0]);
						})
						.then(function (number) {
							return _this2.doubledPages ? (number < 1 ? number : 1 + 2 * (number - 1)) : number;
						})
						.catch(function () {
							return console.error("Bad bookmark");
						});
					return destPromise;
				};

				Pdf.prototype.dispose = function dispose() {
					this.handlerQueue.splice(0, this.handlerQueue.length);
					delete this.handler;
				};

				Pdf.prototype.setLoadingProgressClb = function setLoadingProgressClb(clb) {
					this.loadingProgress = clb;
				};

				Pdf.prototype.setErrorHandler = function setErrorHandler(eh) {
					this.errorHandler = eh;
				};

				Pdf.prototype.getPagesNum = function getPagesNum() {
					return this.handler
						? this.doubledPages
							? 2 * (this.handler.numPages - 1)
							: this.handler.numPages
						: undefined;
				};

				Pdf.getPageSize = function getPageSize(page) {
					var x = page.view[2] - page.view[0],
						y = page.view[3] - page.view[1],
						a = (page.rotate * Math.PI) / 180;
					return {
						width: Math.abs(x * Math.cos(a) - y * Math.sin(a)),
						height: Math.abs(x * Math.sin(a) + y * Math.cos(a)),
					};
				};

				//   if(pages>1) {
				//   handler.getPage(2).
				//   then((page)=> {
				//     const size1 = Pdf.getPageSize(page);
				//     this.props.doubledPages = 2*size0.width===size1.width;
				//     this.ready();
				//   }).
				//   catch(()=> this.ready());
				// }
				// else {

				Pdf.prototype.getHandler = function getHandler(clb) {
					if (this.handler) {
						clb(this.handler);
					} else {
						this.handlerQueue.push(clb);
					}
				};

				return Pdf;
			})();

			exports.default = Pdf;

			/***/
		},
		/* 20 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var ThreeEventConverterFs = (function () {
				ThreeEventConverterFs.objectsTest = function objectsTest(object1, object2) {
					return object1 && object2 ? object1.object === object2.object : false;
				};

				ThreeEventConverterFs.objectsAndFacesTest = function objectsAndFacesTest(object1, object2) {
					return object1 && object2
						? object1.object === object2.object && object1.face.materialIndex === object2.face.materialIndex
						: false;
				};

				function ThreeEventConverterFs(visualWorld) {
					var test =
						arguments.length > 1 && arguments[1] !== undefined
							? arguments[1]
							: ThreeEventConverterFs.objectsAndFacesTest;

					_classCallCheck(this, ThreeEventConverterFs);

					this.visual = visualWorld;
					this.coords = new _libs.THREE.Vector2();
					this.raycaster = this.visual.raycaster;
					this.camera = this.visual.camera;
					this.threes = [];
					this.test = test;
				}

				ThreeEventConverterFs.prototype.addThree = function addThree(three) {
					this.threes.push(three);
				};

				ThreeEventConverterFs.prototype.removeThree = function removeThree(three) {
					var i = this.threes.indexOf(three);
					if (~i) {
						this.threes.splice(i, 1);
					}
				};

				ThreeEventConverterFs.prototype.getObject = function getObject(e) {
					this.setCoordsFromEvent(e);
					this.raycaster.setFromCamera(this.coords, this.camera);
					var intersects = this.raycaster.intersectObjects(this.threes);
					return intersects[0];
				};

				return ThreeEventConverterFs;
			})();

			exports.default = ThreeEventConverterFs;

			/***/
		},
		/* 21 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _BaseMathUtils = __webpack_require__(2);

			var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var ThreeUtils = (function () {
				function ThreeUtils() {
					_classCallCheck(this, ThreeUtils);
				}

				ThreeUtils.vertices2UVs = function vertices2UVs(vertices, indeces, first, last, converClb) {
					var r = [];
					for (var i = first; i < last; ++i) {
						var vis = [indeces[i].a, indeces[i].b, indeces[i].c];
						for (var j = 0; j < vis.length; ++j) {
							if (!r[vis[j]]) {
								r[vis[j]] = converClb(vertices[vis[j]]);
							}
						}
					}
					return r;
				};

				ThreeUtils.computeFaceVertexUvs = function computeFaceVertexUvs(geometry, faces) {
					var uvs = [
						ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, 0, faces[0], function (p) {
							return new THREE.Vector2(p.x, 1 - p.z);
						}),
						ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[0], faces[1], function (p) {
							return new THREE.Vector2(1 - p.x, 1 - p.z);
						}),
						ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[1], faces[2], function (p) {
							return new THREE.Vector2(p.x, p.y);
						}),
						ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[2], faces[3], function (p) {
							return new THREE.Vector2(1 - p.x, p.y);
						}),
						ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[3], faces[4], function (p) {
							return new THREE.Vector2(p.z, p.y);
						}),
						ThreeUtils.vertices2UVs(
							geometry.vertices,
							geometry.faces,
							faces[4],
							geometry.faces.length,
							function (p) {
								return new THREE.Vector2(1 - p.z, p.y);
							}
						),
					];

					var uvsi = 0;
					for (var i = 0; i < geometry.faces.length; ++i) {
						uvsi += faces[uvsi] === i;
						var f = geometry.faces[i];
						f.materialIndex = uvsi;
						geometry.faceVertexUvs[0][i] = [uvs[uvsi][f.a], uvs[uvsi][f.b], uvs[uvsi][f.c]];
					}
				};

				ThreeUtils.createMarker = function createMarker(p, c, size) {
					var marker = new THREE.Mesh(
						new THREE.SphereGeometry(size),
						new THREE.MeshPhongMaterial({ color: c })
					);
					marker.position.set(p.x, p.y, p.z);
					return marker;
				};

				ThreeUtils.findUvTris = function findUvTris(geometry, ps, first, last) {
					var res = [];
					for (
						var _iterator = ps,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var p = _ref;

						var found = false;
						for (var i = first; i < last && !found; ++i) {
							var tri = geometry.faceVertexUvs[0][i];
							if (_BaseMathUtils2.default.isInsideConvPoly(tri, p)) {
								res.push({
									coefs: _BaseMathUtils2.default.computeInterpCoefs(tri, p),
									i: i,
								});
								found = true;
							}
						}
						if (!found) {
							console.error("Bad point");
							res.push(undefined);
						}
					}
					return res;
				};

				ThreeUtils.findInternalVertices = function findInternalVertices(geometry, ps, first, last) {
					var res = {};
					for (var i = first; i < last; ++i) {
						var tri = geometry.faceVertexUvs[0][i],
							f = geometry.faces[i],
							vs = [f.a, f.b, f.c];
						for (var j = 0; j < tri.length; ++j) {
							if (res[vs[j]] === undefined && _BaseMathUtils2.default.isInsidePoly(ps, tri[j])) {
								res[vs[j]] = {
									p: tri[j],
									i: vs[j],
									n: f.vertexNormals[j],
								};
							}
						}
					}
					return Object.values(res);
				};

				return ThreeUtils;
			})();

			exports.default = ThreeUtils;

			/***/
		},
		/* 22 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _Controller2 = __webpack_require__(15);

			var _Controller3 = _interopRequireDefault(_Controller2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var WidgetController = (function (_Controller) {
				_inherits(WidgetController, _Controller);

				function WidgetController(view, name) {
					_classCallCheck(this, WidgetController);

					var _this = _possibleConstructorReturn(this, _Controller.call(this));

					_this.name = name;
					_this.view = view;
					_this.visible = false;
					return _this;
				}

				WidgetController.prototype.togle = function togle() {
					this.visible = !this.visible;
					this.fireChange();
				};

				WidgetController.prototype.hide = function hide() {
					this.visible = false;
					this.fireChange();
				};

				WidgetController.prototype.fireChange = function fireChange() {
					if (this.onChange) {
						this.onChange();
					}
					this.updateView();
				};

				WidgetController.prototype.updateView = function updateView() {
					if (this.view) {
						this.view.setState(this.name, {
							enable: true,
							visible: this.visible,
							active: false,
						});
					}
				};

				return WidgetController;
			})(_Controller3.default);

			exports.default = WidgetController;

			/***/
		},
		/* 23 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Target = (function () {
				function Target() {
					_classCallCheck(this, Target);
				}

				Target.test = function test(object1, object2) {
					return object1.target === object2.target;
				};

				return Target;
			})();

			exports.default = Target;

			/***/
		},
		/* 24 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(1);

			var _Detector = __webpack_require__(48);

			var _Detector2 = _interopRequireDefault(_Detector);

			var _VisualWorld = __webpack_require__(70);

			var _VisualWorld2 = _interopRequireDefault(_VisualWorld);

			var _PdfLinksHandler = __webpack_require__(37);

			var _PdfLinksHandler2 = _interopRequireDefault(_PdfLinksHandler);

			var _Book = __webpack_require__(28);

			var _Book2 = _interopRequireDefault(_Book);

			var _BookView = __webpack_require__(31);

			var _BookView2 = _interopRequireDefault(_BookView);

			var _BookController = __webpack_require__(29);

			var _BookController2 = _interopRequireDefault(_BookController);

			var _PdfBookPropsBuilder = __webpack_require__(36);

			var _PdfBookPropsBuilder2 = _interopRequireDefault(_PdfBookPropsBuilder);

			var _ClbBookPropsBuilder = __webpack_require__(32);

			var _ClbBookPropsBuilder2 = _interopRequireDefault(_ClbBookPropsBuilder);

			var _LoadingController = __webpack_require__(56);

			var _LoadingController2 = _interopRequireDefault(_LoadingController);

			var _UserMessageController = __webpack_require__(68);

			var _UserMessageController2 = _interopRequireDefault(_UserMessageController);

			var _Search = __webpack_require__(61);

			var _Search2 = _interopRequireDefault(_Search);

			var _Bookmarks = __webpack_require__(47);

			var _Bookmarks2 = _interopRequireDefault(_Bookmarks);

			var _Thumbnails = __webpack_require__(66);

			var _Thumbnails2 = _interopRequireDefault(_Thumbnails);

			var _TocController = __webpack_require__(43);

			var _TocController2 = _interopRequireDefault(_TocController);

			var _ShareController = __webpack_require__(39);

			var _ShareController2 = _interopRequireDefault(_ShareController);

			var _BookPrinter = __webpack_require__(30);

			var _BookPrinter2 = _interopRequireDefault(_BookPrinter);

			var _AutoNavigator = __webpack_require__(26);

			var _AutoNavigator2 = _interopRequireDefault(_AutoNavigator);

			var _SoundsEnviroment = __webpack_require__(42);

			var _SoundsEnviroment2 = _interopRequireDefault(_SoundsEnviroment);

			var _FullScreenX = __webpack_require__(18);

			var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			_libs.$.fn.FlipBook = function (options) {
				var scene = {
					dispose: function dispose() {
						if (this.ready) {
							!scene.pdfLinksHandler || scene.pdfLinksHandler.dispose();
							delete scene.pdfLinksHandler;
							scene.sounds.dispose();
							delete scene.sounds;
							scene.userMessageCtrl.dispose();
							delete scene.userMessageCtrl;
							scene.tocCtrl.dispose();
							delete scene.tocCtrl;
							scene.thumbnails.dispose();
							delete scene.thumbnails;
							!scene.bookmarks || scene.bookmarks.dispose();
							delete scene.bookmarks;
							scene.shareCtrl.dispose();
							delete scene.shareCtrl;
							scene.ctrl.dispose();
							delete scene.ctrl;
							scene.bookPrinter.dispose();
							delete scene.bookPrinter;
							scene.book.dispose();
							delete scene.book;
							scene.propsBuilder.dispose();
							delete scene.propsBuilder;
							delete scene.bookBuilder;
							scene.visual.dispose();
							delete scene.visual;
							scene.view.dispose();
							delete scene.view;
							delete scene.dispose;
						} else {
							this.pendingDispose = true;
						}
					},
				};
				options = _extends({}, options);
				var parentContainer = this.length ? this[0] : (0, _libs.$)("<div>").appendTo("body");
				if (options.activateFullScreen) {
					_FullScreenX2.default.request(parentContainer);
				}
				scene.view = new _BookView2.default(
					parentContainer,
					function () {
						if (!_Detector2.default.webgl) {
							_Detector2.default.addGetWebGLMessage({ parent: scene.view.getView() });
						} else {
							scene.loadingCtrl = new _LoadingController2.default(scene.view, true, function (progress) {
								return progress === 0
									? (0, _libs.tr)("Please wait... the Application is Loading")
									: (0, _libs.tr)("PDF is Loading:") + " " + progress + "%";
							});
							scene.userMessageCtrl = new _UserMessageController2.default(scene.view);
							scene.visual = new _VisualWorld2.default(
								scene.view.getContainer().ownerDocument.defaultView,
								scene.view.getContainer().ownerDocument,
								scene.view.getView()
							);
							if (options.propertiesCallback) {
								new _ClbBookPropsBuilder2.default(
									scene.visual,
									function () {
										return { type: "blank" };
									},
									1,
									function (props) {
										props = options.propertiesCallback(props);
										var style = [];
										if (props.backgroundColor !== "") {
											style.push(
												"background-color:#" +
													new THREE.Color(props.backgroundColor).getHexString()
											);
										}
										if (props.backgroundImage !== "") {
											style.push("background-image:url('" + props.backgroundImage + "')");
										}
										if (props.backgroundStyle !== "") {
											style.push(props.backgroundStyle);
										}
										if (style.length) {
											scene.view.getView().attr("style", style.join(";"));
										}
									}
								);
							}
							scene.bookBuilder = function (props, sheets, pageCallback) {
								props.cssLayerProps = _extends({}, props.cssLayerProps, {
									scene: scene,
								});
								if (options.propertiesCallback) {
									props = options.propertiesCallback(props);
								}
								scene.book = new _Book2.default(scene.visual, sheets, pageCallback, props);
								scene.bookPrinter = new _BookPrinter2.default(
									scene.visual,
									scene.book,
									(options.template || {}).printStyle
								);
								scene.loadingCtrl.dispose();
								delete scene.loadingCtrl;
								scene.ctrl = new _BookController2.default(
									scene.book,
									scene.view,
									options.controlsProps
								);
								scene.book.setInjector(function (w) {
									w.jQuery = w.$ = _libs.$;
									w.book = scene.book;
									w.bookCtrl = scene.ctrl;
									if (props.injector) {
										props.injector(w);
									}
								});
								scene.view.addHandler(scene.ctrl);
								scene.ctrl.setPrinter(scene.bookPrinter);
								var test = pageCallback(0);

								scene.thumbnails = new _Thumbnails2.default(
									scene.visual,
									scene.view.getThumbnailsView(),
									pageCallback,
									scene.book.getPages(),
									{ kWtoH: props.width / props.height }
								);
								scene.tocCtrl = new _TocController2.default(scene.view, scene.ctrl);
								scene.tocCtrl.setThumbnails(scene.thumbnails);
								if (options.outline) {
									scene.bookmarks = new _Bookmarks2.default(
										scene.view.getBookmarksView(),
										options.outline
									);
									scene.tocCtrl.setBookmarks(scene.bookmarks);
								}
								scene.ctrl.setTocCtrl(scene.tocCtrl);
								scene.view.addHandler(scene.tocCtrl);

								if (test.type === "pdf") {
									scene.search = new _Search2.default(
										scene.view.getSearchView(),
										scene.book.getPages()
									);
									scene.search.onQuery = scene.book.setQuery.bind(scene.book);
									scene.book.addEventListener("searchResults", function (e) {
										scene.search.setResults(e.results, e.lastPage);
									});
									scene.tocCtrl.setSearch(scene.search);
									scene.ctrl.setTocCtrl(scene.tocCtrl);

									scene.pdfLinksHandler = new _PdfLinksHandler2.default(
										test.src,
										scene.ctrl,
										scene.visual.element
									);
									scene.book.addEventListener(
										"pdfAnnotation",
										scene.pdfLinksHandler.handleEvent.bind(scene.pdfLinksHandler)
									);
									if (!scene.bookmarks) {
										test.src.getHandler(function (handler) {
											handler.getOutline().then(function (outline) {
												if (outline && outline.length) {
													scene.bookmarks = new _Bookmarks2.default(
														scene.view.getBookmarksView(),
														outline
													);
													scene.tocCtrl.setBookmarks(scene.bookmarks, test.src);
													scene.ctrl.setTocCtrl(scene.tocCtrl);
												}
											});
										});
									}
									if (options.pdfLinks && options.pdfLinks.handler) {
										scene.pdfLinksHandler.setHandler(options.pdfLinks.handler);
									}
								}

								scene.sounds = new _SoundsEnviroment2.default(options.template);
								scene.ctrl.setSounds(scene.sounds);
								scene.sounds.subscribeFlips(scene.ctrl);

								scene.ready = true;
								var autoNavigator = new _AutoNavigator2.default(
									scene.visual,
									scene.ctrl,
									options.autoNavigation
								);
								scene.shareCtrl = new _ShareController2.default(
									scene.view,
									scene.ctrl,
									options.shareLinkBuilder
										? options.shareLinkBuilder
										: function (page) {
												var u = void 0;
												if (
													new RegExp("([?&])" + autoNavigator.urlParam + "=[0-9]+").test(
														location.href
													)
												) {
													u = location.href.replace(
														new RegExp("([?&])" + autoNavigator.urlParam + "=[0-9]+"),
														"$1" + autoNavigator.urlParam + "=" + page
													);
												} else {
													u =
														location.href.split("#")[0] +
														(~location.href.indexOf("?") ? "&" : "?") +
														autoNavigator.urlParam +
														"=" +
														page +
														location.hash;
												}
												return u;
										  }
								);
								scene.ctrl.setShareCtrl(scene.shareCtrl);
								scene.view.addHandler(scene.shareCtrl);
								autoNavigator.dispose();
								if (options.ready) {
									options.ready(scene);
								}
								scene.ctrl.ready(scene);
								if (scene.pendingDispose) {
									scene.dispose();
								}
							};
							var onError = function onError(e) {
								!scene.loadingCtrl || scene.loadingCtrl.dispose();
								delete scene.loadingCtrl;
								scene.userMessageCtrl.setError(e.message);
							};
							if (options.pdf) {
								scene.propsBuilder = new _PdfBookPropsBuilder2.default(
									options.pdf,
									scene.bookBuilder,
									options.bookStyle,
									options.pdfOpenOptions
								);
								scene.propsBuilder.pdf.setLoadingProgressClb(
									scene.loadingCtrl.setProgress.bind(scene.loadingCtrl)
								);
								scene.propsBuilder.pdf.setErrorHandler(options.error || onError);
							} else if (options.pageCallback) {
								if (options.onPageCallbackError) {
									options.onPageCallbackError.push(options.error || onError);
								}
								scene.propsBuilder = new _ClbBookPropsBuilder2.default(
									scene.visual,
									options.pageCallback,
									options.pages,
									scene.bookBuilder,
									options.bookStyle
								);
							} else {
								scene.propsBuilder = new _ClbBookPropsBuilder2.default(
									scene.visual,
									_Book2.default.pageCallback,
									6,
									scene.bookBuilder,
									options.bookStyle
								);
							}
						}
					},
					options.template
				);
				return scene;
			};

			(0, _libs.$)(function () {
				var containers = (0, _libs.$)(".flip-book-container");
				for (var i = 0; i < containers.length; ++i) {
					var jContainer = (0, _libs.$)(containers[i]),
						src = jContainer.attr("src");
					if (!!src) {
						jContainer.FlipBook({ pdf: src });
					}
				}
			});

			window.jQuery = window.$ = _libs.$;

			/***/
		},
		/* 25 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			if (!Array.prototype.fill) {
				Array.prototype.fill = function (value) {
					// Шаги 1-2.
					if (this == null) {
						throw new TypeError("this is null or not defined");
					}

					var O = Object(this);

					// Шаги 3-5.
					var len = O.length >>> 0;

					// Шаги 6-7.
					var start = arguments[1];
					var relativeStart = start >> 0;

					// Шаг 8.
					var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);

					// Шаги 9-10.
					var end = arguments[2];
					var relativeEnd = end === undefined ? len : end >> 0;

					// Шаг 11.
					var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);

					// Шаг 12.
					while (k < final) {
						O[k] = value;
						k++;
					}

					// Шаг 13.
					return O;
				};
			}

			if (!Array.prototype.find) {
				Object.defineProperty(Array.prototype, "find", {
					value: function value(predicate) {
						"use strict";

						if (this == null) {
							throw new TypeError("Array.prototype.find called on null or undefined");
						}
						if (typeof predicate !== "function") {
							throw new TypeError("predicate must be a function");
						}
						var list = Object(this);
						var length = list.length >>> 0;
						var thisArg = arguments[1];
						var value;

						for (var i = 0; i < length; i++) {
							value = list[i];
							if (predicate.call(thisArg, value, i, list)) {
								return value;
							}
						}
						return undefined;
					},
				});
			}

			if (!Array.prototype.findIndex) {
				Array.prototype.findIndex = function (predicate) {
					if (this == null) {
						throw new TypeError("Array.prototype.findIndex called on null or undefined");
					}
					if (typeof predicate !== "function") {
						throw new TypeError("predicate must be a function");
					}
					var list = Object(this);
					var length = list.length >>> 0;
					var thisArg = arguments[1];
					var value;

					for (var i = 0; i < length; i++) {
						value = list[i];
						if (predicate.call(thisArg, value, i, list)) {
							return i;
						}
					}
					return -1;
				};
			}

			if (!Object.values) {
				Object.values = function values(O) {
					return (
						Object.keys(O).map(function (name) {
							return O[name];
						}) || []
					);
				};
			}

			if (!RegExp.escape) {
				RegExp.escape = function (s) {
					return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
				};
			}

			if (!String.prototype.replaceAll) {
				String.prototype.replaceAll = function (search, replace) {
					return this.replace(new RegExp(RegExp.escape(search), "g"), replace);
				};
			}

			if (!String.prototype.fb3dQFilter) {
				String.prototype.fb3dQFilter = function () {
					return this.replace(/(\n|\t|  )/g, "");
				};
			}

			/***/
		},
		/* 26 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var AutoNavigator = (function () {
				function AutoNavigator(context, bookCtrl) {
					var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

					_classCallCheck(this, AutoNavigator);

					props = _extends({}, props, {
						urlParam: props.urlParam || "fb3d-page",
						navigates: props.navigates === undefined ? 1 : props.navigates,
						pageN: props.pageN || 0,
					});
					this.props = props;
					this.context = context;
					this.bookCtrl = bookCtrl;
					this.urlParam = props.urlParam;
					this.pageN = props.pageN;
					this.wnd = context.wnd;

					this.wnd.fb3d = _extends({}, this.wnd.fb3d);
					this.wnd.fb3d.navigator = _extends({}, this.wnd.fb3d.navigator);
					this.navigator = this.wnd.fb3d.navigator[this.urlParam] = _extends(
						{},
						this.wnd.fb3d.navigator[this.urlParam]
					);
					this.navigator.instances = (this.navigator.instances || 0) + 1;

					if (this.navigator.instances <= this.props.navigates) {
						this.bookCtrl.goToPage(this.getPageNumber());
					}
				}

				AutoNavigator.prototype.dispose = function dispose() {};

				AutoNavigator.prototype.getParameterByName = function getParameterByName(name, url) {
					if (!url) {
						url = window.location.href;
					}
					name = name.replace(/[\[\]]/g, "\\$&");
					var regex = new RegExp("[?&]" + name + "(=([^]*)|&|#|$)"),
						results = regex.exec(url);
					if (!results) return null;
					if (!results[2]) return "";
					return decodeURIComponent(results[2].replace(/\+/g, " "));
				};

				AutoNavigator.prototype.getPageNumber = function getPageNumber() {
					var number = parseInt(this.pageN);
					if (isNaN(number) || number === 0) {
						number = this.getParameterByName(this.urlParam);
						number = parseInt(number);
						if (isNaN(number)) {
							number = 1;
						}
					}
					return number - 1;
				};

				return AutoNavigator;
			})();

			exports.default = AutoNavigator;

			/***/
		},
		/* 27 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(1);

			var _MathUtils = __webpack_require__(5);

			var _MathUtils2 = _interopRequireDefault(_MathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Binder = (function () {
				function Binder(visual, p) {
					var _this = this;

					var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

					_classCallCheck(this, Binder);

					this.visual = visual;
					this.p = _extends({}, p, {
						backSize: 2 * p.cover.depth + p.sheets * p.page.depth,
					});
					this.OZ = new _libs.THREE.Vector3(0, 0, 1);
					this.backG = new _libs.THREE.BoxGeometry(0.001, this.p.backSize, p.cover.height);

					// const color = this.p.cover.side==='color'? {color: p.cover.color}: {
					//   color: p.cover.color,
					//   opacity: 0,
					//   transparent: true
					// };
					var color = { color: p.cover.color };

					var transparent = { opacity: 0, transparent: true };
					this.materials = [
						new _libs.THREE.MeshPhongMaterial(color),
						new _libs.THREE.MeshPhongMaterial(color),
						new _libs.THREE.MeshPhongMaterial(transparent), //{opacity: 0, transparent: true}
						new _libs.THREE.MeshPhongMaterial(transparent),
						new _libs.THREE.MeshPhongMaterial(transparent),
						new _libs.THREE.MeshPhongMaterial(transparent),
					];

					var backM = new _libs.THREE.Mesh(this.backG, this.materials);

					if (p.cover.binderTexture !== "") {
						this.visual.textureLoader.load(p.cover.binderTexture, function (texture) {
							_this.materials[1].color.setHex(0xffffff);
							_this.materials[1].map = texture;
							texture.minFilter = _libs.THREE.LinearFilter;
							texture.needsUpdate = true;
							_this.materials[1].needsUpdate = true;
						});
					}

					this.three = new _libs.THREE.Object3D();
					this.back = new _libs.THREE.Object3D();
					this.backRT = new _libs.THREE.Object3D();
					this.backRR = new _libs.THREE.Object3D();
					this.backLT = new _libs.THREE.Object3D();
					this.backLR = new _libs.THREE.Object3D();
					this.leftPivot = new _libs.THREE.Object3D();
					this.rightPivot = new _libs.THREE.Object3D();

					if (!hidden) {
						backM.position.set(0.5 * (p.cover.depth - 0.001), 0, 0);
						this.back.add(backM);
					}
					this.back.add(this.leftPivot);
					this.back.add(this.rightPivot);
					this.backRT.add(this.back);
					this.backRR.add(this.backRT);
					this.backLT.add(this.backRR);
					this.backLR.add(this.backLT);
					this.three.add(this.backLR);
				}

				Binder.prototype.dispose = function dispose() {
					for (
						var _iterator = this.materials,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var m = _ref;

						if (m.map) {
							m.map = null;
							m.needsUpdate = true;
						}
						m.dispose();
					}
					delete this.materials;
					this.backG.dispose();
				};

				Binder.prototype.set = function set(angle) {
					var right = void 0,
						left = void 0;
					if (angle > Math.PI / 2) {
						right = Math.PI / 2;
						left = angle - Math.PI / 2;
					} else {
						right = angle;
						left = 0;
					}
					var p = this.p,
						tr1 = { x: -0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
					this.backRT.position.set(tr1.x, tr1.y, 0);
					this.backRR.position.set(-tr1.x, -tr1.y, 0);
					this.backRR.quaternion.setFromAxisAngle(this.OZ, right);

					var tr2 = {
						x: p.backSize - 2 * p.cover.depth - 0.5 * p.cover.depth,
						y: 0.5 * p.backSize - p.cover.depth,
					};
					this.backLT.position.set(tr2.x, tr2.y, 0);
					this.backLR.position.set(-tr2.x, -tr2.y, 0);
					this.backLR.quaternion.setFromAxisAngle(this.OZ, left);
				};

				Binder.prototype.setLeft = function setLeft(angle) {
					var PI = Math.PI;
					this.leftPivot.position.set(
						_MathUtils2.default.interpolateLinear([-PI, -PI / 2], [0, this.p.cover.depth], angle),
						0.5 * this.p.backSize - 0.5 * this.p.cover.depth,
						0
					);
					this.leftPivot.quaternion.setFromAxisAngle(this.OZ, angle);
				};

				Binder.prototype.setRight = function setRight(angle) {
					var PI = Math.PI;
					this.rightPivot.position.set(
						_MathUtils2.default.interpolateLinear([-PI / 2, 0], [this.p.cover.depth, 0], angle),
						-0.5 * this.p.backSize + 0.5 * this.p.cover.depth,
						0
					);
					this.rightPivot.quaternion.setFromAxisAngle(this.OZ, angle);
				};

				Binder.prototype.joinLeftCover = function joinLeftCover(cover) {
					cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
					this.leftPivot.add(cover.three);
				};

				Binder.prototype.disconnectLeftCover = function disconnectLeftCover(cover) {
					this.leftPivot.remove(cover.three);
				};

				Binder.prototype.joinRightCover = function joinRightCover(cover) {
					cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
					this.rightPivot.add(cover.three);
				};

				Binder.prototype.disconnectRightCover = function disconnectRightCover(cover) {
					this.rightPivot.remove(cover.three);
				};

				return Binder;
			})();

			exports.default = Binder;

			/***/
		},
		/* 28 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(1);

			var _book = __webpack_require__(11);

			var _GraphUtils = __webpack_require__(4);

			var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

			var _Binder = __webpack_require__(27);

			var _Binder2 = _interopRequireDefault(_Binder);

			var _Cover = __webpack_require__(33);

			var _Cover2 = _interopRequireDefault(_Cover);

			var _SheetBlock = __webpack_require__(10);

			var _SheetBlock2 = _interopRequireDefault(_SheetBlock);

			var _SheetPhysics = __webpack_require__(41);

			var _SheetPhysics2 = _interopRequireDefault(_SheetPhysics);

			var _PageManager = __webpack_require__(35);

			var _PageManager2 = _interopRequireDefault(_PageManager);

			var _CSSLayer = __webpack_require__(13);

			var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

			var _CssLayersManager = __webpack_require__(34);

			var _CssLayersManager2 = _interopRequireDefault(_CssLayersManager);

			var _SearchEngine = __webpack_require__(38);

			var _SearchEngine2 = _interopRequireDefault(_SearchEngine);

			var _CustomEventConverter = __webpack_require__(16);

			var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

			var _CircleTarget = __webpack_require__(72);

			var _CircleTarget2 = _interopRequireDefault(_CircleTarget);

			var _YouTubeApi = __webpack_require__(71);

			var _YouTubeApi2 = _interopRequireDefault(_YouTubeApi);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var Book = (function (_THREE$EventDispatche) {
				_inherits(Book, _THREE$EventDispatche);

				// pageCallback samples

				// (n)=> ({
				//   type: 'image',
				//   src: 'sample.png',
				//   interactive: false
				// });
				//
				// (n)=> ({
				//   type: 'html',
				//   src: 'sample.html',
				//   interactive: true
				// });
				//
				// const pdf = new Pdf('sample.pdf');
				// (n)=> ({
				//   type: 'pdf',
				//   src: pdf,
				//   interactive: false
				// });

				function Book(visual, sheets, pageCallback, props) {
					_classCallCheck(this, Book);

					var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

					_this.cssFs = {
						play: function play(player) {
							if (player.play) {
								player.fb3dNoPlay = false;
								(
									player.play() || {
										catch: function _catch() {
											return undefined;
										},
									}
								).catch(function (e) {
									if (!player.fb3dNoPlay && e.name === "NotAllowedError") {
										_this.pendingPlayers.push(player);
										_this.dispatchEvent({
											type: "pendingPlayers",
										});
									}
								});
							} else if ((0, _libs.$)(player).hasClass("youtube")) {
								var p = player.player;
								player.fb3dNoPlay = false;
								if (p && p.playVideo) {
									p.playVideo();
								} else {
									setTimeout(function () {
										if (!player.fb3dNoPlay) {
											_this.cssFs.play(player);
										}
									}, 200);
								}
							}
						},
						pause: function pause(player) {
							if (player.pause) {
								player.fb3dNoPlay = true;
								player.pause();
							} else if ((0, _libs.$)(player).hasClass("youtube")) {
								var p = player.player;
								player.fb3dNoPlay = true;
								if (p && p.pauseVideo) {
									p.pauseVideo();
								}
							}
						},
					};

					_this.visual = visual;
					_this.mouseController = true;
					_this.p = _extends({}, _this.prepareProps(_extends({}, props, { sheets: sheets })), {
						pageCallback: pageCallback,
						zoom: 1,
						singlePage: false,
						autoResolution: {
							enabled: false,
						},
					});
					_this.userDirection = {
						lastTopPage: 0,
						direction: 1,
					};
					_this.pageManager = new _PageManager2.default(visual, _this, _this.p);
					_CSSLayer2.default.init(visual.doc);
					_this.layerManager = new _CssLayersManager2.default(_this);
					_this.searchEngine = new _SearchEngine2.default(pageCallback, 2 * (sheets + 2));
					_this.searchEngine.onPageHitsChanged = function (page, query) {
						_this.pageManager.refreshPageQuery(page, query);
						_this.dispatchEvent({
							type: "searchResults",
							results: _this.searchEngine.results,
							lastPage: page,
							query: query,
						});
					};

					_this.three = new _libs.THREE.Object3D();

					_this.binder = new _Binder2.default(visual, _this.p, _this.getPages() < 3);
					_this.three.add(_this.binder.three);

					var coverP = {
						left: _this.p.cover,
						right: _this.p.cover,
					};
					_this.enableMouse(_this.p.interactiveCorners);
					if (_this.getPages() === 2) {
						_this.enableMouse(false);
						coverP[_this.p.rtl ? "left" : "right"] = _extends({}, _this.p.cover, {
							width: 1e-6,
							height: 1e-6,
						});
					}
					_this.leftCover = new _Cover2.default(
						visual,
						_extends({}, _this.p, {
							cover: coverP.left,
							setTexture: _this.setLeftCoverTexture.bind(_this),
						}),
						Math.PI / 2,
						"opened"
					);
					_this.binder.joinLeftCover(_this.leftCover);
					_this.subscribeSheetBlock(_this.leftCover, 0);
					_this.rightCover = new _Cover2.default(
						visual,
						_extends({}, _this.p, {
							cover: coverP.right,
							setTexture: _this.setRightCoverTexture.bind(_this),
						}),
						0,
						"closed"
					);
					_this.binder.joinRightCover(_this.rightCover);
					_this.subscribeSheetBlock(_this.rightCover, 2 * (_this.p.sheets + 1));

					_this.threeSheetBlocks = new _libs.THREE.Object3D();
					_this.three.add(_this.threeSheetBlocks);
					_this.threeSheetBlocks.position.set(
						0.5 * _this.p.cover.depth - 0.5 * sheets * _this.p.page.depth,
						-0.5 * sheets * _this.p.page.depth,
						0
					);

					_this.sheetBlocks = [];
					if (sheets > 0) {
						_this.addSheetBlock(
							0,
							new _SheetBlock2.default(
								visual,
								_extends({}, _this.p, { setTexture: _this.setPageTexture.bind(_this) }),
								0,
								sheets,
								0,
								"closed"
							)
						);
					}
					_this.reducePagesWidth(true);

					_this.set(Math.PI / 2);
					_this.openedBox = new _libs.THREE.Box3().setFromObject(_this.leftCover.three);
					_this.openedBox.union(new _libs.THREE.Box3().setFromObject(_this.rightCover.three));

					_this.angle = _this.p.rtl ? Math.PI : 0;
					_this.closedAngle = 0;
					_this.set(_this.angle, 0);
					_this.lastMousePos = {
						t: 0,
					};

					_this.pendingPlayers = [];

					_this.three.position.set(-0.5 * _this.p.cover.depth + 0.5 * sheets * _this.p.page.depth, 0, 0);
					_this.sheetPhysics = new _SheetPhysics2.default(
						_this.p.page.width / _this.p.scale,
						_this.p.gravity,
						_this.p.page.cornerDeviation
					);

					_this.binds = {
						update: _this.update.bind(_this),
						lastMousePos: function lastMousePos(e) {
							_this.lastMousePos = _extends({}, _this.lastMousePos, {
								pageX: e.pageX,
								pageY: e.pageY,
							});
						},
					};
					_this.visual.addRenderCallback(_this.binds.update);
					(0, _libs.$)(_this.visual.element).on("mousemove", _this.binds.lastMousePos);

					_this.binds.onPickCallback = _this.onPickCallback.bind(_this);
					_this.visual.drag.onPickCallback = _this.binds.onPickCallback;
					_this.binds.onDragCallback = _this.onDragCallback.bind(_this);
					_this.visual.drag.onDragCallback = _this.binds.onDragCallback;
					_this.binds.onReleaseCallback = _this.onReleaseCallback.bind(_this);
					_this.visual.drag.onReleaseCallback = _this.binds.onReleaseCallback;

					_this.dragAngle = 0.05;
					_this.tmp = {
						boxs: [new _libs.THREE.Box3(), new _libs.THREE.Box3()],
					};

					_this.visual.addObject(_this.three);

					_this.tmpBox = new _libs.THREE.Box3();
					_this.bookShadowMaterial = new _libs.THREE.MeshPhongMaterial({
						color: 0x000000,
						side: _libs.THREE.DoubleSide,
						transparent: true,
					});
					_this.bookShadow = new _libs.THREE.Mesh(
						new _libs.THREE.PlaneGeometry(1, 1).rotateX(-Math.PI / 2),
						_this.bookShadowMaterial
					);
					_this.visual.addObject(_this.bookShadow);
					_this.calculateShadow();

					_this.visual.addEventListener("resize", _this.pageManager.refreshZoom.bind(_this.pageManager));

					setTimeout(function () {
						if (!_this.isProcessing()) {
							_this.notifyBeforeAnimation();
							_this.notifyAfterAnimation();
						}
					}, 100);

					_this.updateThree();
					return _this;
				}

				Book.prototype.calculateShadow = function calculateShadow() {
					var box = this.tmpBox;
					box.setFromObject(this.three);
					this.bookShadow.scale.set(box.max.x - box.min.x, 1, box.max.z - box.min.z);
					var dd = 0.015;
					this.bookShadow.position.set(
						0.5 * (box.max.x + box.min.x) - dd,
						box.min.y - 0.1 * dd,
						0.5 * (box.max.z + box.min.z) - dd
					);
					this.bookShadowMaterial.opacity = 0.03;
					this.visual.shadowPlace.position.set(0, box.min.y - dd, 0);
				};

				Book.prototype.dispose = function dispose() {
					this.visual.removeObject(this.three);
					this.sheetPhysics.dispose();
					delete this.visual.drag.onPickCallback;
					delete this.visual.drag.onDragCallback;
					delete this.visual.drag.onReleaseCallback;
					(0, _libs.$)(this.visual.element).off("mousemove", this.binds.lastMousePos);
					this.visual.removeRenderCallback(this.binds.update);
					this.removeSheetBlocks(0, this.sheetBlocks.length);
					this.binder.disconnectLeftCover(this.leftCover);
					this.removeSheetBlock(this.leftCover);
					this.binder.disconnectRightCover(this.rightCover);
					this.removeSheetBlock(this.rightCover);
					this.binder.dispose();
					this.layerManager.dispose();
					_CSSLayer2.default.dispose();
					this.pageManager.dispose();
				};

				// publics {

				Book.prototype.hasPendingPlayers = function hasPendingPlayers() {
					return this.pendingPlayers.length > 0;
				};

				Book.prototype.resolvePendingPlayers = function resolvePendingPlayers() {
					for (
						var _iterator = this.pendingPlayers,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var p = _ref;

						p.play();
					}
					this.pendingPlayers = [];
					this.dispatchEvent({
						type: "pendingPlayers",
					});
				};

				Book.prototype.updateThree = function updateThree() {
					this.three.userData.needsUpdate = true;
				};

				Book.prototype.setAutoResolution = function setAutoResolution(autoResolution) {
					this.p.autoResolution = _extends({}, this.p.autoResolution, autoResolution);
				};

				Book.prototype.setZoom = function setZoom(zoom, singlePage) {
					if (Math.abs(this.p.zoom - zoom) > 1e-3 || singlePage !== this.p.singlePage) {
						this.p.zoom = zoom;
						this.p.singlePage = singlePage;
						this.pageManager.refreshZoom();
					}
				};

				Book.prototype.getPageCallback = function getPageCallback() {
					return this.p.pageCallback;
				};

				Book.prototype.setQuery = function setQuery(query) {
					this.searchEngine.setQuery(query);
				};

				Book.prototype.isProcessing = function isProcessing() {
					return this.sheetPhysics.getSize() !== 0;
				};

				Book.prototype.getPages = function getPages() {
					return this.p.pages;
				};

				Book.prototype.getBookPages = function getBookPages() {
					return 4 + 2 * this.p.sheets;
				};

				Book.prototype.setFlipProgressClb = function setFlipProgressClb(clb) {
					this.p.flipProgressClb = clb;
				};

				Book.prototype.setInjector = function setInjector(injector) {
					this.p.injector = injector;
				};

				Book.prototype.isActivePage = function isActivePage(n) {
					var res = true;
					if (n > 1 && n < this.getBookPages() - 2) {
						for (
							var _iterator2 = this.sheetBlocks,
								_isArray2 = Array.isArray(_iterator2),
								_i2 = 0,
								_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
							;

						) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var b = _ref2;

							if (n - 2 > 2 * b.p.first && n - 2 < 2 * b.p.last - 1) {
								res = false;
								break;
							}
						}
					}
					return res;
				};

				Book.prototype.getBlockByPage = function getBlockByPage(n) {
					var block = void 0;
					if (n < 2) {
						block = this.leftCover;
					} else if (n < 2 * (this.p.sheets + 1)) {
						for (
							var _iterator3 = this.sheetBlocks,
								_isArray3 = Array.isArray(_iterator3),
								_i3 = 0,
								_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
							;

						) {
							var _ref3;

							if (_isArray3) {
								if (_i3 >= _iterator3.length) break;
								_ref3 = _iterator3[_i3++];
							} else {
								_i3 = _iterator3.next();
								if (_i3.done) break;
								_ref3 = _i3.value;
							}

							var b = _ref3;

							if (n - 2 >= 2 * b.p.first && n - 2 < 2 * b.p.last) {
								block = b;
								break;
							}
						}
					} else {
						block = this.rightCover;
					}
					return block;
				};

				Book.prototype.getBlockPages = function getBlockPages(block) {
					var range = void 0;
					switch (block) {
						case this.leftCover: {
							range = [0, 1];
							break;
						}
						case this.rightCover: {
							range = [2 * (this.p.sheets + 1), 2 * (this.p.sheets + 1) + 1];
							break;
						}
						default: {
							range = block ? [2 * (block.p.first + 1), 2 * (block.p.last + 1) - 1] : undefined;
						}
					}
					return range;
				};

				Book.prototype.getPage = function getPage() {
					var PI = Math.PI;
					var p = void 0;
					if (this.angle === PI / 2 || this.angle === (3 * PI) / 2) {
						for (
							var _iterator4 = this.sheetBlocks,
								_isArray4 = Array.isArray(_iterator4),
								_i4 = 0,
								_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
							;

						) {
							var _ref4;

							if (_isArray4) {
								if (_i4 >= _iterator4.length) break;
								_ref4 = _iterator4[_i4++];
							} else {
								_i4 = _iterator4.next();
								if (_i4.done) break;
								_ref4 = _i4.value;
							}

							var block = _ref4;

							if (block.angle <= PI / 2) {
								p = this.getBlockPages(block)[0] - 1;
								break;
							}
						}
						if (!p) {
							p = this.getBookPages() - 3;
						}
					} else if (this.angle < PI / 2) {
						p = 0;
					} else if (this.angle > (3 * PI) / 2) {
						p = 1;
					} else if (this.angle < PI) {
						p = this.getBookPages() - 3;
					} else if (this.angle >= PI) {
						p = this.getBookPages() - 1;
					}
					return p;
				};

				Book.prototype.getTopPages = function getTopPages() {
					var p = this.getPage();
					return p === 0 || p === this.getBookPages() - 1 ? [p] : [p, p + 1];
				};

				Book.prototype.getPageState = function getPageState(n) {
					return this.pageManager.getPageState(n);
				};

				Book.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
					this.pageManager.enableLoadingAnimation(enable);
				};

				Book.prototype.getLeftFlipping = function getLeftFlipping() {
					var block = void 0;
					var left = this.sheetBlocks[0],
						PI = Math.PI;
					if (this.angle === PI) {
						if (this.getPages() > 1) {
							block = this.rightCover;
						}
					} else {
						if (left && left.state === "closed" && left.angle > PI / 2) {
							block = left;
						} else if (this.angle === PI / 2 || this.angle === (3 * PI) / 2) {
							if (!this.p.rtl || this.getPages() === this.getBookPages()) {
								block = this.leftCover;
							}
						}
					}
					return block;
				};

				Book.prototype.getRightFlipping = function getRightFlipping() {
					var block = void 0;
					var right = this.sheetBlocks[this.sheetBlocks.length - 1],
						PI = Math.PI;
					if (this.angle === 0) {
						if (this.getPages() > 1) {
							block = this.leftCover;
						}
					} else {
						if (right && right.state === "closed" && right.angle <= PI / 2) {
							block = right;
						} else if (this.angle === PI / 2 || this.angle === (3 * PI) / 2) {
							if (this.p.rtl || this.getPages() === this.getBookPages()) {
								block = this.rightCover;
							}
						}
					}
					return block;
				};

				Book.prototype.getClosedBlockAngle = function getClosedBlockAngle(angle) {
					var closedAngle = void 0,
						PI = Math.PI;

					if (this.leftCover.physicId) {
						var test = void 0;
						try {
							test = Math.abs(this.sheetPhysics.getParametr(this.leftCover.physicId, "angle") - angle);
						} catch (e) {
							test = 0;
						}
						closedAngle = angle > PI / 2 || test > PI / 6 ? PI / 2 : this.closedAngle;
					} else if (this.rightCover.physicId) {
						var _test = void 0;
						try {
							_test = Math.abs(this.sheetPhysics.getParametr(this.rightCover.physicId, "angle") - angle);
						} catch (e) {
							_test = 0;
						}
						closedAngle = angle < PI / 2 || _test > PI / 6 ? PI / 2 + 1e-7 : this.closedAngle;
					} else {
						closedAngle = PI / 2 + (angle !== 0) * 1e-7;
					}

					return {
						openedAngle: angle,
						closedAngle: closedAngle,
						binderTurn: this.closedAngle,
					};
				};

				Book.prototype.flipLeft = function flipLeft() {
					var _this2 = this;

					var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
					var progressClb =
						arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

					if (this.flipDisabled) {
						return undefined;
					}
					if (!this.sheetPhysics.getSize()) {
						this.flipDirection = "left";
					}
					var block = void 0,
						res = void 0;
					if (this.sheetPhysics.getSize() < 25) {
						var left = this.sheetBlocks[0],
							PI = Math.PI;
						if (this.angle === PI) {
							res = this.connectPhysics(
								(block = this.rightCover),
								this.p.cover.mass,
								PI,
								-this.p.cover.startVelocity,
								this.p.cover.flexibility,
								0,
								function (angle, height) {
									return _this2.set((3 * PI) / 2 - angle / 2, height);
								},
								function (angle, height) {
									_this2.set((3 * PI) / 2 - angle / 2, 0);
									_this2.setSheetBlocks(angle ? PI : PI / 2 + 1e-7, "closed");
								},
								progressClb
							);
						} else {
							if (left && left.state === "closed" && left.angle > PI / 2) {
								block =
									size < left.getSize() ? this.splitSheetBlock(0, left.getSize() - size)[1] : left;
								res = this.connectPhysics(
									block,
									this.p.page.mass * block.getSize(),
									PI,
									-this.p.page.startVelocity,
									this.p.page.flexibility,
									0,
									function (angle, height) {
										return block.set(
											_this2.getClosedBlockAngle(angle),
											"opened",
											height,
											block.p.first,
											block.p.last,
											_this2.flipDirection
										);
									},
									Book.finishAnimationClb.bind({ book: this, block: block }),
									progressClb
								);
							} else if (this.angle === PI / 2 || this.angle === (3 * PI) / 2) {
								res = this.connectPhysics(
									(block = this.leftCover),
									this.p.cover.mass,
									PI,
									-this.p.cover.startVelocity,
									this.p.cover.flexibility,
									0,
									function (angle, height) {
										_this2.set(2 * PI - angle / 2, height);
										if (angle > PI / 2) {
											_this2.setSheetBlocks(angle ? PI / 2 : 0, "closed");
										}
									},
									function (angle, height) {
										return _this2.set(angle === 0 ? 0 : 2 * PI - angle / 2, 0);
									},
									progressClb
								);
							}
						}
					}
					return res;
				};

				Book.prototype.flipRight = function flipRight() {
					var _this3 = this;

					var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
					var progressClb =
						arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

					if (this.flipDisabled) {
						return undefined;
					}
					if (!this.sheetPhysics.getSize()) {
						this.flipDirection = "right";
					}
					var block = void 0,
						res = void 0;
					if (this.sheetPhysics.getSize() < 25) {
						var right = this.sheetBlocks[this.sheetBlocks.length - 1],
							PI = Math.PI;
						if (this.angle === 0) {
							res = this.connectPhysics(
								(block = this.leftCover),
								this.p.cover.mass,
								0,
								this.p.cover.startVelocity,
								this.p.cover.flexibility,
								0,
								function (angle, height) {
									return _this3.set(angle / 2, height);
								},
								function (angle, height) {
									_this3.set(angle / 2, 0);
									_this3.setSheetBlocks(angle ? PI / 2 : 0, "closed");
								},
								progressClb
							);
						} else {
							if (right && right.state === "closed" && right.angle <= PI / 2) {
								block =
									size < right.getSize()
										? this.splitSheetBlock(this.sheetBlocks.length - 1, size)[0]
										: right;
								res = this.connectPhysics(
									block,
									this.p.page.mass * block.getSize(),
									0,
									this.p.page.startVelocity,
									this.p.page.flexibility,
									0,
									function (angle, height) {
										return block.set(
											_this3.getClosedBlockAngle(angle),
											"opened",
											height,
											block.p.first,
											block.p.last,
											_this3.flipDirection
										);
									},
									Book.finishAnimationClb.bind({ book: this, block: block }),
									progressClb
								);
							} else if (this.angle === PI / 2 || this.angle === (3 * PI) / 2) {
								res = this.connectPhysics(
									(block = this.rightCover),
									this.p.cover.mass,
									0,
									this.p.cover.startVelocity,
									this.p.cover.flexibility,
									0,
									function (angle, height) {
										_this3.set(PI / 2 + angle / 2, height);
										if (angle < PI / 2) {
											_this3.setSheetBlocks(PI / 2 + 1e-7, "closed");
										}
									},
									function (angle, height) {
										return _this3.set(PI / 2 + angle / 2, 0);
									},
									progressClb
								);
							}
						}
					}
					return res;
				};

				// }

				Book.prototype.clearHoverInfo = function clearHoverInfo() {
					this.pageManager.turnOnEvents();
					delete this.hoverInfo.block.force;
					delete this.hoverInfo.block.cornerForce;
					delete this.hoverInfo;
				};

				Book.prototype.xSegment = function xSegment() {
					var boxs = this.tmp.boxs,
						res = {};
					if (this.leftCover.physicId) {
						boxs[0].setFromObject(this.rightCover.three);
						res.min = -(res.max = boxs[0].max.x);
					} else if (this.rightCover.physicId) {
						boxs[0].setFromObject(this.leftCover.three);
						res.max = -(res.min = boxs[0].min.x);
					} else {
						boxs[0].setFromObject(this.leftCover.three);
						boxs[1].setFromObject(this.rightCover.three);
						boxs[0].union(boxs[1]);
						res.min = boxs[0].min.x;
						res.max = boxs[0].max.x;
					}
					return res;
				};

				Book.prototype.computeTarget = function computeTarget(point) {
					var x = point.x,
						y = point.y,
						seg = this.xSegment(),
						angle = void 0;

					angle = ((seg.max - x) / (seg.max - seg.min)) * Math.PI;
					// angle = Math.acos(x/Math.sqrt(x*x+y*y));
					return Math.max(this.dragAngle, Math.min(Math.PI - this.dragAngle, angle));
				};

				Book.prototype.onPickCallback = function onPickCallback(object) {
					var res = false;
					var block = object.object.userData.self,
						p = _extends({}, object.uv),
						i = object.face.materialIndex;
					if (i < 2) {
						p.x = i === 0 ? p.x : 1 - p.x;
						if (block.cornerTarget.testIntersection(null, p) && block.physicId) {
							if (this.hoverInfo) {
								this.clearHoverInfo();
							}
							block.force = _SheetPhysics2.default.dragForceClb;
							block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(
								this.computeTarget(object.point)
							);
							this.dragInfo = {
								object: object,
								block: block,
							};
							res = true;
							this.pageManager.turnOffEvents();
						}
					}
					return res;
				};

				Book.prototype.onDragCallback = function onDragCallback(point) {
					var block = this.dragInfo.block,
						p = block.getProps();
					block.force = _SheetPhysics2.default.dragForceClb;
					block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(point));
					return true;
				};

				Book.prototype.onReleaseCallback = function onReleaseCallback() {
					delete this.dragInfo.block.force;
					delete this.dragInfo.block.cornerForce;
					delete this.dragInfo;
					this.pageManager.turnOnEvents();
				};

				Book.prototype.getFlipping = function getFlipping(i) {
					return i ? this.getLeftFlipping() : this.getRightFlipping();
				};

				Book.prototype.flip = function flip(i) {
					var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

					return i ? this.flipLeft(size) : this.flipRight(size);
				};

				Book.prototype.enableMouse = function enableMouse(enable) {
					this.mouseController = enable;
				};

				Book.prototype.cornerCallback = function cornerCallback(e, data) {
					var _this4 = this;

					if (this.mouseController) {
						var _data$data = data.data,
							i = _data$data.i,
							n = _data$data.n;

						if (e.type === "mouseover") {
							if (this.hoverInfo && this.hoverInfo.pendings !== undefined) {
								++this.hoverInfo.pendings;
							} else {
								if (this.hoverInfo) {
									console.warn("Wrong state: element is already hover");
									if (this.hoverInfo.n !== n) {
										this.clearHoverInfo();
									}
								}
								if (!this.hoverInfo && !this.dragInfo) {
									var res = Promise.resolve(undefined);
									var hoverAngle = 0.02,
										hover = this.getBlockByPage(n),
										possible = this.getFlipping(i);
									if (
										n > 1 &&
										n < 2 * (this.p.sheets + 1) &&
										hover.physicId &&
										(hover.angle < hoverAngle || hover.angle > Math.PI - hoverAngle)
									) {
										res = Promise.resolve(hover);
									} else if (hover === possible) {
										var sheetBlocks = [this.leftCover].concat(this.sheetBlocks, [this.rightCover]);
										var j = sheetBlocks.indexOf(hover),
											nextBlock = ~j ? sheetBlocks[j + 2 * i - 1] : undefined;
										if (
											!nextBlock ||
											!nextBlock.physicId ||
											(nextBlock.angle > hoverAngle && nextBlock.angle < Math.PI - hoverAngle)
										) {
											res = this.flip(i, 1).then(function (block) {
												if (!block) {
													delete _this4.hoverInfo;
												} else {
													_this4.sheetPhysics.setParametr(block.physicId, "velocity", 0);
												}
												return block;
											});
											this.hoverInfo = {
												pendings: 1,
											};
										}
									}
									res.then(function (block) {
										if (_this4.hoverInfo && _this4.hoverInfo.pendings < 1) {
											block = undefined;
											delete _this4.hoverInfo;
										}
										if (block) {
											_this4.pageManager.turnOffEvents();
											var p = block.getProps();
											block.force = _this4.sheetPhysics.getTargetForceClb(
												p.mass * block.getSize(),
												i ? Math.PI - hoverAngle : hoverAngle
											);
											block.cornerForce = function () {
												return (i ? -1 : 1) * _SheetPhysics2.default.hoverCornerForceClb();
											};
											_this4.sheetPhysics.setParametr(
												block.physicId,
												"angle",
												i ? Math.PI - 0.5 * hoverAngle : 0.5 * hoverAngle
											);
											_this4.hoverInfo = {
												n: n,
												block: block,
											};
											_this4.update(1 / 30);
										}
									});
								}
							}
						} else if (this.hoverInfo && e.type === "mouseout") {
							if (this.hoverInfo.pendings !== undefined) {
								--this.hoverInfo.pendings;
							} else if (n === this.hoverInfo.n) {
								this.clearHoverInfo();
							}
						} else if (e.type === "mousedown") {
							this.cornerClickData = {
								x: e.pageX,
								y: e.pageY,
							};
						} else if (e.type === "click") {
							if (
								Math.sqrt(
									Math.pow(this.cornerClickData.x - e.pageX, 2) +
										Math.pow(this.cornerClickData.y - e.pageY, 2)
								) < 5
							) {
								var _hover = this.getBlockByPage(n);
								if (_hover.physicId) {
									var id = _hover.physicId,
										props = _hover.getProps();
									this.sheetPhysics.setParametr(id, "velocity", (i ? -1 : 1) * props.startVelocity);
								}
							}
							delete this.cornerClickData;
						}
					}
				};

				Book.prototype.addSheetBlock = function addSheetBlock(p, block) {
					this.sheetBlocks.splice(p, 0, block);
					this.subscribeSheetBlock(block, 2);
					this.threeSheetBlocks.add(block.three);
				};

				Book.prototype.subscribeSheetBlock = function subscribeSheetBlock(block, offset) {
					var _this5 = this;

					var eventConverter = new _CustomEventConverter2.default(
							this.visual.wnd,
							this.visual.doc,
							_CircleTarget2.default.test
						),
						r = 0.15,
						target = new _CircleTarget2.default(1 - 0.5 * r, 0.5 * r, r);
					target.block = block;
					target.callback = this.cornerCallback.bind(this);
					eventConverter.addCustom(target);
					block.cornerTarget = target;
					block.three.userData.mouseCallback = function (e, data) {
						var i = data.face.materialIndex;
						if (i < 2) {
							var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
							eventConverter.convert(e, {
								x: i === 0 ? data.uv.x : 1 - data.uv.x,
								y: data.uv.y,
								i: i,
								n: n,
							});
							_this5.pageManager.transferEventToTexture(n, e, data);
						}
					};
					block.three.userData.touchCallback = function (e, data) {
						var i = data.face.materialIndex;
						if (i < 2) {
							var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
							_this5.pageManager.transferEventToTexture(n, e, data);
						}
					};
					this.visual.drag.addThree(block.three);
					this.visual.mouseEvents.addThree(block.three);
					this.visual.touchEvents.addThree(block.three);
				};

				Book.prototype.removeSheetBlock = function removeSheetBlock(block) {
					this.visual.mouseEvents.removeThree(block.three);
					this.visual.touchEvents.removeThree(block.three);
					this.visual.drag.removeThree(block.three);
					this.threeSheetBlocks.remove(block.three);
					block.dispose();
				};

				Book.prototype.removeSheetBlocks = function removeSheetBlocks(first, size) {
					var blocks = this.sheetBlocks.splice(first, size);
					for (
						var _iterator5 = blocks,
							_isArray5 = Array.isArray(_iterator5),
							_i5 = 0,
							_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
						;

					) {
						var _ref5;

						if (_isArray5) {
							if (_i5 >= _iterator5.length) break;
							_ref5 = _iterator5[_i5++];
						} else {
							_i5 = _iterator5.next();
							if (_i5.done) break;
							_ref5 = _i5.value;
						}

						var block = _ref5;

						this.removeSheetBlock(block);
					}
				};

				Book.prototype.setTexture = function setTexture(material, n) {
					this.pageManager.setTexture(material, n);
				};

				Book.prototype.setPageTexture = function setPageTexture(material, n) {
					this.setTexture(material, n + 2);
				};

				Book.prototype.setLeftCoverTexture = function setLeftCoverTexture(material, n) {
					this.setTexture(material, n);
				};

				Book.prototype.setRightCoverTexture = function setRightCoverTexture(material, n) {
					this.setTexture(material, n + 2 * (this.p.sheets + 1));
				};

				Book.finishAnimationClb = function finishAnimationClb(angle) {
					this.block.set(this.book.getClosedBlockAngle(angle).closedAngle, "closed", 0);
					var i = this.book.sheetBlocks.indexOf(this.block);
					if (~i) {
						if (angle === 0) {
							this.book.mergeSheetBlocks(i, this.book.sheetBlocks.length - i);
						} else {
							this.book.mergeSheetBlocks(0, i + 1);
						}
					}
				};

				Book.prototype.calcBlockForce = function calcBlockForce(block, object, angle, velocity, cornerHeight) {
					return block.force ? block.force(object, angle, velocity, cornerHeight) : 0;
				};

				Book.prototype.calcBlockCornerForce = function calcBlockCornerForce(
					block,
					object,
					angle,
					velocity,
					cornerHeight
				) {
					return block.cornerForce ? block.cornerForce(object, angle, velocity, cornerHeight) : 0;
				};

				Book.prototype.setVisualMode = function setVisualMode(mode) {
					var l = Book.lightModes[this.p.lighting][mode],
						bs = [this.leftCover].concat(this.sheetBlocks, [this.rightCover]);
					for (
						var _iterator6 = bs,
							_isArray6 = Array.isArray(_iterator6),
							_i6 = 0,
							_iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();
						;

					) {
						var _ref6;

						if (_isArray6) {
							if (_i6 >= _iterator6.length) break;
							_ref6 = _iterator6[_i6++];
						} else {
							_i6 = _iterator6.next();
							if (_i6.done) break;
							_ref6 = _i6.value;
						}

						var b = _ref6;

						b.mesh.receiveShadow = mode === "live";
						for (
							var _iterator7 = b.materials,
								_isArray7 = Array.isArray(_iterator7),
								_i7 = 0,
								_iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();
							;

						) {
							var _ref7;

							if (_isArray7) {
								if (_i7 >= _iterator7.length) break;
								_ref7 = _iterator7[_i7++];
							} else {
								_i7 = _iterator7.next();
								if (_i7.done) break;
								_ref7 = _i7.value;
							}

							var m = _ref7;

							m.needsUpdate = true;
						}
					}
					this.visual.setLight(l.ambient, l.directional);
				};

				Book.prototype.notifyBeforeAnimation = function notifyBeforeAnimation() {
					var _this6 = this;

					var res = void 0;
					if (this.animationNotification) {
						res = Promise.reject();
					} else {
						this.animationNotification = true;
						this.dispatchEvent({
							type: "beforeAnimation",
						});
						this.setVisualMode("live");
						this.flipDisabled = true;
						res = this.layerManager.hide().then(function () {
							return delete _this6.flipDisabled;
						});
					}
					return res;
				};

				Book.prototype.notifyAfterAnimation = function notifyAfterAnimation() {
					if (this.animationNotification) {
						var p = this.getPage();
						if (this.userDirection.lastTopPage !== p) {
							this.userDirection.direction = Math.sign(p - this.userDirection.lastTopPage);
							this.userDirection.lastTopPage = p;
						}
						delete this.animationNotification;
						this.setVisualMode("static");
						this.layerManager.show();
						this.dispatchEvent({
							type: "afterAnimation",
						});
					}
				};

				Book.prototype.getUserDirection = function getUserDirection() {
					return this.userDirection;
				};

				Book.prototype.reducePagesWidth = function reducePagesWidth(reduceWidth) {
					for (
						var _iterator8 = this.sheetBlocks,
							_isArray8 = Array.isArray(_iterator8),
							_i8 = 0,
							_iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();
						;

					) {
						var _ref8;

						if (_isArray8) {
							if (_i8 >= _iterator8.length) break;
							_ref8 = _iterator8[_i8++];
						} else {
							_i8 = _iterator8.next();
							if (_i8.done) break;
							_ref8 = _i8.value;
						}

						var block = _ref8;

						block.reduceWidth(reduceWidth);
					}
				};

				Book.prototype.connectPhysics = function connectPhysics(
					block,
					mass,
					angle,
					velocity,
					flexibility,
					coverHeight,
					simulateClb,
					removeClb,
					progressClb
				) {
					var _this7 = this;

					var type = function type() {
							return _this7.hoverInfo ? "hover" : _this7.dragInfo ? "drag" : "free";
						},
						res = this.sheetPhysics.getSize() ? Promise.resolve() : this.notifyBeforeAnimation();
					if (block === this.leftCover || block === this.rightCover) {
						this.bookShadowMaterial.opacity = 0;
					}
					return res
						.then(function () {
							block.physicId = _this7.sheetPhysics.addObject(
								mass,
								angle,
								velocity,
								flexibility,
								coverHeight,
								function (angl, ch) {
									simulateClb(angl, ch);
									progressClb(block, Math.abs(angle - angl) / Math.PI, "process", type());
									_this7.calculateShadow();
									_this7.updateThree();
								},
								function (angl, ch) {
									removeClb(angl, ch);
									delete block.physicId;
									progressClb(block, Math.abs(angle - angl) / Math.PI, "finish", type());
									if (!_this7.sheetPhysics.getSize()) {
										var p = _this7.getPage();
										if (p === 0 || p === _this7.getPages() - 1) {
											_this7.reducePagesWidth(true);
										}
									}
									Promise.resolve().then(function () {
										if (!_this7.sheetPhysics.getSize()) {
											_this7.notifyAfterAnimation();
											_this7.calculateShadow();
										}
									});
									_this7.updateThree();
								},
								function (object, angle, velocity, cornerHeight) {
									return _this7.calcBlockForce(block, object, angle, velocity, cornerHeight);
								},
								function (object, angle, velocity, cornerHeight) {
									return _this7.calcBlockCornerForce(block, object, angle, velocity, cornerHeight);
								}
							);
							progressClb(block, 0, "init", type());
							if (_this7.sheetPhysics.getSize() === 1) {
								_this7.reducePagesWidth(false);
							}
							return block;
						})
						.catch(function () {
							return undefined;
						});
				};

				Book.prototype.update = function update(dt) {
					var _this8 = this;

					this.lastMousePos.t += dt;
					if (
						this.isProcessing() &&
						this.lastMousePos.pageX !== undefined &&
						this.lastMousePos.t - (this.lastMousePos.lastT || 0) > 0.25 &&
						!this.hoverInfo &&
						!this.dragInfo
					) {
						this.lastMousePos.lastT = this.lastMousePos.t;
						Promise.resolve().then(function () {
							(0, _libs.$)(_this8.visual.element).trigger(
								_libs.$.Event("mousemove", _this8.lastMousePos)
							);
						});
					}
					this.sheetPhysics.simulate(dt);
				};

				Book.prototype.splitSheetBlock = function splitSheetBlock(i, leftSize) {
					var block = this.sheetBlocks[i];
					if (block && leftSize < block.getSize()) {
						var newBlock = new _SheetBlock2.default(
							this.visual,
							_extends({}, this.p, { setTexture: this.setPageTexture.bind(this) }),
							block.p.first,
							block.p.first + leftSize,
							block.angle,
							block.state
						);
						block.set(
							block.angle,
							block.state,
							block.corner.height,
							block.p.first + leftSize,
							block.p.last
						);
						this.addSheetBlock(i, newBlock);
						return [newBlock, block];
					}
				};

				Book.prototype.mergeSheetBlocks = function mergeSheetBlocks(first, size) {
					if (first < this.sheetBlocks.length) {
						size = Math.min(this.sheetBlocks.length - first, size);
						var firstBlock = this.sheetBlocks[first],
							lastBlock = this.sheetBlocks[first + size - 1];
						firstBlock.set(
							firstBlock.angle,
							firstBlock.state,
							firstBlock.corner.height,
							firstBlock.p.first,
							lastBlock.p.last
						);
						this.removeSheetBlocks(first + 1, size - 1);
					}
				};

				Book.prototype.setSheetBlocks = function setSheetBlocks(angle, state) {
					if (state === "closed") {
						this.closedAngle = angle;
					}
					this.sheetBlocks.forEach(function (s) {
						if (!s.physicId) {
							s.set(angle, state);
						}
					});
				};

				Book.prototype.set = function set(angle) {
					var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

					this.angle = angle;
					var PI = Math.PI;
					if (angle < PI / 4) {
						this.binder.set(0);

						this.binder.setLeft(-PI / 2 + 2 * angle);
						this.leftCover.set(PI / 2, "opened", height);

						this.setSheetBlocks(0, "closed");

						this.binder.setRight(0);
						this.rightCover.set(0, "closed", 0);
					} else if (angle < (2 * PI) / 4) {
						var a = 2 * (angle - PI / 4);
						this.binder.set(a);

						this.binder.setLeft(-a);
						this.leftCover.set(PI / 2 + a, "opened", height);

						this.setSheetBlocks(a, "closed");

						this.binder.setRight(-a);
						this.rightCover.set(a, "closed", 0);
					} else if (angle < (3 * PI) / 4) {
						var _a = 2 * (angle - PI / 2);
						this.binder.set(PI / 2);

						this.binder.setLeft(-PI / 2);
						this.leftCover.set(PI, "opened", 0);

						this.binder.setRight(-PI / 2);
						this.rightCover.set(_a, "opened", height);
					} else if (angle < (4 * PI) / 4) {
						var _a2 = 2 * (angle - (3 * PI) / 4) + PI / 2;
						this.binder.set(_a2);

						this.binder.setLeft(-_a2);
						this.leftCover.set(_a2, "closed", 0);

						this.setSheetBlocks(_a2, "closed");

						this.binder.setRight(-PI / 2);
						this.rightCover.set(PI / 2, "opened", height);
					} else if (angle < (5 * PI) / 4) {
						this.binder.set(PI);

						this.binder.setLeft(-PI);
						this.leftCover.set(PI, "closed", 0);

						this.setSheetBlocks(PI, "closed");

						this.binder.setRight(-PI / 2 - 2 * (angle - PI));
						this.rightCover.set(PI / 2, "opened", height);
					} else if (angle < (6 * PI) / 4) {
						var _a3 = 2 * (angle - (5 * PI) / 4);
						this.binder.set(PI - _a3);

						this.binder.setLeft(-PI + _a3);
						this.leftCover.set(PI - _a3, "closed", 0);

						this.setSheetBlocks(PI - _a3, "closed");

						this.binder.setRight(-PI + _a3);
						this.rightCover.set(PI / 2 - _a3, "opened", height);
					} else if (angle < (7 * PI) / 4) {
						var _a4 = 2 * (angle - (6 * PI) / 4);
						this.binder.set(PI / 2);

						this.binder.setLeft(-PI / 2);
						this.leftCover.set(PI - _a4, "opened", height);

						this.binder.setRight(-PI / 2);
						this.rightCover.set(0, "opened", 0);
					} else if (angle < (8 * PI) / 4) {
						var _a5 = 2 * (angle - (7 * PI) / 4);
						this.binder.set(PI / 2 - _a5);

						this.binder.setLeft(-PI / 2);
						this.leftCover.set(PI / 2, "opened", height);

						this.setSheetBlocks(PI / 2 - _a5, "closed");

						this.binder.setRight(-PI / 2 + _a5);
						this.rightCover.set(PI / 2 - _a5, "closed", 0);
					}
				};

				Book.createSideTexture = function createSideTexture(color, type) {
					var c = _GraphUtils2.default.createCanvas(8, 8);
					if (type === "color") {
						var ctx = c.getContext("2d");
						ctx.beginPath();
						ctx.fillStyle = _GraphUtils2.default.color2Rgba(color, 1);
						ctx.rect(0, 0, 8, 7);
						ctx.fill();
						ctx.beginPath();
						ctx.fillStyle = _GraphUtils2.default.color2Rgba(
							_GraphUtils2.default.inverseColor(color, 0.5),
							1
						);
						ctx.rect(0, 7, 8, 1);
						ctx.fill();
					}
					return c;
				};

				Book.prototype.prepareProps = function prepareProps(props) {
					return this.calcProps(Book.mergeProps((0, _book.props)(), props));
				};

				Book.mergeProps = function mergeProps(first, second) {
					second = second || {};
					return _extends({}, first, second, {
						sheet: _extends({}, first.sheet, second.sheet),
						cover: _extends({}, first.cover, second.cover),
						page: _extends({}, first.page, second.page),
						cssLayerProps: _extends({}, first.cssLayerProps, second.cssLayerProps),
					});
				};

				Book.prototype.calcProps = function calcProps(props) {
					var depth = props.maxDepth / (props.sheets + 2 * 3),
						p = _extends({}, props, {
							sheet: _extends({}, props.sheet),
							cover: _extends({}, props.sheet, props.cover),
							page: _extends({}, props.sheet, props.page),
							cssLayerProps: _extends({}, props.cssLayerProps, {
								$: _libs.$,
							}),
						});
					p.cover.depth = Math.min(p.cover.depth, 3 * depth);
					p.page.depth = Math.min(p.page.depth, depth);
					var scale = 10,
						height = scale * p.height,
						width = scale * p.width,
						flexibleCornerK = Math.min(height, width) / width,
						flipProgressClb = function flipProgressClb() {
							return undefined;
						},
						sheet = {
							sideTexture: p.sheet.sideTexture || Book.createSideTexture(p.sheet.color, p.sheet.side),
						},
						cover = _extends({}, sheet, p.cover, {
							flexibleCorner: flexibleCornerK * p.cover.flexibleCorner,
							depth: scale * p.cover.depth,
							width: width,
							height: height,
							padding: scale * p.cover.padding,
						}),
						page = _extends({}, sheet, p.page, {
							flexibleCorner: flexibleCornerK * p.page.flexibleCorner,
							depth: scale * p.page.depth,
							width: cover.width - cover.padding,
							height: cover.height - 2 * cover.padding,
						}),
						marker = {
							use: false,
							color: 0xff0000,
							size: scale * 0.001,
						};
					if (cover.color !== sheet.color && !p.cover.sideTexture) {
						cover.sideTexture = Book.createSideTexture(cover.color, cover.side);
					}
					if (page.color !== sheet.color && !p.page.sideTexture) {
						page.sideTexture = Book.createSideTexture(page.color, page.side);
					}
					if (p.cssLayersLoader) {
						p.cssLayersLoader = this.cssLayersLoader(p.cssLayersLoader);
					}
					return _extends({}, p, {
						scale: scale,
						height: height,
						width: width,
						flipProgressClb: flipProgressClb,
						cover: cover,
						page: page,
						marker: marker,
					});
				};

				Book.prototype.cssLayersLoader = function cssLayersLoader(loader) {
					var _this9 = this;

					return function (n, clb) {
						return loader(n, function (ls) {
							var nls = [];
							for (
								var _iterator9 = ls,
									_isArray9 = Array.isArray(_iterator9),
									_i9 = 0,
									_iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();
								;

							) {
								var _ref9;

								if (_isArray9) {
									if (_i9 >= _iterator9.length) break;
									_ref9 = _iterator9[_i9++];
								} else {
									_i9 = _iterator9.next();
									if (_i9.done) break;
									_ref9 = _i9.value;
								}

								var l = _ref9;

								nls.push(
									_extends({}, l, {
										js: _this9.cssLayerJsObject(l),
									})
								);
							}
							return clb(nls);
						});
					};
				};

				Book.prototype.cssLayerJsObject = function cssLayerJsObject(l) {
					var _this10 = this;

					var clIfEx = function clIfEx(f) {
						var r = void 0;
						if (f) {
							try {
								r = f();
							} catch (e) {
								console.error(e);
							}
						}
						return r;
					};
					return function (c, p) {
						var o = {};
						try {
							var init = eval(l.js);
							o = init ? init(c, p) || {} : {};
						} catch (e) {
							console.error(e);
						}
						var no = _this10.cssLayerJsObjectInit(c, p),
							ro = {};
						var _arr = ["hide", "hidden", "show", "shown", "dispose"];

						var _loop = function _loop() {
							var n = _arr[_i10];
							ro[n] = function () {
								clIfEx(no[n]);
								clIfEx(o[n]);
							};
						};

						for (var _i10 = 0; _i10 < _arr.length; _i10++) {
							_loop();
						}
						return ro;
					};
				};

				Book.prototype.cssLayerJsObjectInit = function cssLayerJsObjectInit(c, p) {
					var _this11 = this;

					c.find(".go-to-page").on("click", function (e) {
						var n = (0, _libs.$)(e.target);
						while (n.length && !n.hasClass("go-to-page")) {
							n = (0, _libs.$)(n[0].parentNode);
						}
						n = parseInt(n.attr("data-number"));
						if (!isNaN(n)) {
							e.preventDefault();
							p.scene.ctrl.goToPage(n - 1);
						}
					});
					var ys = c.find(".youtube");
					if (ys.length) {
						ys.html('<div style="width:100%;height:100%;"></div>');
						var p01 = function p01(n, nm, d) {
							return n.attr(nm) === undefined ? d : n.attr(nm) === "true" ? 1 : 0;
						};
						_YouTubeApi2.default.init().then(function () {
							for (var i = 0; i < ys.length; ++i) {
								var _n = (0, _libs.$)(ys[i]),
									playerVars = {
										loop: p01(_n, "data-loop", 0),
										controls: p01(_n, "data-controls", 1),
										mute: p01(_n, "data-muted", 0),
									};
								if (playerVars.loop) {
									playerVars.playlist = _n.attr("data-id");
								}
								var player = new YT.Player(_n.find("div")[0], {
									videoId: _n.attr("data-id"),
									playerVars: playerVars,
								});
								_n[0].player = player;
							}
						});
					}
					var ads = c.find(".adsbygoogle");
					if (ads.length) {
						if (!this.visual.wnd.adsbygoogle) {
							this.visual.wnd.adsbygoogle = [];
							var script = this.visual.doc.createElement("script");
							script.async = true;
							script.src =
								"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=" +
								ads.attr("data-ad-client");
							this.visual.doc.body.appendChild(script);
						}
					}
					return {
						hide: function hide() {
							if (_this11.pendingPlayers.length) {
								_this11.pendingPlayers = [];
								_this11.dispatchEvent({
									type: "pendingPlayers",
								});
							}
							c.find(".pause-on-hide").each(function (_, p) {
								return _this11.cssFs.pause(p);
							});
						},
						shown: function shown() {
							c.find(".play-on-shown").each(function (_, p) {
								return _this11.cssFs.play(p);
							});
							setTimeout(function () {
								var update = false;
								c.find(".adsbygoogle").each(function (_, ad) {
									return (update = update || (0, _libs.$)(ad).html().trim() === "");
								});
								if (update) {
									try {
										_this11.visual.wnd.adsbygoogle.push({});
									} catch (e) {
										console.error(e);
									}
								}
							}, 100);
						},
						dispose: function dispose() {
							return c.find(".pause-on-hide").each(function (_, p) {
								return _this11.cssFs.pause(p);
							});
						},
					};
				};

				return Book;
			})(_libs.THREE.EventDispatcher);

			Book.lightModes = {
				ambient: {
					static: {
						ambient: 0xffffff,
						directional: 0x000000,
					},
					live: {
						ambient: 0xf8f8f8,
						directional: 0x0f0f0f,
					},
				},
				mixed: {
					static: {
						ambient: 0xf0f0f0,
						directional: 0x101010,
					},
					live: {
						ambient: 0xf0f0f0,
						directional: 0x101010,
					},
				},
			};
			exports.default = Book;

			/***/
		},
		/* 29 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _typeof =
				typeof Symbol === "function" && typeof Symbol.iterator === "symbol"
					? function (obj) {
							return typeof obj;
					  }
					: function (obj) {
							return obj &&
								typeof Symbol === "function" &&
								obj.constructor === Symbol &&
								obj !== Symbol.prototype
								? "symbol"
								: typeof obj;
					  };

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(1);

			var _Controller2 = __webpack_require__(15);

			var _Controller3 = _interopRequireDefault(_Controller2);

			var _bookController = __webpack_require__(45);

			var _EventsToActions = __webpack_require__(52);

			var _EventsToActions2 = _interopRequireDefault(_EventsToActions);

			var _stats = __webpack_require__(74);

			var _stats2 = _interopRequireDefault(_stats);

			var _Object3DWatcher = __webpack_require__(58);

			var _Object3DWatcher2 = _interopRequireDefault(_Object3DWatcher);

			var _FullScreenX = __webpack_require__(18);

			var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var BookController = (function (_Controller) {
				_inherits(BookController, _Controller);

				function BookController(book, view, props) {
					_classCallCheck(this, BookController);

					var _this = _possibleConstructorReturn(this, _Controller.call(this));

					_this.navigationControls = true;
					_this.book = book;
					_this.visual = book.visual;
					_this.p = BookController.prepareProps(props);
					_this.p.rtl = book.p.rtl;

					_this.orbit = book.visual.getOrbit();
					book.setFlipProgressClb(_this.updateViewIfState.bind(_this));
					_this.view = view;
					_this.bindActions();

					_this.state = {
						smartPan: !_this.actions["cmdSmartPan"].active,
						singlePage: _this.isSinglePageAvailable()
							? _this.actions["cmdSinglePage"].active ||
							  (_this.actions["cmdSinglePage"].activeForMobile && _this.visual.isMobile())
							: false,
						stats: _this.actions["cmdStats"].active,
						activeSide: 1,
						autoPlay: _this.actions["cmdAutoPlay"].active,
					};

					var box0 = new _libs.THREE.Box3(),
						box1 = new _libs.THREE.Box3(),
						bookWidth = book.openedBox.max.x - book.openedBox.min.x;
					_this.bookWatcher = new _Object3DWatcher2.default(_this.visual, function () {
						if (_this.state.singlePage) {
							if (_this.state.activeSide) {
								box0.setFromObject(book.rightCover.three);
							} else {
								box0.setFromObject(book.leftCover.three);
							}
						} else {
							box0.setFromObject(book.leftCover.three);
							box1.setFromObject(book.rightCover.three);
							box0.union(box1);
							var width = Math.max(box0.min.x - box0.min.x, bookWidth),
								x0 = (box0.min.x + box0.max.x) / 2;
							box0.min.x = x0 - 0.5 * width;
							box0.max.x = x0 + 0.5 * width;
						}
						return box0;
					});
					_this.bookWatcher.scale = _this.p.scale.default;
					_this.book.setZoom(_this.bookWatcher.scale, _this.state.singlePage);

					_this.Stats = new _stats2.default();
					_this.Stats.domElement.style.position = "absolute";
					_this.Stats.domElement.style.top = "0px";

					_this.binds = {
						onScreenModeChanged: _this.onScreenModeChanged.bind(_this),
						stats: _this.Stats.update.bind(_this.Stats),
						onUpdateView: _this.updateView.bind(_this),
					};
					_FullScreenX2.default.addEventListener(
						_this.view.getParentContainer().ownerDocument,
						_this.binds.onScreenModeChanged
					);

					_this.cmdSmartPan();

					_this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
					if (_this.p.loadingAnimation.skin) {
						_this.initLoadingAnimation();
					}

					_this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
					_this.book.setAutoResolution(_this.p.autoResolution);

					_this.visual.addEventListener("resize", _this.updateView.bind(_this));
					_this.book.addEventListener("pendingPlayers", _this.updateView.bind(_this));

					if (_this.state.autoPlay) {
						_this.autoPlay();
					}
					return _this;
				}

				BookController.prototype.dispose = function dispose() {
					_FullScreenX2.default.removeEventListener(
						this.view.getParentContainer().ownerDocument,
						this.binds.onScreenModeChanged
					);
					delete this.book;
					delete this.view;
					delete this.visual;
				};

				BookController.prototype.ready = function ready(scene) {
					var _this2 = this;

					if (this.view.templateObject.appLoaded) {
						Promise.resolve().then(function () {
							return _this2.view.templateObject.appLoaded(scene);
						});
					}
				};

				BookController.prototype.loadingAnimationHandler = function loadingAnimationHandler() {
					var _this3 = this;

					var pages = this.book.getTopPages();
					var visible = false;
					for (
						var _iterator = pages,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var n = _ref;

						var state = this.book.getPageState(n);
						visible = state !== "active";
						if (visible) {
							break;
						}
					}
					visible = visible || (this.printer && this.printer.loading);
					if (visible) {
						if (!this.pendingLoadingAnimation) {
							this.pendingLoadingAnimation = true;
							setTimeout(function () {
								if (_this3.pendingLoadingAnimation && _this3.view) {
									_this3.view.setState("widLoading", {
										visible: visible,
									});
								}
							}, 2000);
						}
					} else {
						delete this.pendingLoadingAnimation;
						this.view.setState("widLoading", {
							visible: visible,
						});
					}
				};

				BookController.prototype.initLoadingAnimation = function initLoadingAnimation() {
					var handler = this.loadingAnimationHandler.bind(this);
					this.book.addEventListener("beforeAnimation", handler);
					this.book.addEventListener("afterAnimation", handler);
					this.book.addEventListener("startRendering", handler);
					this.book.addEventListener("endRendering", handler);
				};

				BookController.prototype.enableNavigation = function enableNavigation(enable) {
					this.navigationControls = enable;
				};

				BookController.prototype.setTocCtrl = function setTocCtrl(tocCtrl) {
					this.tocCtrl = tocCtrl;
					this.tocCtrl.onChange = this.updateView.bind(this);
					this.tocCtrl.setActiveTab(this.actions["cmdToc"].defaultTab);
					if (this.actions["cmdToc"].active && !tocCtrl.visible) {
						tocCtrl.togle();
					}
				};

				BookController.prototype.setShareCtrl = function setShareCtrl(shareCtrl) {
					this.shareCtrl = shareCtrl;
					this.shareCtrl.onChange = this.updateView.bind(this);
					this.updateView();
				};

				BookController.prototype.setPrinter = function setPrinter(printer) {
					this.printer = printer;
					var handler = this.loadingAnimationHandler.bind(this);
					this.printer.addEventListener("loading", handler);
					this.printer.addEventListener("loaded", handler);
					this.updateView();
				};

				BookController.prototype.setSounds = function setSounds(sounds) {
					this.sounds = sounds;
					sounds.setEnabled(this.actions["cmdSounds"].active);
					this.updateView();
				};

				BookController.prototype.onScreenModeChanged = function onScreenModeChanged(e) {
					this.updateView();
				};

				BookController.prototype.canZoomIn = function canZoomIn() {
					return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.max) > this.p.eps;
				};

				BookController.prototype.canZoomOut = function canZoomOut() {
					return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.min) > this.p.eps;
				};

				BookController.prototype.canDefaultZoom = function canDefaultZoom() {
					return this.state.smartPan;
				};

				BookController.prototype.setBookZoom = function setBookZoom(scale) {
					// setTimeout(()=> {
					//   if(Math.abs(this.bookWatcher.scale-scale)<1e-3) {
					this.book.setZoom(scale, this.state.singlePage);
					//   }
					// }, 1000);
				};

				BookController.prototype.cmdAutoPlay = function cmdAutoPlay() {
					this.state.autoPlay = !this.state.autoPlay;
					if (this.state.autoPlay) {
						this.autoPlay();
					}
					this.updateView();
				};

				BookController.prototype.autoPlay = function autoPlay() {
					var _this4 = this;

					var pendingAutoPlay = Date.now();
					this.pendingAutoPlay = pendingAutoPlay;
					setTimeout(function () {
						if (_this4.pendingAutoPlay === pendingAutoPlay && _this4.state.autoPlay) {
							if (!_this4.book.isProcessing()) {
								var flipped = void 0;
								if (_this4.p.rtl) {
									if ((flipped = _this4.canFlipLeft())) {
										_this4.cmdBackward();
									}
								} else {
									if ((flipped = _this4.canFlipRight())) {
										_this4.cmdForward();
									}
								}
								if (!flipped) {
									_this4.goToPage(0);
								}
							}
							_this4.autoPlay();
						}
					}, this.book.p.autoPlayDuration);
				};

				BookController.prototype.cmdZoomIn = function cmdZoomIn() {
					if (this.state.smartPan) {
						this.bookWatcher.scale = Math.min(
							this.p.scale.max,
							this.bookWatcher.scale + this.p.scale.delta
						);
						this.setBookZoom(this.bookWatcher.scale);
					} else {
						this.orbit.zoomIn((6.6 * this.p.scale.delta) / 0.32);
					}
					this.updateView();
				};

				BookController.prototype.cmdZoomOut = function cmdZoomOut() {
					if (this.state.smartPan) {
						this.bookWatcher.scale = Math.max(
							this.p.scale.min,
							this.bookWatcher.scale - this.p.scale.delta
						);
						this.setBookZoom(this.bookWatcher.scale);
					} else {
						this.orbit.zoomOut((6.6 * this.p.scale.delta) / 0.32);
					}
					this.updateView();
				};

				BookController.prototype.setScale = function setScale(scale) {
					this.bookWatcher.scale = Math.min(this.p.scale.max, Math.max(this.p.scale.min, scale));
					this.setBookZoom(this.bookWatcher.scale);
					this.updateView();
				};

				BookController.prototype.cmdDefaultZoom = function cmdDefaultZoom() {
					if (this.state.smartPan) {
						this.bookWatcher.scale = this.p.scale.default;
						this.setBookZoom(this.bookWatcher.scale);
						this.updateView();
					}
				};

				BookController.prototype.cmdToc = function cmdToc() {
					if (this.tocCtrl) {
						this.tocCtrl.togle();
					}
				};

				BookController.prototype.cmdShare = function cmdShare() {
					if (this.shareCtrl) {
						this.shareCtrl.togle();
					}
				};

				BookController.prototype.cmdBackward = function cmdBackward() {
					var _this5 = this;

					if (!this.canFlipLeft()) return;
					if (this.state.singlePage) {
						this.state.activeSide = (this.getPage() + 1) % 2;
						if (this.state.activeSide) {
							this.state.activeSide = 0;
							this.updateView();
						} else {
							this.startFlip(this.book.flipLeft(1)).then(function (block) {
								if (block) {
									_this5.state.activeSide = 1;
								}
							});
						}
					} else {
						this.startFlip(this.book.flipLeft(1));
					}
				};

				BookController.prototype.cmdBigBackward = function cmdBigBackward() {
					this.cmdBackward();
				};

				BookController.prototype.cmdForward = function cmdForward() {
					var _this6 = this;

					if (!this.canFlipRight()) return;
					if (this.state.singlePage) {
						this.state.activeSide = (this.getPage() + 1) % 2;
						if (!this.state.activeSide) {
							this.state.activeSide = 1;
							this.updateView();
						} else {
							this.startFlip(this.book.flipRight(1)).then(function (block) {
								if (block) {
									_this6.state.activeSide = 0;
								}
							});
						}
					} else {
						this.startFlip(this.book.flipRight(1));
					}
				};

				BookController.prototype.cmdBigForward = function cmdBigForward() {
					this.cmdForward();
				};

				BookController.prototype.cmdSave = function cmdSave() {
					var a = (0, _libs.$)('<a href="' + this.p.downloadURL + '" download target="_blank"></a>').appendTo(
						this.view.getContainer()
					);
					a[0].click();
					a.remove();
				};

				BookController.prototype.cmdPrint = function cmdPrint() {
					this.printer.print();
				};

				BookController.prototype.cmdFullScreen = function cmdFullScreen() {
					if (!_FullScreenX2.default.activated()) {
						_FullScreenX2.default.request(this.view.getParentContainer());
					} else {
						_FullScreenX2.default.cancel();
					}
				};

				BookController.prototype.cmdSmartPan = function cmdSmartPan() {
					this.state.smartPan = !this.state.smartPan;
					if (this.state.smartPan) {
						this.orbit.minAzimuthAngle = 0;
						this.orbit.maxAzimuthAngle = 0;
						this.orbit.minPolarAngle = 0;
						this.orbit.maxPolarAngle = Math.PI / 4;
						this.bookWatcher.enabled = true;
					} else {
						this.orbit.minAzimuthAngle = -Infinity;
						this.orbit.maxAzimuthAngle = Infinity;
						this.orbit.minPolarAngle = 0;
						this.orbit.maxPolarAngle = Math.PI;
						this.bookWatcher.enabled = false;
					}
					this.updateView();
				};

				BookController.prototype.isSinglePageAvailable = function isSinglePageAvailable() {
					return this.book.getPages() !== 2;
				};

				BookController.prototype.cmdSinglePage = function cmdSinglePage() {
					if (this.isSinglePageAvailable()) {
						this.state.singlePage = !this.state.singlePage;
						this.setBookZoom(this.bookWatcher.scale);
						this.updateView();
						this.dispatchAsync({
							type: "pageMode",
							value: this.state.singlePage ? "single" : "double",
						});
					}
				};

				BookController.prototype.cmdSounds = function cmdSounds() {
					if (this.sounds) {
						this.sounds.togle();
					}
					this.updateView();
				};

				BookController.prototype.cmdStats = function cmdStats() {
					this.state.stats = !this.state.stats;
					if (this.state.stats) {
						(0, _libs.$)(this.view.getContainer()).append(this.Stats.domElement);
						this.visual.addRenderCallback(this.binds.stats);
					} else {
						(0, _libs.$)(this.view.getContainer()).find(this.Stats.domElement).remove();
						this.visual.removeRenderCallback(this.binds.stats);
					}
					this.updateView();
				};

				BookController.prototype.cmdPendingPlay = function cmdPendingPlay() {
					this.book.resolvePendingPlayers();
				};

				BookController.prototype.cmdGotoFirstPage = function cmdGotoFirstPage() {
					this.goToPage(0);
				};

				BookController.prototype.cmdGotoLastPage = function cmdGotoLastPage() {
					this.goToPage(this.book.getBookPages() - 1);
				};

				BookController.prototype.goToPage = function goToPage(page) {
					var _this7 = this;

					page = Math.max(Math.min(page, this.book.getPages() - 1), 0);
					if (this.p.rtl) {
						page = this.book.getBookPages() - 1 - page;
					}
					var pageNum = Math.max(Math.min(page, this.book.getBookPages() - 1), 0);
					this.state.activeSide = (pageNum + 1) % 2;
					var target = Math.max(Math.min(page - 1 + (page % 2), this.book.getBookPages() - 1), 0),
						current = this.book.getPage(),
						flips = [],
						covs = 0;
					if (target != current) {
						if (current === 0) {
							flips.push(1);
							current += 1;
							++covs;
						} else if (current === this.book.getBookPages() - 1) {
							flips.push(-1);
							current -= 2;
							++covs;
						}
						var cv = 0;
						if (target === 0) {
							cv = -1;
							target += 1;
							++covs;
						} else if (target === this.book.getBookPages() - 1) {
							cv = 1;
							target -= 2;
							++covs;
						}
						if (target - current) {
							flips.push(Math.ceil((target - current) / 2));
						}
						if (cv) {
							flips.push(cv);
						}
					}

					var setClb = function setClb(fl, time, clb) {
						return new Promise(function (resolve) {
							setTimeout(function () {
								if (fl < 0) {
									_this7.startFlip(_this7.book.flipLeft(-fl, clb));
								} else {
									_this7.startFlip(_this7.book.flipRight(fl, clb));
								}
								resolve();
							}, time);
						});
					};

					if (covs === 2) {
						setClb(flips[0], 0, function (block, progress, state) {
							if (state == "finish" && progress == 1) {
								setClb(flips[flips.length - 1], 0);
							}
						}).then(function () {
							return setClb(flips[1], 400);
						});
					} else {
						var next = Promise.resolve(),
							time = 0;

						var _loop = function _loop() {
							if (_isArray2) {
								if (_i2 >= _iterator2.length) return "break";
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) return "break";
								_ref2 = _i2.value;
							}

							var fl = _ref2;

							var t = time;
							next = next.then(function () {
								return setClb(fl, t);
							});
							time = 400;
						};

						for (
							var _iterator2 = flips,
								_isArray2 = Array.isArray(_iterator2),
								_i2 = 0,
								_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
							;

						) {
							var _ref2;

							var _ret = _loop();

							if (_ret === "break") break;
						}
					}
				};

				BookController.prototype.startFlip = function startFlip(flipRes) {
					var _this8 = this;

					return flipRes
						? flipRes.then(function (block) {
								if (block) {
									_this8.dispatchAsync({
										type: "startFlip",
									});
								}
								return block;
						  })
						: Promise.resolve(undefined);
				};

				BookController.prototype.endFlip = function endFlip(block) {
					this.dispatchAsync({
						type: "endFlip",
					});
					return block;
				};

				BookController.prototype.getPage = function getPage() {
					var page = this.book.getPage();
					return page
						? Math.min(this.book.getPage() + this.state.activeSide, this.book.getBookPages() - 1)
						: 0;
				};

				BookController.prototype.getPageForGUI = function getPageForGUI() {
					var n = (this.state.singlePage ? this.getPage() : this.book.getPage()) + 1;
					if (this.p.rtl) {
						n = this.book.getBookPages() - n + 1;
					}
					if (n > this.book.getPages()) {
						n = this.book.getPages();
					}
					return n;
				};

				BookController.prototype.inpPage = function inpPage(e, data) {
					this.goToPage(data - 1);
				};

				BookController.prototype.updateViewIfState = function updateViewIfState(block, progress, state, type) {
					if (state === "init" || state === "finish") {
						setTimeout(this.updateView.bind(this), 100);
					}
					if (state === "finish") {
						this.endFlip(block);
					}
				};

				BookController.prototype.isCmdVisible = function isCmdVisible(name) {
					return (0, _libs.$)(this.visual.element).width() < this.p.narrowView.width
						? this.actions[name].enabledInNarrow === undefined
							? this.actions[name].enabled
							: this.actions[name].enabledInNarrow
						: this.actions[name].enabled;
				};

				BookController.prototype.updateViewState = function updateViewState() {
					this.viewState = {
						cmdZoomIn: {
							enable: this.canZoomIn(),
							visible: this.isCmdVisible("cmdZoomIn"),
							active: false,
						},
						cmdZoomOut: {
							enable: this.canZoomOut(),
							visible: this.isCmdVisible("cmdZoomOut"),
							active: false,
						},
						cmdDefaultZoom: {
							enable: this.canDefaultZoom(),
							visible: this.isCmdVisible("cmdDefaultZoom"),
							active:
								this.canDefaultZoom() &&
								Math.abs(this.bookWatcher.scale - this.p.scale.default) < this.p.eps,
						},
						cmdToc: {
							enable: !!this.tocCtrl,
							visible: this.isCmdVisible("cmdToc") && this.tocCtrl,
							active: this.tocCtrl && this.tocCtrl.visible,
						},
						cmdShare: {
							enable: !!this.shareCtrl,
							visible: this.isCmdVisible("cmdShare") && this.shareCtrl,
							active: this.shareCtrl && this.shareCtrl.visible,
						},
						inpPages: {
							visible: true,
							value: this.book.getPages(),
						},
						inpPage: {
							visible: true,
							enable: !this.book.isProcessing() && this.navigationControls,
							value: this.getPageForGUI(),
						},
						cmdSave: {
							enable: true,
							visible: this.isCmdVisible("cmdSave") && !!this.p.downloadURL,
							active: false,
						},
						cmdPrint: {
							enable: true,
							visible: this.isCmdVisible("cmdPrint") && !!this.printer,
							active: false,
						},
						cmdFullScreen: {
							enable: _FullScreenX2.default.available(),
							visible: this.isCmdVisible("cmdFullScreen"),
							active: _FullScreenX2.default.available() && _FullScreenX2.default.activated(),
						},
						widControls: {
							enable: true,
							visible: true,
							active: false,
						},
						widSettings: {
							enable: true,
							visible: this.isCmdVisible("widSettings"),
							active: false,
						},
						widToolbar: {
							enable: true,
							visible: this.isCmdVisible("widToolbar"),
							active: false,
						},
						cmdSmartPan: {
							enable: true,
							visible: this.isCmdVisible("cmdSmartPan"),
							active: this.state.smartPan,
						},
						cmdSinglePage: {
							enable: this.isSinglePageAvailable(),
							visible: this.isCmdVisible("cmdSinglePage"),
							active: this.state.singlePage,
						},
						cmdSounds: {
							enable: true,
							visible: this.isCmdVisible("cmdSounds") && !!this.sounds,
							active: !!this.sounds && this.sounds.enabled,
						},
						cmdStats: {
							enable: true,
							visible: this.isCmdVisible("cmdStats"),
							active: this.state.stats,
						},
						cmdAutoPlay: {
							enable: true,
							visible: this.isCmdVisible("cmdAutoPlay"),
							active: this.state.autoPlay,
						},
						cmdPendingPlay: {
							enable: true,
							visible: true,
							active: false,
						},
						widPendingPlay: {
							enable: true,
							visible: this.book.hasPendingPlayers(),
							active: false,
						},
					};

					var left = this.canFlipLeft(),
						right = this.canFlipRight();
					var flippersEnable = {
						cmdBackward: left,
						cmdBigBackward: left,
						cmdForward: right,
						cmdBigForward: right,
						cmdGotoFirstPage: left,
						cmdGotoLastPage: right,
					};
					for (
						var _iterator3 = Object.keys(flippersEnable),
							_isArray3 = Array.isArray(_iterator3),
							_i3 = 0,
							_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
						;

					) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var name = _ref3;

						this.viewState[name] = {
							enable: flippersEnable[name],
							visible: this.isCmdVisible(name),
							active: false,
						};
					}
				};

				BookController.prototype.canFlipLeft = function canFlipLeft() {
					return (
						this.navigationControls &&
						(!!this.book.getLeftFlipping() || (this.state.singlePage && this.p.rtl && this.getPage() === 2))
					);
				};

				BookController.prototype.canFlipRight = function canFlipRight() {
					return (
						this.navigationControls &&
						(!!this.book.getRightFlipping() ||
							(this.state.singlePage && !this.p.rtl && this.getPage() === this.book.getPages() - 2))
					);
				};

				BookController.prototype.updateView = function updateView() {
					if (this.view) {
						this.updateViewState();
						for (
							var _iterator4 = Object.keys(this.viewState),
								_isArray4 = Array.isArray(_iterator4),
								_i4 = 0,
								_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
							;

						) {
							var _ref4;

							if (_isArray4) {
								if (_i4 >= _iterator4.length) break;
								_ref4 = _iterator4[_i4++];
							} else {
								_i4 = _iterator4.next();
								if (_i4.done) break;
								_ref4 = _i4.value;
							}

							var name = _ref4;

							this.view.setState(name, this.viewState[name]);
						}
					}
				};

				BookController.prototype.getActions = function getActions() {
					var _this9 = this;

					var isSwipping = function isSwipping(name) {
							return (
								_this9.actions.touchCmdSwipe.enabled &&
								_this9.actions.touchCmdSwipe.code === _this9.actions[name].code &&
								_this9.state.smartPan &&
								_this9.bookWatcher.scale <= 1
							);
						},
						cmds = {};

					var _loop2 = function _loop2(name) {
						if (name.indexOf("cmd") === 0) {
							cmds[name] = {
								activate: function activate() {
									if (_this9.viewState && _this9.viewState[name].enable) {
										_this9[name].apply(_this9, arguments);
									}
								},
							};
						}
					};

					for (var name in this) {
						_loop2(name);
					}

					return _extends({}, cmds, {
						cmdPanLeft: {
							activate: function activate(e) {
								return _this9.orbit.actions.pan(e, {
									state: "move",
									dx: -_this9.p.pan.speed,
									dy: 0,
								});
							},
						},
						cmdPanRight: {
							activate: function activate(e) {
								return _this9.orbit.actions.pan(e, {
									state: "move",
									dx: _this9.p.pan.speed,
									dy: 0,
								});
							},
						},
						cmdPanUp: {
							activate: function activate(e) {
								return _this9.orbit.actions.pan(e, {
									state: "move",
									dx: 0,
									dy: -_this9.p.pan.speed,
								});
							},
						},
						cmdPanDown: {
							activate: function activate(e) {
								return _this9.orbit.actions.pan(e, {
									state: "move",
									dx: 0,
									dy: _this9.p.pan.speed,
								});
							},
						},
						mouseCmdRotate: {
							activate: this.orbit.actions.rotate,
						},
						mouseCmdDragZoom: {
							activate: function activate(e, data) {
								if (data.dy > 0) {
									_this9.cmdZoomOut();
								} else if (data.dy < 0) {
									_this9.cmdZoomIn();
								}
							},
						},
						mouseCmdPan: {
							activate: this.orbit.actions.pan,
						},
						mouseCmdWheelZoom: {
							activate: function activate(e) {
								var scale = _this9.bookWatcher.scale;
								if (e.deltaY < 0) {
									_this9.cmdZoomOut();
								} else if (e.deltaY > 0) {
									_this9.cmdZoomIn();
								}
								if (!_this9.state.smartPan || Math.abs(_this9.bookWatcher.scale - scale) > 1e-4) {
									e.preventDefault();
								}
							},
						},
						touchCmdRotate: {
							activate: function activate(e, data) {
								if (!isSwipping("touchCmdRotate")) {
									if (data.state === "move") {
										e.preventDefault();
									}
									_this9.orbit.actions.rotate(e, data);
								}
							},
						},
						touchCmdZoom: {
							activate: function activate(e, data) {
								if (!isSwipping("touchCmdZoom")) {
									var l = function l(v) {
										return Math.sqrt(v.x * v.x + v.y * v.y);
									};
									if (data.state === "start") {
										_this9.touchZoomData = {
											l: l(data),
											scale: _this9.bookWatcher.scale,
										};
									} else if (data.state === "move") {
										e.preventDefault();
										_this9.setScale(
											(l(data) / _this9.touchZoomData.l) * _this9.touchZoomData.scale
										);
									}
								}
							},
						},
						touchCmdPan: {
							activate: function activate(e, data) {
								if (!isSwipping("touchCmdPan")) {
									if (
										data.state === "move" &&
										(!_this9.state.smartPan || _this9.bookWatcher.scale > 1)
									) {
										e.preventDefault();
										_this9.orbit.actions.pan(e, data);
									}
								}
							},
						},
						touchCmdSwipe: {
							activate: function activate(e, data) {
								if (isSwipping("touchCmdSwipe")) {
									if (data.state === "start") {
										var touch = (e.touches || e.originalEvent.touches)[
											_this9.actions.touchCmdSwipe.code - 1
										];
										_this9.swipeData = {
											handled: false,
											x0: touch.pageX,
											y0: touch.pageY,
											x: touch.pageX,
											y: touch.pageY,
										};
									} else if (data.state === "move") {
										// e.preventDefault();
										if (!_this9.swipeData.handled) {
											_this9.swipeData = _extends({}, _this9.swipeData, {
												x: _this9.swipeData.x + data.dx,
												y: _this9.swipeData.y + data.dy,
											});
											if (Math.abs(_this9.swipeData.x0 - _this9.swipeData.x) > 100) {
												_this9.swipeData.x0 > _this9.swipeData.x
													? _this9.cmdForward()
													: _this9.cmdBackward();
												_this9.swipeData.handled = true;
											}
										}
									} else {
										delete _this9.swipeData;
									}
								}
							},
						},
						widSettings: {
							activate: function activate() {
								return undefined;
							},
						},
						widToolbar: {
							activate: function activate() {
								return undefined;
							},
						},
					});
				};

				BookController.prototype.bindActions = function bindActions() {
					var _this10 = this;

					this.eToA = new _EventsToActions2.default((0, _libs.$)(this.visual.element));
					this.eToA.addAction(
						function (e) {
							return e.preventDefault();
						},
						"contextmenu",
						_EventsToActions2.default.mouseButtons.Right,
						0
					);
					this.eToA.addAction(
						function (e) {
							return (0, _libs.$)(_this10.view.getParentContainer()).trigger(e);
						},
						"keydown",
						27,
						0
					);

					this.actions = this.getActions();
					for (
						var _iterator5 = Object.keys(this.actions),
							_isArray5 = Array.isArray(_iterator5),
							_i5 = 0,
							_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
						;

					) {
						var _ref5;

						if (_isArray5) {
							if (_i5 >= _iterator5.length) break;
							_ref5 = _iterator5[_i5++];
						} else {
							_i5 = _iterator5.next();
							if (_i5.done) break;
							_ref5 = _i5.value;
						}

						var name = _ref5;

						var action = _extends({}, this.actions[name], this.p.actions[name]);
						this.actions[name] = action;
						if ((name.indexOf("mouseCmd") !== 0 && name.indexOf("touchCmd") !== 0) || action.enabled) {
							var flags = action.flags || 0;
							if (action.type) {
								this.eToA.addAction(action.activate, action.type, action.code, flags);
							} else if (action.code !== undefined) {
								this.eToA.addAction(action.activate, "keydown", action.code, flags);
							}
						}
					}
				};

				BookController.prepareProps = function prepareProps(props) {
					return BookController.calcProps(BookController.mergeProps((0, _bookController.props)(), props));
				};

				BookController.setActions = function setActions(props, actions) {
					for (
						var _iterator6 = Object.keys(actions || {}),
							_isArray6 = Array.isArray(_iterator6),
							_i6 = 0,
							_iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();
						;

					) {
						var _ref6;

						if (_isArray6) {
							if (_i6 >= _iterator6.length) break;
							_ref6 = _iterator6[_i6++];
						} else {
							_i6 = _iterator6.next();
							if (_i6.done) break;
							_ref6 = _i6.value;
						}

						var name = _ref6;

						props.actions[name] = _extends({}, props.actions[name], actions[name]);
					}
				};

				BookController.mergeProps = function mergeProps(first, second) {
					second = second || {};
					function merge(first, second) {
						second = second || {};
						var props = _extends({}, first, second);
						for (
							var _iterator7 = Object.keys(first),
								_isArray7 = Array.isArray(_iterator7),
								_i7 = 0,
								_iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();
							;

						) {
							var _ref7;

							if (_isArray7) {
								if (_i7 >= _iterator7.length) break;
								_ref7 = _iterator7[_i7++];
							} else {
								_i7 = _iterator7.next();
								if (_i7.done) break;
								_ref7 = _i7.value;
							}

							var name = _ref7;

							if (_typeof(first[name]) === "object") {
								props[name] = merge(first[name], second[name]);
							}
						}
						return props;
					}
					var props = merge(first, second);
					BookController.setActions(props, first.actions);
					BookController.setActions(props, second.actions);
					return props;
				};

				BookController.calcProps = function calcProps(props) {
					props.scale.delta = (props.scale.max - props.scale.min) / props.scale.levels;
					return props;
				};

				return BookController;
			})(_Controller3.default);

			exports.default = BookController;

			/***/
		},
		/* 30 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(1);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var BookPrinter = (function (_THREE$EventDispatche) {
				_inherits(BookPrinter, _THREE$EventDispatche);

				function BookPrinter(context, book, styleSheet) {
					_classCallCheck(this, BookPrinter);

					var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

					_this.book = book;
					_this.styleSheet = styleSheet;
					_this.wnd = context.wnd;
					_this.doc = context.doc;
					_this.pageCallback = book.getPageCallback();
					var test = _this.pageCallback(0);
					_this.type = test.type;
					if (_this.type === "pdf") {
						_this.pdfSrc = test.src.src;
					}
					return _this;
				}

				BookPrinter.prototype.cancel = function cancel() {
					this.canceled = true;
				};

				BookPrinter.prototype.dispose = function dispose() {
					if (this.frame) {
						this.frame.remove();
						delete this.frame;
					}
				};

				BookPrinter.prototype.print = function print() {
					var _this2 = this;

					if (this.loading) {
						return;
					}
					delete this.canceled;
					if (this.type === "pdf") {
						var printWnd = void 0,
							callManually = false;
						if (this.useIFrame()) {
							callManually = !!this.frame;
							if (!this.frame) {
								this.frame = (0, _libs.$)(
									'<iframe src="' + this.pdfSrc + '" style="display: none;"></iframe>'
								).appendTo(document.body);
							}
							printWnd = this.frame[0].contentWindow;
						} else {
							printWnd = this.wnd.open(this.pdfSrc);
						}
						if (callManually) {
							printWnd.print();
						} else {
							this.loading = true;
							this.dispatchEvent({ type: "loading" });
							(0, _libs.$)(this.frame).on("load", function () {
								setTimeout(function () {
									delete _this2.loading;
									_this2.dispatchEvent({ type: "loaded" });
									try {
										printWnd.print();
									} catch (e) {
										console.error(e);
									}
								}, 1000);
							});
						}
					} else {
						this.renderContent()
							.then(function (content) {
								var printWnd = _this2.wnd.open(),
									printDoc = printWnd.document,
									html = (
										'\n            <!DOCTYPE html>\n            <html>\n              <head>\n                <meta charset="utf-8">\n                <title>3D FlipBook - Printing</title>\n                ' +
										content.head +
										'\n                <script type="text/javascript">\n                  function printDocument() {\n                    window.print();\n                    window.close();\n                  }\n                  function init() {\n                    setTimeout(printDocument, 100);\n                  }\n                </script>\n              </head>\n              <body onload="init()">\n                ' +
										content.body +
										"\n              </body>\n            </html>\n          "
									).fb3dQFilter();
								printDoc.open();
								printDoc.write(html);
								printDoc.close();
							})
							.catch(function (e) {
								return console.warn("3D FlipBook - Printing was canceled");
							});
					}
				};

				BookPrinter.prototype.progress = function progress(v) {
					if (this.canceled) {
						throw "Cancel Printing";
					}
					if (this.onProgress) {
						this.onProgress(Math.floor(v * 100));
					}
				};

				BookPrinter.prototype.renderContent = function renderContent() {
					var _this3 = this;

					var pages = this.book.getPages(),
						head = new Set(),
						body = [];
					var done = Promise.resolve();

					var _loop = function _loop(page) {
						var info = _this3.pageCallback(page);
						if (info.type === "image") {
							done = done.then(function () {
								_this3.progress(page / pages);
								return _this3.renderImage(head, body, info.src);
							});
						} else if (info.type === "html") {
							done = done.then(function () {
								_this3.progress(page / pages);
								return _this3.renderHtml(head, body, info.src);
							});
						}
					};

					for (var page = 0; page < pages; ++page) {
						_loop(page);
					}
					return done.then(function () {
						_this3.progress(1);
						return { head: _this3.renderHead(head), body: body.join("\n") };
					});
				};

				BookPrinter.wrap = function wrap(content) {
					return '<div class="fb3d-printer-page">' + content + "</div>";
				};

				BookPrinter.prototype.renderImage = function renderImage(head, body, src) {
					body.push(BookPrinter.wrap('<img src="' + src + '" />'));
				};

				BookPrinter.prototype.renderHtml = function renderHtml(head, body, src) {
					return new Promise(function (resolve, reject) {
						_libs.$.get(src, function (html) {
							var links = html.match(/<link.*?>/gi) || [];
							for (
								var _iterator = links,
									_isArray = Array.isArray(_iterator),
									_i = 0,
									_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
								;

							) {
								var _ref;

								if (_isArray) {
									if (_i >= _iterator.length) break;
									_ref = _iterator[_i++];
								} else {
									_i = _iterator.next();
									if (_i.done) break;
									_ref = _i.value;
								}

								var link = _ref;

								if (link.match(/stylesheet/i)) {
									var href = link.match(/href\s*=\s*['"](.*)['"]/i);
									if (href) {
										head.add(href[1]);
									}
								}
							}
							var content = html.match(/<body.*?>([\S\s]*)<\/body>/i);
							if (content) {
								body.push(BookPrinter.wrap(content[1]));
							}
							resolve();
						}).fail(function (e) {
							console.error(e.responseText);
							reject();
						});
					});
				};

				BookPrinter.prototype.renderHead = function renderHead(head) {
					var content = [];
					head.forEach(function (k) {
						return content.push('<link rel="stylesheet" href="' + k + '">');
					});
					content.push(
						this.styleSheet
							? '<link rel="stylesheet" href="' + this.styleSheet + '">'
							: BookPrinter.defaultStyleSheet()
					);
					return content.join("\n");
				};

				BookPrinter.prototype.useIFrame = function useIFrame() {
					var isChromium = this.wnd.chrome,
						winNav = this.wnd.navigator,
						vendorName = winNav.vendor,
						isIEedge = winNav.userAgent.indexOf("Edge") > -1,
						isIOSChrome = winNav.userAgent.match("CriOS");
					var use = void 0;
					if (isIOSChrome) {
						use = true;
					} else if (isChromium && vendorName === "Google Inc." && !isIEedge) {
						use = true;
					} else {
						use = false;
					}
					return true;
				};

				BookPrinter.defaultStyleSheet = function defaultStyleSheet() {
					return '\n      <style type="text/css">\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        .fb3d-printer-page {\n          page-break-after: always;\n        }\n      </style>\n    '.fb3dQFilter();
				};

				return BookPrinter;
			})(_libs.THREE.EventDispatcher);

			exports.default = BookPrinter;

			/***/
		},
		/* 31 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(1);

			var _View2 = __webpack_require__(69);

			var _View3 = _interopRequireDefault(_View2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var BookView = (function (_View) {
				_inherits(BookView, _View);

				function BookView(container, onLoad, template, handler) {
					_classCallCheck(this, BookView);

					return _possibleConstructorReturn(this, _View.call(this, container, onLoad, template, handler));
				}

				BookView.prototype.initView = function initView() {
					this.view = this.container.find(".view");
					this.bookmarksView = this.container.find(".widBookmarks");
					this.thumbnailsView = this.container.find(".widThumbnails");
					this.searchView = this.container.find(".widSearch");
				};

				BookView.prototype.getHandlers = function getHandlers(id) {
					var _this2 = this;

					var handlers = void 0;
					if (id === "inpPage") {
						handlers = [
							{
								inpPage: function inpPage(e, data) {
									return _this2.callLater(
										_View.prototype.getHandlers.call(_this2, id),
										id,
										e,
										data,
										BookView.PAGE_HANDLER_DELAY
									);
								},
							},
						];
					} else {
						handlers = _View.prototype.getHandlers.call(this, id);
					}
					return handlers;
				};

				BookView.prototype.onItemStateChanged = function onItemStateChanged(id, state) {
					if (id === "cmdFullScreen") {
						if (state.active) {
							this.parentContainer.addClass("fullscreen");
						} else {
							this.parentContainer.removeClass("fullscreen");
						}
					}
				};

				BookView.prototype.getView = function getView() {
					return this.view;
				};

				BookView.prototype.getBookmarksView = function getBookmarksView() {
					return this.bookmarksView;
				};

				BookView.prototype.getThumbnailsView = function getThumbnailsView() {
					return this.thumbnailsView;
				};

				BookView.prototype.getSearchView = function getSearchView() {
					return this.searchView;
				};

				BookView.prototype.getForms = function getForms() {
					return [];
				};

				BookView.prototype.getLinks = function getLinks() {
					return [
						"cmdZoomIn",
						"cmdZoomOut",
						"cmdDefaultZoom",
						"cmdToc",
						"cmdBackward",
						"cmdBigBackward",
						"cmdForward",
						"cmdBigForward",
						"cmdSave",
						"cmdPrint",
						"cmdFullScreen",
						"cmdSmartPan",
						"cmdSinglePage",
						"cmdSounds",
						"cmdStats",
						"cmdShare",
						"cmdCloseToc",
						"cmdCloseShare",
						"cmdBookmarks",
						"cmdSearch",
						"cmdThumbnails",
						"cmdPendingPlay",
						"cmdFacebook",
						"cmdTwitter",
						"cmdEmail",
						"cmdAutoPlay",
						"cmdGotoFirstPage",
						"cmdGotoLastPage",
					];
				};

				BookView.prototype.getWidgets = function getWidgets() {
					return [
						"widLoadingProgress",
						"widUserMessage",
						"widFloatWnd",
						"widShare",
						"widTocMenu",
						"widBookmarks",
						"widThumbnails",
						"widSearch",
						"widControls",
						"widSettings",
						"widLoading",
						"widPendingPlay",
						"widToolbar",
					];
				};

				BookView.prototype.getInputs = function getInputs() {
					return ["inpPage", "inpPages"];
				};

				BookView.prototype.getTexts = function getTexts() {
					return ["txtLoadingProgress", "txtUserMessage", "txtShareLink"];
				};

				BookView.prototype.getTemplate = function getTemplate() {
					return {
						html: "templates/default-book-view.html",
						styles: ["css/black-book-view.css"],
						links: [
							{
								rel: "stylesheet",
								href: "css/font-awesome.min.css",
							},
						],
						script: "js/default-book-view.js",
					};
				};

				return BookView;
			})(_View3.default);

			BookView.PAGE_HANDLER_DELAY = 1000;
			exports.default = BookView;

			/***/
		},
		/* 32 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _BookPropsBuilder2 = __webpack_require__(9);

			var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

			var _ImageFactory = __webpack_require__(8);

			var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var ClbBookPropsBuilder = (function (_BookPropsBuilder) {
				_inherits(ClbBookPropsBuilder, _BookPropsBuilder);

				function ClbBookPropsBuilder(context, pageCallback, pages, onReady, style) {
					_classCallCheck(this, ClbBookPropsBuilder);

					var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

					_this.calcSheets(pages);
					_this.pages = pages;
					_this.pageCallback = pageCallback;
					_this.binds = {
						pageCallback: pageCallback.bind(_this),
					};
					_this.imageFactory = new _ImageFactory2.default(context);

					if (pages > 0) {
						var test = _this.imageFactory.build(
							pageCallback(0),
							0,
							_this.defaults.sheet.widthTexels,
							_this.defaults.sheet.heightTexels,
							_this.defaults.sheet.color
						);
						test.onLoad = function () {
							_this.calcProps(test.width, test.height);
							test.dispose();
							_this.ready();
						};
					} else {
						_this.props = _this.defaults;
						_this.ready();
					}
					return _this;
				}

				return ClbBookPropsBuilder;
			})(_BookPropsBuilder3.default);

			exports.default = ClbBookPropsBuilder;

			/***/
		},
		/* 33 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _SheetBlock2 = __webpack_require__(10);

			var _SheetBlock3 = _interopRequireDefault(_SheetBlock2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var Cover = (function (_SheetBlock) {
				_inherits(Cover, _SheetBlock);

				function Cover(visual, p, angle, state) {
					_classCallCheck(this, Cover);

					return _possibleConstructorReturn(this, _SheetBlock.call(this, visual, p, 0, 1, angle, state));
				}

				Cover.prototype.getProps = function getProps() {
					return _extends({}, this.p.cover, {
						sheets: 1,
					});
				};

				Cover.prototype.loadPoints = function loadPoints() {
					var openedInterpolationIndeces = [
							{
								left: [2, 3, 4],
								right: [2, 3, 4],
							},
						],
						closedInterpolationIndeces = [[0, 1, 2]],
						interpolationPoints = [
							{
								x: [
									[0, 0.2877, 0.6347, 0.8174, 1.0],
									[0, 0.2831, 0.6256, 0.8082, 0.9909],
									[0, 0.2603, 0.5936, 0.7763, 0.9589],
									[0, 0.137, 0.3881, 0.5342, 0.6758],
									[0, 0, 0, 0, 0],
								],
								y: [
									[0, 0, 0, 0, 0],
									[0, 0.02, 0.005, -0.001, -0.0025],
									[0, 0.04, 0.01, -0.002, -0.005],
									[0, 0.2466, 0.4795, 0.5708, 0.6758],
									[0, 0.2877, 0.6347, 0.8174, 1.0],
								],
							},
						];
					return {
						interpolationPoints: interpolationPoints,
						openedInterpolationIndeces: openedInterpolationIndeces,
						closedInterpolationIndeces: closedInterpolationIndeces,
					};
				};

				return Cover;
			})(_SheetBlock3.default);

			exports.default = Cover;

			/***/
		},
		/* 34 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _SheetCssLayer = __webpack_require__(40);

			var _SheetCssLayer2 = _interopRequireDefault(_SheetCssLayer);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var CssLayersManager = (function () {
				function CssLayersManager(book) {
					_classCallCheck(this, CssLayersManager);

					this.book = book;
					this.props = book.p.cssLayerProps;
					this.visual = book.visual;
					this.pageManager = book.pageManager;
					this.wrappers = {};
					this.pendings = [];
				}

				CssLayersManager.prototype.getActives = function getActives() {
					var page = this.book.getPage(),
						pages = this.book.getBookPages(),
						acs = page === 0 || page === pages - 1 ? [page] : [page, page + 1];
					if (!this.wrappers[0] && page !== 0) {
						acs = [0].concat(acs);
					}
					return acs;
				};

				CssLayersManager.prototype.dispose = function dispose() {
					for (
						var _iterator = Object.values(this.wrappers),
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var w = _ref;

						w.layers.forEach(function (l) {
							return l.dispose();
						});
					}
					delete this.wrappers;
				};

				CssLayersManager.prototype.show = function show() {
					var _this = this;

					this.hidden = false;

					var _loop = function _loop() {
						if (_isArray2) {
							if (_i2 >= _iterator2.length) return "break";
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) return "break";
							_ref2 = _i2.value;
						}

						var n = _ref2;

						var w = _this.wrappers[n];
						if (w) {
							if (w.state === "ready" && w.layers.length) {
								var block = _this.book.getBlockByPage(n);
								w.layers.forEach(function (l) {
									if (l.isHidden()) {
										l.update(block);
										l.show();
									}
								});
							}
						} else {
							var _w = (_this.wrappers[n] = {
								state: "loading",
								layers: [],
							});
							Promise.resolve().then(function () {
								_this.pageManager.getLayers(n, function (layers) {
									var finish = function finish() {
										if (layers.length && _this.wrappers) {
											var _block = _this.book.getBlockByPage(n);
											for (
												var _iterator3 = layers,
													_isArray3 = Array.isArray(_iterator3),
													_i3 = 0,
													_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
												;

											) {
												var _ref3;

												if (_isArray3) {
													if (_i3 >= _iterator3.length) break;
													_ref3 = _iterator3[_i3++];
												} else {
													_i3 = _iterator3.next();
													if (_i3.done) break;
													_ref3 = _i3.value;
												}

												var l = _ref3;

												var sl = new _SheetCssLayer2.default(
													_this.visual,
													_block,
													_extends({}, _this.props, { pageNumber: n })
												);
												_w.layers.push(sl);
												sl.set(l.css, l.html, l.js);
											}
											setTimeout(function () {
												if (!_this.hidden && ~_this.getActives().indexOf(n)) {
													_w.layers.forEach(function (l) {
														return l.show();
													});
												}
											}, 10);
										}
										_w.state = "ready";
									};
									if (_this.wrappers && (n === 0 || _this.wrappers[0].state !== "loading")) {
										finish();
										if (n === 0) {
											for (
												var _iterator4 = _this.pendings,
													_isArray4 = Array.isArray(_iterator4),
													_i4 = 0,
													_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
												;

											) {
												var _ref4;

												if (_isArray4) {
													if (_i4 >= _iterator4.length) break;
													_ref4 = _iterator4[_i4++];
												} else {
													_i4 = _iterator4.next();
													if (_i4.done) break;
													_ref4 = _i4.value;
												}

												var f = _ref4;

												f();
											}
											_this.pendings = [];
										}
									} else {
										_this.pendings.push(finish);
									}
								});
							});
						}
					};

					for (
						var _iterator2 = this.getActives(),
							_isArray2 = Array.isArray(_iterator2),
							_i2 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						var _ret = _loop();

						if (_ret === "break") break;
					}
				};

				CssLayersManager.prototype.hide = function hide() {
					this.hidden = true;
					var wait = [];
					for (
						var _iterator5 = Object.values(this.wrappers),
							_isArray5 = Array.isArray(_iterator5),
							_i5 = 0,
							_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
						;

					) {
						var _ref5;

						if (_isArray5) {
							if (_i5 >= _iterator5.length) break;
							_ref5 = _iterator5[_i5++];
						} else {
							_i5 = _iterator5.next();
							if (_i5.done) break;
							_ref5 = _i5.value;
						}

						var _w2 = _ref5;

						_w2.layers.forEach(function (l) {
							return wait.push(l.hide());
						});
					}
					return Promise.all(wait);
				};

				return CssLayersManager;
			})();

			exports.default = CssLayersManager;

			/***/
		},
		/* 35 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(1);

			var _Cache = __webpack_require__(14);

			var _Cache2 = _interopRequireDefault(_Cache);

			var _LoadingAnimation = __webpack_require__(55);

			var _LoadingAnimation2 = _interopRequireDefault(_LoadingAnimation);

			var _ImageFactory = __webpack_require__(8);

			var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

			var _TextureAnimator = __webpack_require__(63);

			var _TextureAnimator2 = _interopRequireDefault(_TextureAnimator);

			var _GraphUtils = __webpack_require__(4);

			var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var PageManager = (function () {
				function PageManager(visual, book, p) {
					_classCallCheck(this, PageManager);

					this.visual = visual;
					this.book = book;
					this.pageQuery = "";
					this.p = p;
					this.pageCache = new _Cache2.default(p.cachedPages);
					this.resourcesCache = new _Cache2.default();

					this.canvases = [];
					for (var i = 0; i < 5; ++i) {
						var c = _GraphUtils2.default.createCanvas();
						this.canvases.push({
							c: c,
							ctx: c.getContext("2d", { willReadFrequently: true, desynchronized: false }),
						});
					}
					this.nextCanvas = 0;

					this.imageFactory = new _ImageFactory2.default(
						_extends({}, visual, {
							dispatchEvent: book.dispatchEvent.bind(book),
							renderCanvas: this.canvases[0].c,
							renderCanvasCtx: this.canvases[0].ctx,
						}),
						this.resourcesCache
					);

					this.loadings = [];
					this.renderQueue = [];
					this.predictedRequests = [];

					this.tmpMaterial = new _libs.THREE.MeshBasicMaterial();
					visual.addObject(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1e-3, 1e-3), this.tmpMaterial));

					this.loadingAnimation = true;
					this.loading = {};
					this.loading[p.cover.color] = this.createLoadingTexture(p.cover);
					if (p.page.color !== p.cover.color) {
						this.loading[p.page.color] = this.createLoadingTexture(p.page);
					}

					this.book.addEventListener("afterAnimation", this.loadPredictedPages.bind(this));

					this.turnOnEvents();

					visual.addRenderCallback(this.update.bind(this));

					Promise.resolve().then(this.updateRenderQueue.bind(this));
				}

				PageManager.prototype.createLoadingTexture = function createLoadingTexture(p) {
					var spriteTiles = 6,
						heightTexels = (p.height / p.width) * p.widthTexels,
						scale = Math.sqrt((4.5 * 210 * 4.5 * 297) / (p.widthTexels * heightTexels)),
						animation = new _LoadingAnimation2.default(
							scale * p.widthTexels,
							scale * heightTexels,
							p.color
						),
						animator = new _TextureAnimator2.default(
							animation.createSprite(spriteTiles),
							spriteTiles,
							1,
							spriteTiles,
							0.2
						);
					animation.dispose();
					return animator;
				};

				PageManager.prototype.dispose = function dispose() {
					this.turnOffEvents();
					for (
						var _iterator = Object.keys(this.loading),
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var color = _ref;

						this.loading[color].dispose();
					}
					delete this.loading;
					this.resourcesCache.dispose();
					this.pageCache.dispose();
					for (
						var _iterator2 = this.canvases,
							_isArray2 = Array.isArray(_iterator2),
							_i2 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var o = _ref2;

						o.c.height = o.c.width = 0;
					}
					delete this.canvases;
				};

				PageManager.prototype.isCover = function isCover(n) {
					return n < 2 || n >= 2 * (this.p.sheets + 1);
				};

				PageManager.prototype.isMobile = function isMobile() {
					return this.visual.isMobile();
				};

				PageManager.prototype.getPageState = function getPageState(n) {
					var object = this.pageCache.get(n);
					return object ? object.state : undefined;
				};

				PageManager.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
					this.loadingAnimation = enable;
					for (
						var _iterator3 = this.loadings,
							_isArray3 = Array.isArray(_iterator3),
							_i3 = 0,
							_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
						;

					) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var o = _ref3;

						this.setupMaterial(o);
					}
				};

				PageManager.prototype.update = function update(dt) {
					if (this.loadingAnimation) {
						var loading = {};
						for (
							var _iterator4 = this.loadings,
								_isArray4 = Array.isArray(_iterator4),
								_i4 = 0,
								_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
							;

						) {
							var _ref4;

							if (_isArray4) {
								if (_i4 >= _iterator4.length) break;
								_ref4 = _iterator4[_i4++];
							} else {
								_i4 = _iterator4.next();
								if (_i4.done) break;
								_ref4 = _i4.value;
							}

							var o = _ref4;

							if (o.isActive()) {
								loading[o.color] = true;
							}
						}
						for (
							var _iterator5 = Object.keys(loading),
								_isArray5 = Array.isArray(_iterator5),
								_i5 = 0,
								_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
							;

						) {
							var _ref5;

							if (_isArray5) {
								if (_i5 >= _iterator5.length) break;
								_ref5 = _iterator5[_i5++];
							} else {
								_i5 = _iterator5.next();
								if (_i5.done) break;
								_ref5 = _i5.value;
							}

							var color = _ref5;

							this.loading[color].update(dt);
							this.book.updateThree();
						}
					}
				};

				PageManager.prototype.removeFromLoadings = function removeFromLoadings(o) {
					var i = this.loadings.indexOf(o);
					if (~i) {
						this.loadings.splice(i, 1);
					}
				};

				PageManager.prototype.removeFromRenderQueue = function removeFromRenderQueue(o) {
					var i = this.renderQueue.indexOf(o);
					if (~i) {
						this.renderQueue.splice(i, 1);
					}
				};

				PageManager.prototype.refreshPageQuery = function refreshPageQuery(n) {
					var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

					this.pageQuery = query;
					var object = this.pageCache.get(n);
					if (object && object.wrapper && object.wrapper.setQuery) {
						if (!this.pageCache.remove(n)) {
							object.wrapper.setQuery(query);
							this.pushInRenderQueue(object);
						}
					}
				};

				PageManager.prototype.refreshZoom = function refreshZoom() {
					var _this = this;

					if (this.p.autoResolution.enabled) {
						if (this.rendering && this.rendering.wrapper) {
							this.rendering.wrapper.cancelRender();
						}
						var es = [];
						this.pageCache.forEach(function (e) {
							es.push(e);
						});
						es.forEach(function (e) {
							var object = e[1];
							if (object && object.wrapper) {
								if (!_this.pageCache.remove(e[0])) {
									_this.pushInRenderQueue(object);
								}
							}
						});
					}
				};

				PageManager.prototype.getLayers = function getLayers(n, clb) {
					var _this2 = this;

					var cssLayersLoader = this.p.cssLayersLoader
						? this.p.cssLayersLoader
						: function (n, f) {
								return f([]);
						  };
					cssLayersLoader(n, function (layers) {
						var object = _this2.pageCache.get(n);
						if (object) {
							(object.wrapper.getCSSLayer && _this2.p.highlightLinks
								? object.wrapper.getCSSLayer()
								: Promise.resolve()
							).then(function (l) {
								if (l || layers[0]) {
									l = l || {};
									layers[0] = layers[0] || {};
									layers[0] = {
										html: (l.html || "") + (layers[0].html || ""),
										css: (l.css || "") + (layers[0].css || ""),
										js: layers[0].js,
									};
								}
								if (object.state !== "active") {
									object.pendings.push({ clb: clb, args: [layers] });
								} else {
									clb(layers);
								}
							});
						}
					});
				};

				PageManager.prototype.resolvePendings = function resolvePendings(pendings) {
					for (
						var _iterator6 = pendings,
							_isArray6 = Array.isArray(_iterator6),
							_i6 = 0,
							_iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();
						;

					) {
						var _ref6;

						if (_isArray6) {
							if (_i6 >= _iterator6.length) break;
							_ref6 = _iterator6[_i6++];
						} else {
							_i6 = _iterator6.next();
							if (_i6.done) break;
							_ref6 = _i6.value;
						}

						var p = _ref6;

						try {
							p.clb.apply(p, p.args);
						} catch (e) {
							console.error(e);
						}
					}
					pendings.splice(0, pendings.length);
				};

				PageManager.prototype.rtlPageN = function rtlPageN(n) {
					return this.p.rtl ? this.book.getBookPages() - 1 - n : n;
				};

				PageManager.prototype.load = function load(material, n) {
					var _this3 = this;

					var pi =
							this.rtlPageN(n) < this.book.getPages()
								? this.p.pageCallback(this.rtlPageN(n))
								: { type: "blank" },
						p = this.isCover(n) ? this.p.cover : this.p.page;
					var o = {
						n: n,
						texture: new _libs.THREE.Texture(),
						wrapper: null,
						state: "loading",
						locked: function locked(n) {
							return o.state === "loading" || o.state === "rendering" || _this3.book.isActivePage(n);
						},
						color: p.color,
						isActive: function isActive() {
							return _this3.book.isActivePage(n);
						},
						isTop: function isTop() {
							return ~_this3.book.getTopPages().indexOf(n);
						},
						dispose: function dispose() {
							_this3.removeFromLoadings(o);
							_this3.removeFromRenderQueue(o);
							if (o.wrapper && o.wrapper.dispose) {
								o.wrapper.dispose();
							}
							o.texture.dispose();
							delete o.texture;
							delete o.wrapper;
						},
						pendings: [],
					};
					o.texture.minFilter = _libs.THREE.LinearFilter;
					this.loadings.push(o);
					this.setMaterial(o, material);

					Promise.resolve().then(function () {
						if (o.texture) {
							o.widthTexels = pi.widthTexels || p.widthTexels;
							o.heightTexels = (p.height / p.width) * p.widthTexels;
							var res = _this3.calcResolution(o);
							o.wrapper = _this3.imageFactory.build(
								pi,
								pi.number === undefined ? _this3.rtlPageN(n) : pi.number,
								res.width,
								res.height,
								p.color,
								_this3.p.injector
							);
							if (o.wrapper.setQuery) {
								o.wrapper.setQuery(_this3.pageQuery);
							}
							o.simulate = pi.interactive
								? (
										o.wrapper.simulate ||
										function () {
											return undefined;
										}
								  ).bind(o.wrapper)
								: undefined;
							o.wrapper.onLoad = function () {
								o.state = "loaded";
								_this3.pushInRenderQueue(o);
								// this.book.dispatchEvent({
								//   type: 'loadedPage',
								//   page: n
								// });
							};
							o.wrapper.onChange = function (image, canceled) {
								if (canceled) {
									if (o.state !== "queuedForRender") {
										o.state = "loaded";
										if (o.wrapper) {
											_this3.pushInRenderQueue(_this3.rendering);
										}
									}
									delete _this3.rendering;
								} else {
									if (o.texture) {
										_this3.removeFromLoadings(o);
										if (o.material) {
											o.material.map = o.texture;
											o.material.color = new _libs.THREE.Color(0xffffff);
											o.material.needsUpdate = true;
										}
										o.texture.image = image;
										o.texture.needsUpdate = true;
										o.texture.onUpdate = function () {
											if (o.texture) {
												o.texture.onUpdate = null;
											}
											_this3.tmpMaterial.map = null;
											_this3.tmpMaterial.needsUpdate = true;
											// setTimeout(()=>{
											if (o.state !== "queuedForRender") {
												o.state = "active";
												_this3.resolvePendings(o.pendings);
											}
											delete _this3.rendering;
											_this3.book.dispatchEvent({
												type: "endRendering",
												page: o.n,
											});
											//this.updateRenderQueue();
											// }, 100);
										};
										_this3.tmpMaterial.map = o.texture;
										_this3.tmpMaterial.needsUpdate = true;
									}
								}
							};
						}
					});
					// this.book.dispatchEvent({
					//   type: 'loadPage',
					//   page: n
					// });
					return this.pageCache.put(n, o);
				};

				PageManager.prototype.isSinglePage = function isSinglePage(o) {
					return this.p.singlePage /* || !o.n || o.n===this.book.getBookPages()-1*/;
				};

				PageManager.prototype.calcResolution = function calcResolution(o) {
					var res = void 0;
					if (this.p.autoResolution.enabled) {
						var k =
							this.p.autoResolution.coefficient *
							this.p.zoom *
							Math.sqrt(this.visual.wnd.devicePixelRatio || 1) *
							Math.min(
								((this.isSinglePage(o) ? 1 : 0.5) * this.visual.width()) / o.widthTexels,
								this.visual.height() / o.heightTexels
							);
						res = {
							width: k * o.widthTexels,
							height: k * o.heightTexels,
						};
						var minRes = this.p.autoResolution.min,
							maxRes = this.p.autoResolution.max;
						if (res.width < minRes) {
							res = {
								width: minRes,
								height: (minRes * o.heightTexels) / o.widthTexels,
							};
						}
						if (res.height < minRes) {
							res = {
								width: (minRes * o.widthTexels) / o.heightTexels,
								height: minRes,
							};
						}
						if (res.width > maxRes) {
							res = {
								width: maxRes,
								height: (maxRes * o.heightTexels) / o.widthTexels,
							};
						}
						if (res.height > maxRes) {
							res = {
								width: (maxRes * o.widthTexels) / o.heightTexels,
								height: maxRes,
							};
						}
					} else {
						res = {
							width: o.widthTexels,
							height: o.heightTexels,
						};
					}
					return res;
				};

				PageManager.prototype.pushInRenderQueue = function pushInRenderQueue(o) {
					if (o.state !== "queuedForRender" && o.state !== "loading") {
						o.state = "queuedForRender";
						this.renderQueue.push(o);
						// this.updateRenderQueue();
					}
				};

				PageManager.prototype.updateRenderQueue = function updateRenderQueue() {
					if (this.canvases) {
						var p = this.p;
						if (!this.rendering) {
							if (
								p.renderWhileFlipping ||
								(!this.book.isProcessing() && !this.visual.getOrbit().isMoving())
							) {
								var active = void 0,
									top = void 0;
								for (
									var _iterator7 = this.renderQueue,
										_isArray7 = Array.isArray(_iterator7),
										_i7 = 0,
										_iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();
									;

								) {
									var _ref7;

									if (_isArray7) {
										if (_i7 >= _iterator7.length) break;
										_ref7 = _iterator7[_i7++];
									} else {
										_i7 = _iterator7.next();
										if (_i7.done) break;
										_ref7 = _i7.value;
									}

									var _o2 = _ref7;

									if (!active && _o2.isActive()) {
										active = _o2;
									}
									if (_o2.isTop()) {
										top = _o2;
										break;
									}
								}
								this.rendering = top || active;

								if (
									(this.isMobile() && p.renderInactivePagesOnMobile) ||
									(!this.isMobile() && p.renderInactivePages)
								) {
									if (!this.rendering) {
										var ud = this.book.getUserDirection(),
											near = {};
										for (
											var _iterator8 = this.renderQueue,
												_isArray8 = Array.isArray(_iterator8),
												_i8 = 0,
												_iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();
											;

										) {
											var _ref8;

											if (_isArray8) {
												if (_i8 >= _iterator8.length) break;
												_ref8 = _iterator8[_i8++];
											} else {
												_i8 = _iterator8.next();
												if (_i8.done) break;
												_ref8 = _i8.value;
											}

											var o = _ref8;

											var id = ud.lastTopPage < o.n;
											if (
												!near[id] ||
												Math.abs(near[id].n - ud.lastTopPage) > Math.abs(o.n - ud.lastTopPage)
											) {
												near[id] = o;
											}
											this.rendering = near[ud.direction === 1] || near[ud.direction !== 1];
										}
									}
								}
								if (this.rendering) {
									if (this.rendering.wrapper && this.rendering.wrapper.startRender) {
										this.removeFromRenderQueue(this.rendering);
										this.rendering.state = "rendering";
										var _o = this.canvases[this.nextCanvas];
										this.nextCanvas = (this.nextCanvas + 1) % this.canvases.length;
										this.rendering.wrapper.setRenderCanvas(_o.c, _o.ctx);
										this.rendering.wrapper.setResolution(this.calcResolution(this.rendering));
										this.rendering.wrapper.startRender();
										this.book.dispatchEvent({
											type: "startRendering",
											page: _o.n,
										});
									} else {
										delete this.rendering;
									}
								}
							}
						} else {
							if (this.rendering.wrapper) {
								this.rendering.wrapper.setRenderPause(
									!p.renderWhileFlipping &&
										(this.book.isProcessing() || this.visual.getOrbit().isMoving())
								);
							}
							this.book.updateThree();
						}
						setTimeout(this.updateRenderQueue.bind(this), 100);
					}
				};

				PageManager.prototype.turnOnEvents = function turnOnEvents() {
					this.transferEvents = true;
				};

				PageManager.prototype.turnOffEvents = function turnOffEvents() {
					var mouseup = _libs.$.Event("mouseup"),
						mouseout = _libs.$.Event("mouseout");
					this.pageCache.forEach(function (ent) {
						var object = ent[1];
						if (object.simulate) {
							object.simulate(mouseup, undefined, 0, 0);
							object.simulate(mouseout, undefined, 0, 0);
						}
					});
					this.transferEvents = false;
				};

				PageManager.prototype.transferEventToTexture = function transferEventToTexture(n, e, data) {
					if (this.transferEvents) {
						var toObject = this.getOrLoadTextureObject(undefined, n);
						if (toObject.wrapper) {
							var uv = data.uv,
								toDoc = toObject.wrapper.getSimulatedDoc();
							this.pageCache.forEach(function (ent) {
								var object = ent[1];
								if (object.simulate) {
									object.simulate(e, toDoc, uv.x, uv.y);
								}
							});
						}
					}
				};

				PageManager.prototype.loadPredictedPages = function loadPredictedPages() {
					var _this4 = this;

					Promise.resolve().then(function () {
						var ud = _this4.book.getUserDirection();
						_this4.predictedRequests = [];
						for (
							var i = 0, p = ud.lastTopPage + ud.direction;
							i < _this4.p.preloadPages;
							++i, p += ud.direction
						) {
							_this4.predictedRequests.push(p);
						}
						for (
							var _iterator9 = _this4.predictedRequests,
								_isArray9 = Array.isArray(_iterator9),
								_i9 = 0,
								_iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();
							;

						) {
							var _ref9;

							if (_isArray9) {
								if (_i9 >= _iterator9.length) break;
								_ref9 = _iterator9[_i9++];
							} else {
								_i9 = _iterator9.next();
								if (_i9.done) break;
								_ref9 = _i9.value;
							}

							var _p = _ref9;

							if (_p >= 0 && _p < _this4.book.getBookPages() && !_this4.pageCache.get(_p)) {
								_this4.load(undefined, _p);
							}
						}
					});
				};

				PageManager.prototype.setMaterial = function setMaterial(o, material) {
					this.pageCache.forEach(function (e) {
						var ob = e[1];
						if (o !== ob && ob.material === material) {
							delete ob.material;
						}
					});
					if (material && material !== o.material) {
						o.material = material;
						this.setupMaterial(o);
					}
				};

				PageManager.prototype.setupMaterial = function setupMaterial(o) {
					o.material.map = o.texture.image
						? o.texture
						: this.loadingAnimation
						? this.loading[o.color].texture
						: null;
					if (!o.material.map) {
						o.material.color = new _libs.THREE.Color(o.color);
					}
					o.material.needsUpdate = true;
				};

				PageManager.prototype.getOrLoadTextureObject = function getOrLoadTextureObject(material, n) {
					var object = this.pageCache.get(n);
					if (!object) {
						object = this.load(material, n);
					} else {
						this.setMaterial(object, material);
					}

					return object;
				};

				PageManager.prototype.setTexture = function setTexture(material, n) {
					this.getOrLoadTextureObject(material, n);
				};

				return PageManager;
			})();

			exports.default = PageManager;

			/***/
		},
		/* 36 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _BookPropsBuilder2 = __webpack_require__(9);

			var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

			var _Pdf = __webpack_require__(19);

			var _Pdf2 = _interopRequireDefault(_Pdf);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var PdfBookPropsBuilder = (function (_BookPropsBuilder) {
				_inherits(PdfBookPropsBuilder, _BookPropsBuilder);

				function PdfBookPropsBuilder(src, onReady, style, pdfOpenOptions) {
					_classCallCheck(this, PdfBookPropsBuilder);

					var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

					_this.pdf = new _Pdf2.default(src, undefined, pdfOpenOptions);
					_this.pageDescription = {
						type: "pdf",
						src: _this.pdf,
						interactive: true,
					};
					_this.binds = {
						pageCallback: _this.pageCallback.bind(_this),
					};
					_this.pdf.getHandler(_this.init.bind(_this));
					return _this;
				}

				PdfBookPropsBuilder.prototype.dispose = function dispose() {
					this.pdf.dispose();
					_BookPropsBuilder.prototype.dispose.call(this);
				};

				PdfBookPropsBuilder.prototype.init = function init(handler) {
					var _this2 = this;

					var pages = this.pdf.getPagesNum();
					this.pages = pages;
					this.calcSheets(pages);
					if (pages > 0) {
						handler
							.getPage(1)
							.then(function (page) {
								var viewport = page.getViewport({ scale: 1 }),
									size = { width: viewport.width, height: viewport.height };
								_this2.calcProps(size.width, size.height);
								_this2.ready();
							})
							.catch(function (e) {
								console.error(e);
							});
					} else {
						this.props = this.defaults;
						this.ready();
					}
				};

				PdfBookPropsBuilder.prototype.pageCallback = function pageCallback(n) {
					return this.pageDescription;
				};

				return PdfBookPropsBuilder;
			})(_BookPropsBuilder3.default);

			exports.default = PdfBookPropsBuilder;

			/***/
		},
		/* 37 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(1);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var PdfLinksHandler = (function () {
				function PdfLinksHandler(pdf, ctrl, element) {
					_classCallCheck(this, PdfLinksHandler);

					this.pdf = pdf;
					this.ctrl = ctrl;
					this.element = (0, _libs.$)(element);
					this.cursors = [];
				}

				PdfLinksHandler.prototype.dispose = function dispose() {};

				PdfLinksHandler.prototype.setHandler = function setHandler(handler) {
					this.handler = handler;
				};

				PdfLinksHandler.prototype.defaultHandler = function defaultHandler(type, destination) {
					if (type === "internal") {
						this.ctrl.goToPage(destination);
					} else if (type === "external") {
						window.open(destination, "_blank");
					}
				};

				PdfLinksHandler.prototype.callHandlers = function callHandlers(type, destination) {
					if (!this.handler || !this.handler(type, destination)) {
						this.defaultHandler(type, destination);
					}
				};

				PdfLinksHandler.prototype.handleEvent = function handleEvent(data) {
					var _this = this;

					var e = data.event,
						anno = data.annotation;
					switch (e.type) {
						case "mouseover": {
							this.cursors.push(this.element.css("cursor"));
							this.element.css("cursor", "pointer");
							break;
						}
						case "mouseout": {
							this.element.css("cursor", this.cursors.pop() || "");
							break;
						}
						case "touchtap":
						case "click": {
							if (anno.url) {
								this.callHandlers("external", anno.url);
							} else if (anno.dest) {
								this.pdf.getDestination(anno.dest).then(function (number) {
									return _this.callHandlers("internal", number);
								});
							}
							break;
						}
					}
				};

				return PdfLinksHandler;
			})();

			exports.default = PdfLinksHandler;

			/***/
		},
		/* 38 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _Finder = __webpack_require__(17);

			var _Finder2 = _interopRequireDefault(_Finder);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var SearchEngine = (function () {
				function SearchEngine(pageCallback, pages) {
					_classCallCheck(this, SearchEngine);

					this.pageCallback = pageCallback;
					this.pages = pages;
					this.results = [];
				}

				SearchEngine.prototype.setQuery = function setQuery(query) {
					this.query = query;
					this.update = true;
					this.process();
				};

				SearchEngine.prototype.process = function process() {
					var _this = this;

					if (this.update) {
						var results = this.results;
						this.results = [];
						if (this.onPageHitsChanged) {
							for (
								var _iterator = results,
									_isArray = Array.isArray(_iterator),
									_i = 0,
									_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
								;

							) {
								var _ref;

								if (_isArray) {
									if (_i >= _iterator.length) break;
									_ref = _iterator[_i++];
								} else {
									_i = _iterator.next();
									if (_i.done) break;
									_ref = _i.value;
								}

								var res = _ref;

								this.onPageHitsChanged(undefined, "");
							}
						}
						this.update = false;
						this.page = 0;
						this.stamp = Date.now();
						if (this.query.length > 1) {
							this.process();
						}
					} else {
						if (this.page < this.pages) {
							var stamp = this.stamp;
							this.find(this.pageCallback(this.page)).then(function (contexts) {
								if (stamp === _this.stamp) {
									if (contexts.length) {
										_this.results.push({
											page: _this.page,
											contexts: contexts,
										});
									}
									if (_this.onPageHitsChanged) {
										_this.onPageHitsChanged(_this.page, _this.query);
									}
									++_this.page;
									_this.process();
								}
							});
						}
					}
				};

				SearchEngine.prototype.find = function find(pi) {
					var _this2 = this;

					var next = void 0;
					if (pi.type === "pdf") {
						next = new Promise(function (resolve) {
							pi.src.getHandler(function () {
								var n = pi.number === undefined ? _this2.page : pi.number;
								if (pi.src.getPageType(n) === "right") {
									resolve([]);
								} else {
									pi.src
										.getPage(n)
										.then(function (page) {
											page.getTextContent().then(function (textContent) {
												resolve(
													new _Finder2.default(
														textContent.items.map(function (item) {
															return item.str;
														}),
														_this2.query,
														{ hits: false }
													).getContexts()
												);
											});
										})
										.catch(function () {
											return resolve([]);
										});
								}
							});
						});
					} else {
						next = Promise.resolve([]);
					}
					return next;
				};

				return SearchEngine;
			})();

			exports.default = SearchEngine;

			/***/
		},
		/* 39 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(1);

			var _WidgetController2 = __webpack_require__(22);

			var _WidgetController3 = _interopRequireDefault(_WidgetController2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var ShareController = (function (_WidgetController) {
				_inherits(ShareController, _WidgetController);

				function ShareController(view, bookCtrl) {
					var linkBuilder =
						arguments.length > 2 && arguments[2] !== undefined
							? arguments[2]
							: function (page) {
									return page;
							  };

					_classCallCheck(this, ShareController);

					var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view, "widShare"));

					_this.bookCtrl = bookCtrl;
					_this.linkBuilder = linkBuilder;
					bookCtrl.addEventListener("endFlip", _this.updateView.bind(_this));
					return _this;
				}

				ShareController.prototype.cmdCloseShare = function cmdCloseShare() {
					this.hide();
				};

				ShareController.prototype.clickLink = function clickLink(u) {
					var blank = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

					var a = (0, _libs.$)('<a href="' + u + '"' + (blank ? ' target="_blank"' : "") + "></a>").appendTo(
						this.view.getContainer()
					);
					a[0].click();
					a.remove();
				};

				ShareController.prototype.cmdFacebook = function cmdFacebook() {
					this.clickLink(
						"https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(this.getLink())
					);
				};

				ShareController.prototype.cmdTwitter = function cmdTwitter() {
					this.clickLink("http://twitter.com/share?url=" + encodeURIComponent(this.getLink()));
				};

				ShareController.prototype.cmdEmail = function cmdEmail() {
					this.clickLink(
						"mailto:?subject=" +
							(0, _libs.tr)("We wanted you to see this book") +
							"&body=" +
							(0, _libs.tr)("Check out this site") +
							" " +
							encodeURIComponent(this.getLink()),
						false
					);
				};

				ShareController.prototype.getLink = function getLink() {
					return this.linkBuilder(this.bookCtrl.getPageForGUI());
				};

				ShareController.prototype.updateView = function updateView() {
					if (this.view) {
						var _arr = ["cmdCloseShare", "cmdFacebook", "cmdTwitter", "cmdEmail"];

						for (var _i = 0; _i < _arr.length; _i++) {
							var cmd = _arr[_i];
							this.view.setState(cmd, {
								enable: true,
								visible: true,
								active: false,
							});
						}
						this.view.setState("txtShareLink", {
							value: this.getLink(),
							visible: true,
						});
						_WidgetController.prototype.updateView.call(this);
					}
				};

				return ShareController;
			})(_WidgetController3.default);

			exports.default = ShareController;

			/***/
		},
		/* 40 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _CSSLayer = __webpack_require__(13);

			var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var SheetCssLayer = (function () {
				function SheetCssLayer(visual, block, props) {
					_classCallCheck(this, SheetCssLayer);

					this.visual = visual;
					var size = block.getTopSize();
					this.layer = new _CSSLayer2.default(size.width, size.height, props);

					this.update(block);
					this.visual.addCssObject(this.layer);
				}

				SheetCssLayer.prototype.dispose = function dispose() {
					this.layer.dispose();
					this.visual.removeCssObject(this.layer);
				};

				SheetCssLayer.prototype.isHidden = function isHidden() {
					return this.layer.isHidden();
				};

				SheetCssLayer.prototype.hide = function hide() {
					return this.layer.hide();
				};

				SheetCssLayer.prototype.show = function show() {
					return this.layer.show();
				};

				SheetCssLayer.prototype.set = function set(css, html, js) {
					this.layer.setData(css, html, js);
				};

				SheetCssLayer.prototype.update = function update(block) {
					this.block = block;
					var size = block.getTopSize();
					this.layer.setSize(size.width, size.height);
					this.block.getTopWorldRotation(this.layer.rotation);
					this.block.getTopWorldPosition(this.layer.position);
				};

				return SheetCssLayer;
			})();

			exports.default = SheetCssLayer;

			/***/
		},
		/* 41 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _MathUtils = __webpack_require__(5);

			var _MathUtils2 = _interopRequireDefault(_MathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var SheetPhysics = (function () {
				SheetPhysics.targetForceClb = function targetForceClb(o, a, v, ch) {
					var l = a * this.r;
					return 100 * this.m * this.g * (2 / (1 + Math.exp(10 * (l - this.tl))) - 1) - this.m * 40 * v;
				};

				SheetPhysics.hoverCornerForceClb = function hoverCornerForceClb(o, v, l, ch) {
					return 5;
				};

				SheetPhysics.prototype.getTargetForceClb = function getTargetForceClb(mass, targetAngle) {
					return SheetPhysics.targetForceClb.bind({
						g: this.p.gravity,
						m: mass,
						tl: targetAngle * this.p.r,
						r: this.p.r,
					});
				};

				SheetPhysics.dragForceClb = function dragForceClb(o, a, v, ch) {
					return o.flbt * o.m * (10 * o.g * ch - (50 * v) / (1 + Math.exp(3.5 * Math.abs(ch))));
				};

				SheetPhysics.dragCornerForceClb = function dragCornerForceClb(o, a, v, ch) {
					return 15 * (2 / (1 + Math.exp(10 * (a - this.ta) * o.r)) - 1);
				};

				SheetPhysics.getDragCornerForceClb = function getDragCornerForceClb(targetAngle) {
					return SheetPhysics.dragCornerForceClb.bind({
						ta: targetAngle,
					});
				};

				function SheetPhysics() {
					var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
					var gravity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
					var cornerDeviation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.15;
					var fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 240;

					_classCallCheck(this, SheetPhysics);

					this.p = {
						r: r,
						cornerDeviation: cornerDeviation,
						l: Math.PI * r,
						startDt: 1 / fps,
						gravity: gravity,
						margin: 0.002 * r,
						infM: 1e4,
						attempts: 16,
						maxIterations: 100,
					};
					this.os = [];
				}

				SheetPhysics.prototype.dispose = function dispose() {
					this.os = [];
				};

				SheetPhysics.prototype.getSize = function getSize() {
					return this.os.length;
				};

				SheetPhysics.prototype.addObject = function addObject(
					mass,
					angle,
					velocity,
					flexibility,
					cornerHeight,
					simulateClb,
					removeClb
				) {
					var forceClb =
						arguments.length > 7 && arguments[7] !== undefined
							? arguments[7]
							: function () {
									return 0;
							  };
					var cornerForceClb =
						arguments.length > 8 && arguments[8] !== undefined
							? arguments[8]
							: function () {
									return 0;
							  };

					var no = {
						id: _MathUtils2.default.getUnique(),
						m: mass,
						v: velocity,
						l: angle * this.p.r,
						f: forceClb,
						cf: cornerForceClb,
						ch: cornerHeight,
						flbt: flexibility,
						simulateClb: simulateClb,
						removeClb: removeClb,
					};
					var i = this.os.findIndex(function (o) {
						return no.l <= o.l;
					});
					i = ~i ? i : this.os.length;
					this.os.splice(i, 0, no);
					return no.id;
				};

				SheetPhysics.prototype.getParametrMap = function getParametrMap(name) {
					var map = {
						mass: "m",
						velocity: "v",
						flexibility: "flbt",
						cornerHeight: "ch",
						simulateClb: "simulateClb",
						removeClb: "removeClb",
						forceClb: "f",
						cornerForceClb: "cf",
					};
					return map[name];
				};

				SheetPhysics.prototype.setParametr = function setParametr(id, name, value) {
					var o = this.os.find(function (o) {
						return o.id === id;
					});
					if (name === "angle") {
						o.l = value * this.p.r;
					} else {
						o[this.getParametrMap(name)] = value;
					}
				};

				SheetPhysics.prototype.getParametr = function getParametr(id, name) {
					var o = this.os.find(function (o) {
						return o.id === id;
					});
					var value = void 0;
					if (name === "angle") {
						value = o.l / this.p.r;
					} else {
						value = o[this.getParametrMap(name)];
					}
					return value;
				};

				SheetPhysics.prototype.simulate = function simulate(T) {
					var t = 0,
						dt = this.p.startDt,
						attempt = 0,
						it = 0;

					while (t < T && it < this.p.maxIterations) {
						if (dt > T - t) {
							dt = T - t;
						}
						var nos = this.integrate(this.os, dt),
							ci = this.findCollisions(nos);
						if (ci.num > 1 && attempt < this.p.attempts) {
							dt /= 2;
							++attempt;
						} else {
							if (ci.num === 1) {
								var scos = this.solveCollision(nos[ci.last - 1], nos[ci.last]);
								nos[ci.last - 1] = scos[0];
								nos[ci.last] = scos[1];
							} else if (ci.num > 1) {
								var gs = [];
								var last = -2;
								for (
									var _iterator = ci.all,
										_isArray = Array.isArray(_iterator),
										_i = 0,
										_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
									;

								) {
									var _ref;

									if (_isArray) {
										if (_i >= _iterator.length) break;
										_ref = _iterator[_i++];
									} else {
										_i = _iterator.next();
										if (_i.done) break;
										_ref = _i.value;
									}

									var i = _ref;

									if (i - last > 1) {
										gs.push([]);
									}
									gs[gs.length - 1].push(i);
									last = i;
								}
								for (
									var _iterator2 = gs,
										_isArray2 = Array.isArray(_iterator2),
										_i2 = 0,
										_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
									;

								) {
									var _ref2;

									if (_isArray2) {
										if (_i2 >= _iterator2.length) break;
										_ref2 = _iterator2[_i2++];
									} else {
										_i2 = _iterator2.next();
										if (_i2.done) break;
										_ref2 = _i2.value;
									}

									var g = _ref2;

									var sg = void 0,
										i0 = void 0;
									if (nos[g[0]].l > (Math.PI / 2) * this.p.r) {
										sg = -1;
										i0 = g[g.length - 1];
									} else {
										sg = 1;
										i0 = g[0];
									}
									for (var _i3 = i0; _i3 < nos.length && _i3 > -1; _i3 += sg) {
										var o = nos[_i3 + sg];
										if (o && sg * (o.l - nos[_i3].l) <= this.p.margin) {
											o.l = nos[_i3].l + sg * 2 * this.p.margin;
											if (o.l > this.p.l || o.l < 0) {
												o.l = o.l > this.p.l ? this.p.l : 0;
												o.ch = 0;
												o.v = 0;
												console.error("Bad collision");
											}
										} else {
											break;
										}
									}
								}
							}
							this.os = nos;
							this.findAndSolveCornerCollisions();
							t += dt;
							dt = this.p.startDt;
							attempt = 0;
						}
						++it;
					}

					this.removeStatics();
				};

				SheetPhysics.prototype.removeStatics = function removeStatics() {
					var nos = [],
						notify = [[], []];
					for (
						var _iterator3 = this.os,
							_isArray3 = Array.isArray(_iterator3),
							_i4 = 0,
							_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
						;

					) {
						var _ref3;

						if (_isArray3) {
							if (_i4 >= _iterator3.length) break;
							_ref3 = _iterator3[_i4++];
						} else {
							_i4 = _iterator3.next();
							if (_i4.done) break;
							_ref3 = _i4.value;
						}

						var o = _ref3;

						if (o.simulateClb) {
							o.simulateClb(o.l / this.p.r, o.ch);
						}
						if ((o.l === this.p.l || o.l === 0) && o.v === 0) {
							if (o.removeClb !== undefined) {
								notify[(o.l !== this.p.l) + 0].push(o);
							}
						} else {
							nos.push(o);
						}
					}
					this.os = nos;
					for (
						var _iterator4 = notify[0].reverse(),
							_isArray4 = Array.isArray(_iterator4),
							_i5 = 0,
							_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
						;

					) {
						var _ref4;

						if (_isArray4) {
							if (_i5 >= _iterator4.length) break;
							_ref4 = _iterator4[_i5++];
						} else {
							_i5 = _iterator4.next();
							if (_i5.done) break;
							_ref4 = _i5.value;
						}

						var _o = _ref4;

						_o.removeClb(Math.PI, _o.ch);
					}
					for (
						var _iterator5 = notify[1],
							_isArray5 = Array.isArray(_iterator5),
							_i6 = 0,
							_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
						;

					) {
						var _ref5;

						if (_isArray5) {
							if (_i6 >= _iterator5.length) break;
							_ref5 = _iterator5[_i6++];
						} else {
							_i6 = _iterator5.next();
							if (_i6.done) break;
							_ref5 = _i6.value;
						}

						var _o2 = _ref5;

						_o2.removeClb(0, _o2.ch);
					}
				};

				SheetPhysics.prototype.findAndSolveCornerCollisions = function findAndSolveCornerCollisions() {
					if (this.os.length) {
						var os = [
							_extends({}, this.os[0], {
								l: 0,
								m: this.p.infM,
								ch: 0,
							}),
						].concat(this.os, [
							_extends({}, this.os[0], {
								l: 1.05 * this.p.l,
								m: this.p.infM,
								ch: 0,
							}),
						]);

						for (var i = 1; i < os.length; ++i) {
							var a = os[i - 1],
								b = os[i],
								al = a.l + this.p.cornerDeviation * a.ch * this.p.r,
								bl = b.l + this.p.cornerDeviation * b.ch * this.p.r;
							if (1.05 * al > bl && a.ch > b.ch) {
								var dCh = a.ch - b.ch,
									dv = a.m / a.flbt + b.m / b.flbt,
									ka = a.m / a.flbt / dv,
									kb = b.m / b.flbt / dv;
								a.ch = a.ch - kb * dCh;
								b.ch = b.ch + ka * dCh;
							}
						}
					}
				};

				SheetPhysics.prototype.solveCollision = function solveCollision(a, b) {
					var mm = b.m + a.m,
						av = (-a.v * b.m + a.m * a.v + 2 * b.m * b.v) / mm,
						bv = (b.m * b.v - b.v * a.m + 2 * a.m * a.v) / mm;
					return [_extends({}, a, { v: av }), _extends({}, b, { v: bv })];
				};

				SheetPhysics.prototype.findCollisions = function findCollisions(os) {
					var ci = {
						num: 0,
						last: 0,
						all: [],
					};
					for (var i = 1; i < os.length && ci.num < 2; ++i) {
						if (os[i - 1].l > os[i].l || this.isCollision(os[i - 1], os[i])) {
							if (os[i - 1].l > os[i].l) {
								++ci.num;
							}
							++ci.num;
							ci.last = i;
							if (ci.all.indexOf(i - 1) === -1) {
								ci.all.push(i - 1);
							}
							if (ci.all.indexOf(i) === -1) {
								ci.all.push(i);
							}
						}
					}
					return ci;
				};

				SheetPhysics.prototype.isCollision = function isCollision(a, b) {
					return Math.abs(a.l - b.l) < this.p.margin && a.v > b.v;
				};

				SheetPhysics.prototype.integrate = function integrate(os, dt) {
					var nos = [];
					for (
						var _iterator6 = os,
							_isArray6 = Array.isArray(_iterator6),
							_i7 = 0,
							_iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();
						;

					) {
						var _ref6;

						if (_isArray6) {
							if (_i7 >= _iterator6.length) break;
							_ref6 = _iterator6[_i7++];
						} else {
							_i7 = _iterator6.next();
							if (_i7.done) break;
							_ref6 = _i7.value;
						}

						var o = _ref6;

						var vl = _MathUtils2.default.rk4(
							this.dy.bind({
								g: this.p.gravity,
								r: this.p.r,
								m: o.m,
								f: o.f,
								cf: o.cf,
								ch: o.ch,
								flbt: o.flbt,
							}),
							0,
							dt,
							[o.v, o.l, o.ch]
						);
						var no = _extends({}, o, {
							v: vl[0],
							l: vl[1],
							ch: vl[2],
						});
						if (no.l <= 0 || no.l >= this.p.l) {
							no.l = no.l <= 0 ? 0 : this.p.l;
							no.v = 0;
							no.ch = 0;
						}
						nos.push(no);
					}
					return nos;
				};

				SheetPhysics.prototype.dy = function dy(t, y) {
					var v = y[0],
						l = y[1],
						ch = y[2],
						alf = l / this.r,
						f = this.f(this, alf, v, ch),
						cf = this.cf(this, alf, v, ch),
						cosAlf = Math.cos(alf),
						brf = 6.65 * Math.abs((Math.sign(cosAlf) - Math.sign(v)) * v) * Math.pow(cosAlf, 5);
					return [
						-this.g * cosAlf + brf + f / this.m,
						v + 0.01 * (Math.random() - 0.5),
						this.flbt *
							((2 / (1 + Math.exp(-0.2 * cf)) - 1) * (1 - 2 / (1 + Math.exp(-5 * (Math.abs(ch) - 2)))) -
								ch),
					];
				};

				return SheetPhysics;
			})();

			exports.default = SheetPhysics;

			/***/
		},
		/* 42 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var SoundsEnviroment = (function () {
				function SoundsEnviroment() {
					var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

					_classCallCheck(this, SoundsEnviroment);

					template = typeof template === "function" ? template() : template;
					this.sounds = template.sounds || {};
					this.audio = {};
					if (this.sounds.startFlip) {
						this.audio.startFlip = new Audio(this.sounds.startFlip);
						this.audio.startFlip.volume = 0.5;
					}
					if (this.sounds.endFlip) {
						this.audio.endFlip = new Audio(this.sounds.endFlip);
						this.audio.endFlip.volume = 0.5;
					}
				}

				SoundsEnviroment.prototype.setEnabled = function setEnabled(enabled) {
					this.enabled = enabled;
				};

				SoundsEnviroment.prototype.togle = function togle() {
					this.enabled = !this.enabled;
				};

				SoundsEnviroment.prototype.dispose = function dispose() {
					delete this.audio.startFlip;
					delete this.audio.endFlip;
				};

				SoundsEnviroment.prototype.play = function play(player) {
					player.play().catch(function () {
						return undefined;
					});
				};

				SoundsEnviroment.prototype.startFlip = function startFlip() {
					if (this.enabled && this.audio.startFlip) {
						this.play(this.audio.startFlip);
					}
				};

				SoundsEnviroment.prototype.endFlip = function endFlip() {
					if (this.enabled && this.audio.startFlip) {
						this.audio.startFlip.pause();
						this.audio.startFlip.currentTime = 0;
					}
					if (this.enabled && this.audio.endFlip) {
						this.play(this.audio.endFlip);
					}
				};

				SoundsEnviroment.prototype.subscribeFlips = function subscribeFlips(emitter) {
					emitter.addEventListener("startFlip", this.startFlip.bind(this));
					emitter.addEventListener("endFlip", this.endFlip.bind(this));
				};

				return SoundsEnviroment;
			})();

			exports.default = SoundsEnviroment;

			/***/
		},
		/* 43 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _WidgetController2 = __webpack_require__(22);

			var _WidgetController3 = _interopRequireDefault(_WidgetController2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var TocController = (function (_WidgetController) {
				_inherits(TocController, _WidgetController);

				function TocController(view, bookCtrl) {
					_classCallCheck(this, TocController);

					var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view, "widFloatWnd"));

					_this.bookCtrl = bookCtrl;
					_this.tab = "none";
					return _this;
				}

				TocController.prototype.setThumbnails = function setThumbnails(thumbnails) {
					this.thumbnails = thumbnails;
					thumbnails.onNavigate = this.navigateThumbnails.bind(this);
					if (this.tab === "none") {
						this.tab = "thumbnails";
					}
					this.fireChange();
				};

				TocController.prototype.setSearch = function setSearch(search) {
					this.search = search;
					search.onNavigate = this.navigateSearch.bind(this);
					this.fireChange();
				};

				TocController.prototype.setBookmarks = function setBookmarks(bookmarks, pdf) {
					if (bookmarks.getSize()) {
						this.bookmarks = bookmarks;
						this.pdf = pdf;
						bookmarks.onNavigate = this.navigateBookmarks.bind(this);
						this.isBookmarks = true;
						this.fireChange();
					}
				};

				TocController.prototype.cmdBookmarks = function cmdBookmarks() {
					this.setActiveTab("bookmarks");
				};

				TocController.prototype.cmdThumbnails = function cmdThumbnails() {
					this.setActiveTab("thumbnails");
				};

				TocController.prototype.cmdSearch = function cmdSearch() {
					this.setActiveTab("search");
				};

				TocController.prototype.setActiveTab = function setActiveTab(tab) {
					if (this[tab]) {
						this.tab = tab;
						this.fireChange();
					}
				};

				TocController.prototype.cmdCloseToc = function cmdCloseToc() {
					this.hide();
				};

				TocController.prototype.navigateThumbnails = function navigateThumbnails(number) {
					this.goToPage(number);
				};

				TocController.prototype.navigateSearch = function navigateSearch(number) {
					this.goToPage(number);
				};

				TocController.prototype.openUrl = function openUrl(url) {
					window.open(url, "_blank");
				};

				TocController.prototype.goToPage = function goToPage(number) {
					this.bookCtrl.goToPage(number);
				};

				TocController.prototype.dstDataHandler = function dstDataHandler(data) {
					data = (data + "").trim();
					var number = void 0;
					if ((number = parseInt(data)) == data) {
						this.goToPage(number);
					} else {
						this.openUrl(data);
					}
				};

				TocController.prototype.navigateBookmarks = function navigateBookmarks(item) {
					var _this2 = this;

					if (item.url) {
						this.openUrl(item.url);
					} else if (item.dest) {
						this.pdf.getDestination(item.dest).then(function (number) {
							return _this2.goToPage(number);
						});
					} else if (item.dstData !== undefined) {
						this.dstDataHandler(item.dstData);
					}
				};

				TocController.prototype.updateView = function updateView() {
					var _this3 = this;

					if (this.view) {
						this.view.setState("widTocMenu", {
							enable: true,
							visible: true,
							active: false,
						});
						this.view.setState("widThumbnails", {
							enable: true,
							visible: this.tab === "thumbnails",
							active: false,
						});
						this.view.setState("widSearch", {
							enable: true,
							visible: this.tab === "search",
							active: false,
						});
						this.view.setState("widBookmarks", {
							enable: true,
							visible: this.tab === "bookmarks",
							active: false,
						});
						this.view.setState("cmdBookmarks", {
							enable: true,
							visible: !!this.bookmarks,
							active: this.tab === "bookmarks",
						});
						this.view.setState("cmdCloseToc", {
							enable: true,
							visible: true,
							active: false,
						});
						this.view.setState("cmdThumbnails", {
							enable: true,
							visible: !!this.thumbnails && !!(this.search || this.bookmarks),
							active: this.tab === "thumbnails",
						});
						this.view.setState("cmdSearch", {
							enable: true,
							visible: !!this.search,
							active: this.tab === "search",
						});
						Promise.resolve().then(function () {
							return _this3.thumbnails.setEnable(_this3.visible && _this3.tab === "thumbnails");
						});
						_WidgetController.prototype.updateView.call(this);
					}
				};

				return TocController;
			})(_WidgetController3.default);

			exports.default = TocController;

			/***/
		},
		/* 44 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(1);

			var _ThreeUtils = __webpack_require__(21);

			var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			var resX = 11,
				resY = 2,
				resZ = 15,
				scale = 1,
				faces = [];

			var frontGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
			frontGeometry.translate(0.5 * scale, 0.5 * scale, scale);
			var backGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
			backGeometry.rotateY(Math.PI);
			backGeometry.translate(0.5 * scale, 0.5 * scale, 0);
			var leftGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
			leftGeometry.rotateY(-Math.PI / 2);
			leftGeometry.translate(0, 0.5 * scale, 0.5 * scale);
			var rightGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
			rightGeometry.rotateY(Math.PI / 2);
			rightGeometry.translate(scale, 0.5 * scale, 0.5 * scale);
			var topGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resZ - 1);
			topGeometry.rotateX(-Math.PI / 2);
			topGeometry.translate(0.5 * scale, scale, 0.5 * scale);
			var bottomGeometry = topGeometry.clone();
			bottomGeometry.translate(0, -scale, 0);
			for (
				var _iterator = bottomGeometry.faces,
					_isArray = Array.isArray(_iterator),
					_i = 0,
					_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
				;

			) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var f = _ref;
				var _ref3 = [f.b, f.a];
				f.a = _ref3[0];
				f.b = _ref3[1];
			}

			var geometry = new _libs.THREE.Geometry();
			geometry.vertices = [].concat(bottomGeometry.vertices, topGeometry.vertices);

			var addFaces = function addFaces(fs, map) {
				for (
					var _iterator2 = fs,
						_isArray2 = Array.isArray(_iterator2),
						_i2 = 0,
						_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
					;

				) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var f = _ref2;

					geometry.faces.push(new _libs.THREE.Face3(map(f.a), map(f.b), map(f.c)));
				}
				faces.push(geometry.faces.length);
			};

			var mapVertices = function mapVertices(src, dst) {
				var map = [];
				var eq = function eq(a, b) {
					return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z) < 1e-4;
				};
				for (var i = 0; i < src.length; ++i) {
					for (var j = 0; j < dst.length; ++j) {
						if (eq(src[i], dst[j])) {
							map[i] = j;
							break;
						}
					}
				}
				return map;
			};

			var frontMap = mapVertices(frontGeometry.vertices, geometry.vertices);
			var backMap = mapVertices(backGeometry.vertices, geometry.vertices);
			var leftMap = mapVertices(leftGeometry.vertices, geometry.vertices);
			var rightMap = mapVertices(rightGeometry.vertices, geometry.vertices);

			addFaces(topGeometry.faces, function (i) {
				return i + bottomGeometry.vertices.length;
			});
			addFaces(bottomGeometry.faces, function (i) {
				return i;
			});
			addFaces(frontGeometry.faces, function (i) {
				return frontMap[i];
			});
			addFaces(backGeometry.faces, function (i) {
				return backMap[i];
			});
			addFaces(leftGeometry.faces, function (i) {
				return leftMap[i];
			});
			addFaces(rightGeometry.faces, function (i) {
				return rightMap[i];
			});
			faces.pop();

			_ThreeUtils2.default.computeFaceVertexUvs(geometry, faces);

			geometry.computeVertexNormals();
			//geometry.computeFaceNormals();
			geometry.computeBoundingSphere();
			//geometry.computeBoundingBox();
			geometry.verticesNeedUpdate = true;

			exports.default = {
				resX: resX,
				resY: resY,
				resZ: resZ,
				faces: faces,
				geometry: geometry,
			};

			/***/
		},
		/* 45 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;
			exports.props = props;
			var mouseButtons = {
				Left: 0,
				Middle: 1,
				Right: 2,
			};

			function props() {
				return {
					eps: 1e-4,
					scale: {
						default: 0.9,
						min: 0.9,
						max: 2,
						levels: 5,
					},
					pan: {
						speed: 50,
					},
					loadingAnimation: {
						skin: true,
						book: false,
					},
					autoResolution: {
						enabled: true,
						coefficient: 1.5,
						min: 800,
						max: 1920,
					},
					narrowView: {
						width: 500,
					},
					actions: {
						cmdZoomIn: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdZoomOut: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdDefaultZoom: {
							enabled: false,
							enabledInNarrow: false,
							type: "dblclick",
							code: 0,
						},
						cmdToc: {
							enabled: true,
							enabledInNarrow: true,
							active: false,
							defaultTab: "bookmarks",
						},
						cmdAutoPlay: {
							enabled: false,
							enabledInNarrow: false,
							active: false,
						},
						cmdBackward: {
							enabled: true,
							enabledInNarrow: false,
							code: 37,
						},
						cmdBigBackward: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdForward: {
							enabled: true,
							enabledInNarrow: false,
							code: 39,
						},
						cmdBigForward: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdSave: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdPrint: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdFullScreen: {
							enabled: true,
							enabledInNarrow: true,
						},
						widSettings: {
							enabled: true,
							enabledInNarrow: true,
						},
						widToolbar: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdSmartPan: {
							enabled: false,
							enabledInNarrow: false,
							active: true,
						},
						cmdSinglePage: {
							enabled: true,
							enabledInNarrow: true,
							active: false,
							activeForMobile: true,
						},
						cmdSounds: {
							enabled: true,
							enabledInNarrow: true,
							active: true,
						},
						cmdStats: {
							enabled: false,
							enabledInNarrow: false,
							active: false,
						},
						cmdGotoFirstPage: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdGotoLastPage: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdShare: {
							enabled: true,
							enabledInNarrow: true,
						},
						cmdPanLeft: {
							enabled: false,
						},
						cmdPanRight: {
							enabled: false,
						},
						cmdPanUp: {
							enabled: false,
						},
						cmdPanDown: {
							enabled: false,
						},
						mouseCmdRotate: {
							enabled: true,
							type: "mousedrag",
							code: mouseButtons.Right,
						},
						mouseCmdDragZoom: {
							enabled: true,
							type: "mousedrag",
							code: mouseButtons.Middle,
						},
						mouseCmdPan: {
							enabled: true,
							type: "mousedrag",
							code: mouseButtons.Left,
						},
						mouseCmdWheelZoom: {
							enabled: true,
							type: "mousewheel",
							code: 0,
						},
						touchCmdRotate: {
							enabled: true,
							type: "touchdrag",
							code: 3,
						},
						touchCmdZoom: {
							enabled: true,
							type: "touchdrag",
							code: 2,
						},
						touchCmdPan: {
							enabled: true,
							type: "touchdrag",
							code: 1,
						},
						touchCmdSwipe: {
							enabled: true,
							type: "touchdrag",
							code: 1,
						},
					},
				};
			}

			/***/
		},
		/* 46 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _ImageBase2 = __webpack_require__(6);

			var _ImageBase3 = _interopRequireDefault(_ImageBase2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var BlankImage = (function (_ImageBase) {
				_inherits(BlankImage, _ImageBase);

				function BlankImage(context, width, height, color) {
					_classCallCheck(this, BlankImage);

					var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

					Promise.resolve().then(function () {
						_this.startRender = function () {
							_this.renderBlankPage();
							_this.finishRender();
						};
						_this.finishLoad();
					});
					return _this;
				}

				return BlankImage;
			})(_ImageBase3.default);

			exports.default = BlankImage;

			/***/
		},
		/* 47 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Bookmarks = (function () {
				function Bookmarks(container, items) {
					var _this = this;

					var getTitle =
						arguments.length > 2 && arguments[2] !== undefined
							? arguments[2]
							: function (i) {
									return i.title;
							  };
					var getItems =
						arguments.length > 3 && arguments[3] !== undefined
							? arguments[3]
							: function (i) {
									return i.items;
							  };

					_classCallCheck(this, Bookmarks);

					this.container = container;
					this.map = [];
					this.getTitle = getTitle;
					this.getItems = getItems;
					this.nodes = this.mapNodes(items, this.map);

					this.binds = {
						togle: function togle(e) {
							e.preventDefault();
							var li = (0, _libs.$)(e.target);
							while (li[0] && li[0] !== container[0] && !li.hasClass("item")) {
								li = (0, _libs.$)(li[0].parentNode);
							}
							if (li.hasClass("item")) {
								var cmd = (0, _libs.$)(e.target);
								while (cmd[0] && cmd[0] !== li[0] && !cmd.hasClass("cmd")) {
									cmd = (0, _libs.$)(cmd[0].parentNode);
								}
								if (cmd.hasClass("cmd")) {
									var node = _this.map[li.attr("data-id")];
									if (cmd.hasClass("togle")) {
										node.minimized = !node.minimized;
										if (node.minimized) {
											li.find("ul").remove();
											li.find(".togle").addClass("minimized");
										} else {
											li.find(".togle").removeClass("minimized");
											li.append((_this.renderNode(node).match(/<ul(.|\n)*<\/ul>/g) || [""])[0]);
										}
									} else {
										if (_this.onNavigate) {
											_this.onNavigate(node.item);
										}
									}
								}
							}
						},
					};

					container.on("click", this.binds.togle);
					this.update();
				}

				Bookmarks.prototype.getSize = function getSize() {
					return this.map.length;
				};

				Bookmarks.prototype.dispose = function dispose() {
					this.container.off("click", this.binds.togle);
					this.container.html("");
				};

				Bookmarks.prototype.update = function update() {
					this.container.html(this.renderNodes(this.nodes));
				};

				Bookmarks.prototype.forEach = function forEach(f) {
					var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nodes;

					for (
						var _iterator = nodes || [],
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var node = _ref;

						f(node);
						this.forEach(f, node.children);
					}
				};

				Bookmarks.prototype.expand = function expand() {
					this.forEach(function (n) {
						return (n.minimized = false);
					});
					this.update();
				};

				Bookmarks.prototype.minimize = function minimize() {
					this.forEach(function (n) {
						return (n.minimized = true);
					});
					this.update();
				};

				Bookmarks.prototype.renderNode = function renderNode(node) {
					return [
						'<div class="area">',
						node.children
							? '<a class="cmd togle' +
							  (node.minimized ? " minimized" : "") +
							  '"><i class="fa fa-angle-right"></i></a> '
							: '<i class="white-space"></i> ',
						'<a class="cmd" title="',
						node.title,
						'">',
						node.title,
						"</a></div>",
						node.minimized ? "" : this.renderNodes(node.children),
					].join("");
				};

				Bookmarks.prototype.renderNodes = function renderNodes(nodes) {
					var res = ['<div class="bookmarks">'];
					if (nodes && nodes.length) {
						res.push('<ul class="level-', nodes[0].level, '">');
						for (
							var _iterator2 = nodes,
								_isArray2 = Array.isArray(_iterator2),
								_i2 = 0,
								_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
							;

						) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var node = _ref2;

							res.push(
								['<li class="item" data-id="', node.id, '">', this.renderNode(node), "</li>"].join("")
							);
						}
						res.push("</ul>");
					}
					res.push("</div>");
					return res.join("");
				};

				Bookmarks.prototype.mapNodes = function mapNodes(items) {
					var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
					var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

					var nodes = null;
					if (items && items.length) {
						nodes = [];
						for (
							var _iterator3 = items,
								_isArray3 = Array.isArray(_iterator3),
								_i3 = 0,
								_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
							;

						) {
							var _ref3;

							if (_isArray3) {
								if (_i3 >= _iterator3.length) break;
								_ref3 = _iterator3[_i3++];
							} else {
								_i3 = _iterator3.next();
								if (_i3.done) break;
								_ref3 = _i3.value;
							}

							var item = _ref3;

							var id = map.length;
							map.push(undefined);
							var node = {
								id: id,
								title: this.getTitle(item),
								level: level,
								item: item,
								minimized: true,
								children: this.mapNodes(this.getItems(item), map, level + 1),
							};
							nodes.push(node);
							map[id] = node;
						}
					}
					return nodes;
				};

				return Bookmarks;
			})();

			exports.default = Bookmarks;

			/***/
		},
		/* 48 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Detector = (function () {
				function Detector() {
					_classCallCheck(this, Detector);
				}

				Detector.getWebGLErrorMessage = function getWebGLErrorMessage() {
					var element = document.createElement("div");
					element.id = "webgl-error-message";
					element.style.fontFamily = "monospace";
					element.style.fontSize = "13px";
					element.style.fontWeight = "normal";
					element.style.textAlign = "center";
					element.style.background = "#fff";
					element.style.color = "#000";
					element.style.padding = "1.5em";
					element.style.width = "400px";
					element.style.margin = "5em auto 0";

					if (!Detector.webgl) {
						element.innerHTML = window.WebGLRenderingContext
							? [
									'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
									'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.',
							  ].join("\n")
							: [
									'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
									'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.',
							  ].join("\n");
					}
					return element;
				};

				Detector.addGetWebGLMessage = function addGetWebGLMessage(parameters) {
					var parent = void 0,
						id = void 0,
						element = void 0;
					parameters = parameters || {};

					parent = parameters.parent || (0, _libs.$)(document.body);
					id = parameters.id || "oldie";

					element = Detector.getWebGLErrorMessage();
					//element.id = id;

					parent.append(element);
				};

				return Detector;
			})();

			Detector.canvas = !!window.CanvasRenderingContext2D;

			Detector.webgl = (function () {
				try {
					var canvas = document.createElement("canvas");
					return !!(
						window.WebGLRenderingContext &&
						(canvas.getContext("webgl") || canvas.getContext("experimental-webgl"))
					);
				} catch (e) {
					return false;
				}
			})();

			Detector.workers = !!window.Worker;
			Detector.fileapi = window.File && window.FileReader && window.FileList && window.Blob;
			exports.default = Detector;

			/***/
		},
		/* 49 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var DocMouseSimulator = (function () {
				function DocMouseSimulator(jFrame, element) {
					var bElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

					_classCallCheck(this, DocMouseSimulator);

					this.jFrame = jFrame;
					this.wnd = jFrame[0].contentWindow;
					this.doc = jFrame[0].contentDocument;
					this.element = element || doc.body;
					this.bElement = bElement;
					this.resendProperties = this.getDefaultResendProperties();
					this.undefinedProperties = this.getDefaultUndefinedProperties();
					this.cursors = [];
					this.onDocChangeClbs = [];
					var terms = [
						{
							find: ":hover",
							replace: "." + DocMouseSimulator.HOVER,
						},
						{
							find: ":active",
							replace: "." + DocMouseSimulator.ACTIVE,
						},
					];
					var style = ['<style type="text/css">'];
					for (var i = 0; i < this.doc.styleSheets.length; ++i) {
						var ss = this.doc.styleSheets[i];
						for (var j = 0; j < ss.cssRules.length; ++j) {
							var r = ss.cssRules[j],
								cssText = void 0;
							for (
								var _iterator = terms,
									_isArray = Array.isArray(_iterator),
									_i = 0,
									_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
								;

							) {
								var _ref;

								if (_isArray) {
									if (_i >= _iterator.length) break;
									_ref = _iterator[_i++];
								} else {
									_i = _iterator.next();
									if (_i.done) break;
									_ref = _i.value;
								}

								var term = _ref;

								if (~r.selectorText.indexOf(term.find)) {
									cssText = (cssText || r.cssText).replace(new RegExp(term.find, "g"), term.replace);
								}
							}
							if (cssText) {
								style.push(cssText);
							}
						}
					}
					style.push("</style>");
					(0, _libs.$)(this.doc.head).append((0, _libs.$)(style.join("")));
				}

				DocMouseSimulator.prototype.convertCoords = function convertCoords(x, y) {
					var jElement = (0, _libs.$)(this.element);
					var offset = jElement.offset();
					return {
						x: offset.left + jElement.width() * x,
						y: offset.top + jElement.height() * (1 - y),
					};
				};

				DocMouseSimulator.prototype.triggerEvent = function triggerEvent(element, e, p, type, advancedProps) {
					var props = {};
					for (
						var _iterator2 = this.resendProperties,
							_isArray2 = Array.isArray(_iterator2),
							_i2 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var _n = _ref2;

						props[_n] = e[_n];
					}
					for (
						var _iterator3 = this.undefinedProperties,
							_isArray3 = Array.isArray(_iterator3),
							_i3 = 0,
							_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
						;

					) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var _n2 = _ref3;

						props[_n2] = undefined;
					}
					for (var n in advancedProps) {
						if (advancedProps.hasOwnProperty(n)) {
							props[n] = advancedProps[n];
						}
					}
					props.view = this.wnd;
					props.pageX = p.x;
					props.pageY = p.y;
					var jE = _libs.$.Event(type, props);
					jE.timeStamp = e.timeStamp;
					(0, _libs.$)(element).trigger(jE);
				};

				DocMouseSimulator.prototype.addClass = function addClass(element, name) {
					(0, _libs.$)(element).addClass(name);
					var style = this.wnd.getComputedStyle(element);
					this.cursors.push((0, _libs.$)(this.bElement).css("cursor"));
					(0, _libs.$)(this.bElement).css("cursor", style.getPropertyValue("cursor"));
				};

				DocMouseSimulator.prototype.removeClass = function removeClass(element, name) {
					(0, _libs.$)(element).removeClass(name);
					(0, _libs.$)(this.bElement).css("cursor", this.cursors.pop());
				};

				DocMouseSimulator.prototype.enterElement = function enterElement(element) {
					this.addClass(element, DocMouseSimulator.HOVER);
				};

				DocMouseSimulator.prototype.leaveElement = function leaveElement(element) {
					this.removeClass(element, DocMouseSimulator.HOVER);
				};

				DocMouseSimulator.prototype.activateElement = function activateElement(element) {
					this.addClass(element, DocMouseSimulator.ACTIVE);
				};

				DocMouseSimulator.prototype.deactivateElement = function deactivateElement(element) {
					this.removeClass(element, DocMouseSimulator.ACTIVE);
				};

				DocMouseSimulator.prototype.addDocChangeClb = function addDocChangeClb(clb) {
					this.onDocChangeClbs.push(clb);
				};

				DocMouseSimulator.prototype.notify = function notify() {
					for (
						var _iterator4 = this.onDocChangeClbs,
							_isArray4 = Array.isArray(_iterator4),
							_i4 = 0,
							_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
						;

					) {
						var _ref4;

						if (_isArray4) {
							if (_i4 >= _iterator4.length) break;
							_ref4 = _iterator4[_i4++];
						} else {
							_i4 = _iterator4.next();
							if (_i4.done) break;
							_ref4 = _i4.value;
						}

						var clb = _ref4;

						clb(this.wnd, this.doc);
					}
				};

				DocMouseSimulator.prototype.elementFromPoint = function elementFromPoint(p) {
					var node = this.doc.body,
						next = true;
					while (next) {
						next = false;
						for (var i = 0; i < node.childNodes.length; ++i) {
							var child = node.childNodes[i];
							if (child instanceof this.wnd.Element) {
								var jC = (0, _libs.$)(child),
									offset = jC.offset(),
									height = jC.height(),
									width = jC.width();
								if (
									p.x > offset.left &&
									p.x < offset.left + width &&
									p.y > offset.top &&
									p.y < offset.top + height
								) {
									node = child;
									next = true;
									break;
								}
							}
						}
					}
					return node;
				};

				DocMouseSimulator.prototype.getElement = function getElement(p) {
					var off0 = this.jFrame.offset();
					this.jFrame.offset({ left: 0.5 * window.innerWidth - p.x, top: 0.5 * window.innerHeight - p.y });
					var element = this.doc.elementFromPoint(p.x, p.y);
					if (!element) {
						// it isn't a joke it's IE
						element = this.doc.elementFromPoint(p.x, p.y);
					}
					this.jFrame.offset(off0);
					return element ? element : this.elementFromPoint(p);
				};

				DocMouseSimulator.prototype.simulate = function simulate(e, doc, x, y) {
					var p = this.convertCoords(x, y),
						element = doc === this.doc ? this.getElement(p) : undefined;
					var trigger = element !== undefined,
						notify = false;

					switch (e.type) {
						case "mousedown": {
							if (this.capElement) {
								this.deactivateElement(this.capElement);
								notify = true;
							}
							this.capElement = element;
							if (this.capElement) {
								this.activateElement(this.capElement);
								notify = true;
							}
							break;
						}
						case "mouseup": {
							if (this.capElement) {
								this.deactivateElement(this.capElement);
								notify = true;
							}
							this.timeStamp = e.timeStamp;
							break;
						}
						case "click": {
							trigger = element && this.capElement === element; // && e.timeStamp === this.timeStamp;
							this.capElement = undefined;
							break;
						}
						case "mouseenter":
						case "mouseover":
						case "mousemove": {
							var leaved = null;
							if (this.hovElement !== element && this.hovElement) {
								this.triggerEvent(this.hovElement, e, p, "mouseout", {
									relatedTarget: element ? element : null,
								});
								this.leaveElement(this.hovElement);
								leaved = this.hovElement;
								this.hovElement = undefined;
								notify = true;
							}
							if (!this.hovElement && element) {
								this.triggerEvent(element, e, p, "mouseover", { relatedTarget: leaved });
								this.enterElement(element);
								this.hovElement = element;
								notify = true;
							}
							trigger = element && e.type === "mousemove";
							break;
						}
						case "mouseleave":
						case "mouseout": {
							if (this.hovElement) {
								this.triggerEvent(this.hovElement, e, p, "mouseout", {
									relatedTarget: e.relatedTarget,
								});
								this.leaveElement(this.hovElement);
								this.hovElement = undefined;
								notify = true;
							}
							trigger = false;
							break;
						}
					}
					if (trigger) {
						this.triggerEvent(element, e, p, e.type);
					}
					if (notify) {
						this.notify();
					}
				};

				DocMouseSimulator.prototype.getDefaultUndefinedProperties = function getDefaultUndefinedProperties() {
					return ["clientX", "clientY", "offsetX", "offsetY", "screenX", "screenY"];
				};

				DocMouseSimulator.prototype.getDefaultResendProperties = function getDefaultResendProperties() {
					return [
						"altKey",
						"bubbles",
						"button",
						"buttons",
						"cancelable",
						"changedTouches",
						"char",
						"charCode",
						"ctrlKey",
						"data",
						"detail",
						"eventPhase",
						"isDefaultPrevented",
						"key",
						"keyCode",
						"metaKey",
						"pointerId",
						"pointerType",
						"shiftKey",
						"targetTouches",
						"touches",
						"which",
					];
				};

				return DocMouseSimulator;
			})();

			/*
altKey,
bubbles,
button,
buttons,
cancelable,
changedTouches,
char,
charCode,
clientX,
clientY,
ctrlKey,
currentTarget,
data,
delegateTarget,
detail,
eventPhase,
handleObj,
isDefaultPrevented,
key,
keyCode,
metaKey,
offsetX,
offsetY,
originalEvent,
pageX,
pageY,
pointerId,
pointerType,
relatedTarget,
screenX,
screenY,
shiftKey,
target,
targetTouches,
timeStamp,
toElement,
touches,
type,
view,
which
*/

			DocMouseSimulator.HOVER = "SIMULATED-HOVER";
			DocMouseSimulator.ACTIVE = "SIMULATED-ACTIVE";
			exports.default = DocMouseSimulator;

			/***/
		},
		/* 50 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Dom2Image = function Dom2Image(wnd, doc, cache) {
				_classCallCheck(this, Dom2Image);

				var self = this;
				this.window = wnd;
				this.document = doc;
				this.cache = cache;

				var util = newUtil();
				var inliner = newInliner();
				var fontFaces = newFontFaces();
				var images = newImages();

				this.toSvg = toSvg;
				this.toPng = toPng;
				this.toJpeg = toJpeg;
				this.toBlob = toBlob;
				this.toPixelData = toPixelData;
				this.impl = {
					fontFaces: fontFaces,
					images: images,
					util: util,
					inliner: inliner,
				};

				/**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options
     * @param {Function} options.filter - Should return true if passed node should be included in the output
     *          (excluding node means excluding it's children as well). Not called on the root node.
     * @param {String} options.bgcolor - color for the background, any valid CSS color value.
     * @param {Number} options.width - width to be applied to node before rendering.
     * @param {Number} options.height - height to be applied to node before rendering.
     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.
     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),
                defaults to 1.0.
     * @return {Promise} - A promise that is fulfilled with a SVG image data URL
     * */

				function toSvg(node, options) {
					options = options || {};
					return Promise.resolve(node)
						.then(function (node) {
							return cloneNode(node, options.filter, true);
						})
						.then(embedFonts)
						.then(inlineImages)
						.then(applyOptions)
						.then(function (clone) {
							return makeSvgDataUri(
								clone,
								options.width || util.width(node),
								options.height || util.height(node)
							);
						});

					function applyOptions(clone) {
						if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;

						if (options.width) clone.style.width = options.width + "px";
						if (options.height) clone.style.height = options.height + "px";

						if (options.style)
							self.window.Object.keys(options.style).forEach(function (property) {
								clone.style[property] = options.style[property];
							});

						return clone;
					}
				}

				/**
				 * @param {Node} node - The DOM Node object to render
				 * @param {Object} options - Rendering options, @see {@link toSvg}
				 * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.
				 * */
				function toPixelData(node, options) {
					return draw(node, options || {}).then(function (canvas) {
						return canvas.getContext("2d").getImageData(0, 0, util.width(node), util.height(node)).data;
					});
				}

				/**
				 * @param {Node} node - The DOM Node object to render
				 * @param {Object} options - Rendering options, @see {@link toSvg}
				 * @return {Promise} - A promise that is fulfilled with a PNG image data URL
				 * */
				function toPng(node, options) {
					return draw(node, options || {}).then(function (canvas) {
						return canvas.toDataURL();
					});
				}

				/**
				 * @param {Node} node - The DOM Node object to render
				 * @param {Object} options - Rendering options, @see {@link toSvg}
				 * @return {Promise} - A promise that is fulfilled with a JPEG image data URL
				 * */
				function toJpeg(node, options) {
					options = options || {};
					return draw(node, options).then(function (canvas) {
						return canvas.toDataURL("image/jpeg", options.quality || 1.0);
					});
				}

				/**
				 * @param {Node} node - The DOM Node object to render
				 * @param {Object} options - Rendering options, @see {@link toSvg}
				 * @return {Promise} - A promise that is fulfilled with a PNG image blob
				 * */
				function toBlob(node, options) {
					return draw(node, options || {}).then(util.canvasToBlob);
				}

				function draw(domNode, options) {
					return toSvg(domNode, options)
						.then(util.makeImage)
						.then(util.delay(100))
						.then(function (image) {
							var canvas = newCanvas(domNode);
							canvas.getContext("2d").drawImage(image, 0, 0);
							return canvas;
						});

					function newCanvas(domNode) {
						var canvas = self.document.createElement("canvas");
						canvas.width = options.width || util.width(domNode);
						canvas.height = options.height || util.height(domNode);

						if (options.bgcolor) {
							var ctx = canvas.getContext("2d");
							ctx.fillStyle = options.bgcolor;
							ctx.fillRect(0, 0, canvas.width, canvas.height);
						}

						return canvas;
					}
				}

				function cloneNode(node, filter, root) {
					if (!root && filter && !filter(node)) return Promise.resolve();

					return Promise.resolve(node)
						.then(makeNodeCopy)
						.then(function (clone) {
							return cloneChildren(node, clone, filter);
						})
						.then(function (clone) {
							return processClone(node, clone);
						});

					function makeNodeCopy(node) {
						if (util.isCanvas(node)) return util.makeImage(node.toDataURL());
						return node.cloneNode(false);
					}

					function cloneChildren(original, clone, filter) {
						var children = original.childNodes;
						if (children.length === 0) return Promise.resolve(clone);

						return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {
							return clone;
						});

						function cloneChildrenInOrder(parent, children, filter) {
							var done = Promise.resolve();
							children.forEach(function (child) {
								done = done
									.then(function () {
										return cloneNode(child, filter);
									})
									.then(function (childClone) {
										if (childClone) parent.appendChild(childClone);
									});
							});
							return done;
						}
					}

					function processClone(original, clone) {
						if (!util.isElement(clone)) return clone;

						return Promise.resolve()
							.then(cloneStyle)
							.then(clonePseudoElements)
							.then(copyUserInput)
							.then(fixSvg)
							.then(function () {
								return clone;
							});

						function cloneStyle() {
							copyStyle(self.window.getComputedStyle(original), clone.style);

							function copyStyle(source, target) {
								if (source.cssText) target.cssText = source.cssText;
								else copyProperties(source, target);

								function copyProperties(source, target) {
									util.asArray(source).forEach(function (name) {
										target.setProperty(
											name,
											source.getPropertyValue(name),
											source.getPropertyPriority(name)
										);
									});
								}
							}
						}

						function clonePseudoElements() {
							[":before", ":after"].forEach(function (element) {
								clonePseudoElement(element);
							});

							function clonePseudoElement(element) {
								var style = self.window.getComputedStyle(original, element);
								var content = style.getPropertyValue("content");

								if (content === "" || content === "none") return;

								var className = util.uid();
								clone.className = clone.className + " " + className;
								var styleElement = self.document.createElement("style");
								styleElement.appendChild(formatPseudoElementStyle(className, element, style));
								clone.appendChild(styleElement);

								function formatPseudoElementStyle(className, element, style) {
									var selector = "." + className + ":" + element;
									var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);
									return self.document.createTextNode(selector + "{" + cssText + "}");

									function formatCssText(style) {
										var content = style.getPropertyValue("content");
										return style.cssText + " content: " + content + ";";
									}

									function formatCssProperties(style) {
										return util.asArray(style).map(formatProperty).join("; ") + ";";

										function formatProperty(name) {
											return (
												name +
												": " +
												style.getPropertyValue(name) +
												(style.getPropertyPriority(name) ? " !important" : "")
											);
										}
									}
								}
							}
						}

						function copyUserInput() {
							if (util.isTextArea(original)) clone.innerHTML = original.value;
							if (util.isInput(original)) clone.setAttribute("value", original.value);
						}

						function fixSvg() {
							if (!util.isSVG(clone)) return;
							clone.setAttribute("xmlns", "http://www.w3.org/2000/svg");

							if (!util.isSVGRect(clone)) return;
							["width", "height"].forEach(function (attribute) {
								var value = clone.getAttribute(attribute);
								if (!value) return;

								clone.style.setProperty(attribute, value);
							});
						}
					}
				}

				function embedFonts(node) {
					return fontFaces.resolveAll().then(function (cssText) {
						var styleNode = self.document.createElement("style");
						node.appendChild(styleNode);
						styleNode.appendChild(self.document.createTextNode(cssText));
						return node;
					});
				}

				function inlineImages(node) {
					return images.inlineAll(node).then(function () {
						return node;
					});
				}

				function makeSvgDataUri(node, width, height) {
					return Promise.resolve(node)
						.then(function (node) {
							node.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
							return new self.window.XMLSerializer().serializeToString(node);
						})
						.then(util.escapeXhtml)
						.then(function (xhtml) {
							return [
								"data:image/svg+xml;charset=utf-8,",
								'<svg xmlns="http://www.w3.org/2000/svg" width="',
								width,
								'" height="',
								height,
								'">',
								'<foreignObject x="0" y="0" width="100%" height="100%">',
								xhtml,
								"</foreignObject>",
								"</svg>",
							].join("");
						});
				}

				function newUtil() {
					return {
						escape: escape,
						parseExtension: parseExtension,
						mimeType: mimeType,
						dataAsUrl: dataAsUrl,
						isDataUrl: isDataUrl,
						canvasToBlob: canvasToBlob,
						resolveUrl: resolveUrl,
						getAndEncode: getAndEncode,
						uid: uid(),
						delay: delay,
						asArray: asArray,
						escapeXhtml: escapeXhtml,
						makeImage: makeImage,
						width: width,
						height: height,

						isElement: isElement,
						isCanvas: isCanvas,
						isTextArea: isTextArea,
						isInput: isInput,
						isSVG: isSVG,
						isSVGRect: isSVGRect,
						isImage: isImage,
					};

					function mimes() {
						/*
						 * Only WOFF and EOT mime types for fonts are 'real'
						 * see http://www.iana.org/assignments/media-types/media-types.xhtml
						 */
						var WOFF = "application/font-woff";
						var JPEG = "image/jpeg";

						return {
							woff: WOFF,
							woff2: WOFF,
							ttf: "application/font-truetype",
							eot: "application/vnd.ms-fontobject",
							png: "image/png",
							jpg: JPEG,
							jpeg: JPEG,
							gif: "image/gif",
							tiff: "image/tiff",
							svg: "image/svg+xml",
						};
					}

					function parseExtension(url) {
						var match = /\.([^\.\/]*?)$/g.exec(url);
						if (match) return match[1];
						else return "";
					}

					function mimeType(url) {
						var extension = parseExtension(url).toLowerCase();
						return mimes()[extension] || "";
					}

					function isDataUrl(url) {
						return url.search(/^(data:)/) !== -1;
					}

					function toBlob(canvas) {
						return new Promise(function (resolve) {
							var binaryString = self.window.atob(canvas.toDataURL().split(",")[1]);
							var length = binaryString.length;
							var binaryArray = new self.window.Uint8Array(length);

							for (var i = 0; i < length; i++) {
								binaryArray[i] = binaryString.charCodeAt(i);
							}
							resolve(
								new self.window.Blob([binaryArray], {
									type: "image/png",
								})
							);
						});
					}

					function canvasToBlob(canvas) {
						if (canvas.toBlob)
							return new Promise(function (resolve) {
								canvas.toBlob(resolve);
							});

						return toBlob(canvas);
					}

					function resolveUrl(url, baseUrl) {
						var doc = self.document.implementation.createHTMLDocument();
						var base = doc.createElement("base");
						doc.head.appendChild(base);
						var a = doc.createElement("a");
						doc.body.appendChild(a);
						base.href = baseUrl;
						a.href = url;
						return a.href;
					}

					function uid() {
						var index = 0;

						return function () {
							return "u" + fourRandomChars() + index++;

							function fourRandomChars() {
								/* see http://stackoverflow.com/a/6248722/2519373 */
								return (
									"0000" +
									((self.window.Math.random() * self.window.Math.pow(36, 4)) << 0).toString(36)
								).slice(-4);
							}
						};
					}

					function makeImage(uri) {
						return new Promise(function (resolve, reject) {
							var image = new self.window.Image();
							image.onload = function () {
								resolve(image);
							};
							image.onerror = reject;
							image.src = uri;
						});
					}

					function getAndEncode(url) {
						var data = self.cache.get(url);
						if (data) {
							if (data.content) {
								return data.content;
							} else {
								return new Promise(function (resolve) {
									if (data.content) {
										resolve(data.content);
									} else {
										data.pendings.push(resolve);
									}
								});
							}
						} else {
							data = self.cache.put(url, { pendings: [] });

							var TIMEOUT = 30000;

							return new Promise(function (resolve) {
								var request = new self.window.XMLHttpRequest();

								request.onreadystatechange = done;
								request.ontimeout = timeout;
								request.responseType = "blob";
								request.timeout = TIMEOUT;
								request.open("GET", url, true);
								request.send();

								function done() {
									if (request.readyState !== 4) return;

									if (request.status !== 200) {
										fail("cannot fetch resource: " + url + ", status: " + request.status);
										return;
									}

									var encoder = new self.window.FileReader();
									encoder.onloadend = function () {
										data.content = encoder.result.split(/,/)[1];
										for (
											var _iterator = data.pendings,
												_isArray = Array.isArray(_iterator),
												_i = 0,
												_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
											;

										) {
											var _ref;

											if (_isArray) {
												if (_i >= _iterator.length) break;
												_ref = _iterator[_i++];
											} else {
												_i = _iterator.next();
												if (_i.done) break;
												_ref = _i.value;
											}

											var _resolve = _ref;

											_resolve(data.content);
										}
										data.pendings = [];
										resolve(data.content);
									};
									encoder.readAsDataURL(request.response);
								}

								function timeout() {
									fail("timeout of " + TIMEOUT + "ms occured while fetching resource: " + url);
								}

								function fail(message) {
									console.error(message);
									resolve("");
								}
							});
						}
					}

					function dataAsUrl(content, type) {
						return ["data:", type, ";base64,", content].join("");
					}

					function escape(string) {
						return string.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
					}

					function delay(ms) {
						return function (arg) {
							return new Promise(function (resolve) {
								setTimeout(function () {
									resolve(arg);
								}, ms);
							});
						};
					}

					function asArray(arrayLike) {
						var array = [];
						var length = arrayLike.length;
						for (var i = 0; i < length; i++) {
							array.push(arrayLike[i]);
						}
						return array;
					}

					function escapeXhtml(string) {
						return string.replace(/(#|\n)/g, function (c) {
							return c === "#" ? "%23" : "%0A";
						});
					}

					function width(node) {
						var leftBorder = px(node, "border-left-width");
						var rightBorder = px(node, "border-right-width");
						return node.scrollWidth + leftBorder + rightBorder;
					}

					function height(node) {
						var topBorder = px(node, "border-top-width");
						var bottomBorder = px(node, "border-bottom-width");
						return node.scrollHeight + topBorder + bottomBorder;
					}

					function px(node, styleProperty) {
						var value = self.window.getComputedStyle(node).getPropertyValue(styleProperty);
						return parseFloat(value.replace("px", ""));
					}

					function isElement(node) {
						return node instanceof self.window.Element;
					}

					function isCanvas(node) {
						return node instanceof self.window.HTMLCanvasElement;
					}

					function isTextArea(node) {
						return node instanceof self.window.HTMLTextAreaElement;
					}

					function isInput(node) {
						return node instanceof self.window.HTMLInputElement;
					}

					function isSVG(node) {
						return node instanceof self.window.SVGElement;
					}

					function isSVGRect(node) {
						return node instanceof self.window.SVGRectElement;
					}

					function isImage(node) {
						return node instanceof self.window.HTMLImageElement;
					}
				}

				function newInliner() {
					var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;

					return {
						inlineAll: inlineAll,
						shouldProcess: shouldProcess,
						impl: {
							readUrls: readUrls,
							inline: inline,
						},
					};

					function shouldProcess(string) {
						return string.search(URL_REGEX) !== -1;
					}

					function readUrls(string) {
						var result = [];
						var match = void 0;
						while ((match = URL_REGEX.exec(string)) !== null) {
							result.push(match[1]);
						}
						return result.filter(function (url) {
							return !util.isDataUrl(url);
						});
					}

					function inline(string, url, baseUrl, get) {
						return Promise.resolve(url)
							.then(function (url) {
								return baseUrl ? util.resolveUrl(url, baseUrl) : url;
							})
							.then(get || util.getAndEncode)
							.then(function (data) {
								return util.dataAsUrl(data, util.mimeType(url));
							})
							.then(function (dataUrl) {
								return string.replace(urlAsRegex(url), ["$1", dataUrl, "$3"].join(""));
							});

						function urlAsRegex(url) {
							return new self.window.RegExp(
								["(url\\(['\"]?)(", util.escape(url), ")(['\"]?\\))"].join(""),
								"g"
							);
						}
					}

					function inlineAll(string, baseUrl, get) {
						if (nothingToInline()) return Promise.resolve(string);

						return Promise.resolve(string)
							.then(readUrls)
							.then(function (urls) {
								var done = Promise.resolve(string);
								urls.forEach(function (url) {
									done = done.then(function (string) {
										return inline(string, url, baseUrl, get);
									});
								});
								return done;
							});

						function nothingToInline() {
							return !shouldProcess(string);
						}
					}
				}

				function newFontFaces() {
					return {
						resolveAll: resolveAll,
						impl: {
							readAll: readAll,
						},
					};

					function resolveAll() {
						return readAll(self.document)
							.then(function (webFonts) {
								return Promise.all(
									webFonts.map(function (webFont) {
										return webFont.resolve();
									})
								);
							})
							.then(function (cssStrings) {
								return cssStrings.join("\n");
							});
					}

					function readAll() {
						return Promise.resolve(util.asArray(self.document.styleSheets))
							.then(getCssRules)
							.then(selectWebFontRules)
							.then(function (rules) {
								return rules.map(newWebFont);
							});

						function selectWebFontRules(cssRules) {
							return cssRules
								.filter(function (rule) {
									return rule.type === CSSRule.FONT_FACE_RULE;
								})
								.filter(function (rule) {
									return inliner.shouldProcess(rule.style.getPropertyValue("src"));
								});
						}

						function getCssRules(styleSheets) {
							var cssRules = [];
							styleSheets.forEach(function (sheet) {
								try {
									util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
								} catch (e) {
									console.log("Error while reading CSS rules from " + sheet.href, e.toString());
								}
							});
							return cssRules;
						}

						function newWebFont(webFontRule) {
							return {
								resolve: function resolve() {
									var baseUrl = (webFontRule.parentStyleSheet || {}).href;
									return inliner.inlineAll(webFontRule.cssText, baseUrl);
								},
								src: function src() {
									return webFontRule.style.getPropertyValue("src");
								},
							};
						}
					}
				}

				function newImages() {
					return {
						inlineAll: inlineAll,
						impl: {
							newImage: newImage,
						},
					};

					function newImage(element) {
						return {
							inline: inline,
						};

						function inline(get) {
							if (util.isDataUrl(element.src)) return Promise.resolve();

							return Promise.resolve(element.src)
								.then(get || util.getAndEncode)
								.then(function (data) {
									return util.dataAsUrl(data, util.mimeType(element.src));
								})
								.then(function (dataUrl) {
									return new Promise(function (resolve, reject) {
										element.onload = resolve;
										element.onerror = reject;
										element.src = dataUrl;
									});
								});
						}
					}

					function inlineAll(node) {
						if (!util.isElement(node)) return Promise.resolve(node);

						return inlineBackground(node).then(function () {
							if (util.isImage(node)) return newImage(node).inline();
							else
								return Promise.all(
									util.asArray(node.childNodes).map(function (child) {
										return inlineAll(child);
									})
								);
						});

						function inlineBackground(node) {
							var background = node.style.getPropertyValue("background");

							if (!background) return Promise.resolve(node);

							return inliner
								.inlineAll(background)
								.then(function (inlined) {
									node.style.setProperty(
										"background",
										inlined,
										node.style.getPropertyPriority("background")
									);
								})
								.then(function () {
									return node;
								});
						}
					}
				}
			};

			exports.default = Dom2Image;

			/***/
		},
		/* 51 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Drag = (function () {
				function Drag(wnd, doc, visualWorld) {
					_classCallCheck(this, Drag);

					this.wnd = wnd;
					this.doc = doc;
					this.visual = visualWorld;
					this.coords = new _libs.THREE.Vector2();
					this.intersection = new _libs.THREE.Vector3();
					this.raycaster = this.visual.raycaster;
					this.camera = this.visual.camera;
					this.plane = new _libs.THREE.Plane();
					this.threes = [];
					this.selected = null;
					this.enabled = true;
					this.controlsState = this.visual.getControlsState();

					this.element = this.visual.element;
					this.binds = {
						onMouseMove: this.onMouseMove.bind(this),
						onMouseDown: this.onMouseDown.bind(this),
						onMouseUp: this.onMouseUp.bind(this),
					};
					(0, _libs.$)(this.element).on("mousemove", this.binds.onMouseMove);
					(0, _libs.$)(this.element).on("mousedown", this.binds.onMouseDown);
					(0, _libs.$)(this.doc).on("mouseup", this.binds.onMouseUp);
				}

				Drag.prototype.addThree = function addThree(three) {
					this.threes.push(three);
				};

				Drag.prototype.removeThree = function removeThree(three) {
					var i = this.threes.indexOf(three);
					if (~i) {
						this.threes.splice(i, 1);
					}
				};

				Drag.prototype.onPickCallback = function onPickCallback() {
					return true;
				};

				Drag.prototype.onDragCallback = function onDragCallback() {
					return true;
				};

				Drag.prototype.onReleaseCallback = function onReleaseCallback() {};

				Drag.prototype.dispose = function dispose() {
					(0, _libs.$)(this.element).off("mousemove", this.binds.onMouseMove);
					(0, _libs.$)(this.element).off("mousedown", this.binds.onMouseDown);
					(0, _libs.$)(this.doc).off("mouseup", this.binds.onMouseUp);
				};

				Drag.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
					var jElement = (0, _libs.$)(this.element);
					var offset = jElement.offset();
					this.coords.x = ((e.pageX - offset.left) / jElement.width()) * 2 - 1;
					this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
					return this.coords;
				};

				Drag.prototype.onMouseDown = function onMouseDown(e) {
					if (!this.enabled) return;

					if (this.selected) this.onMouseUp(e);

					this.setCoordsFromEvent(e);
					this.raycaster.setFromCamera(this.coords, this.camera);

					var intersects = this.raycaster.intersectObjects(this.threes);
					if (intersects.length > 0) {
						var selected = intersects[0].object;
						if (!this.onPickCallback(intersects[0])) return;
						var v = intersects[0].point.clone();
						this.distance = v.sub(this.raycaster.ray.origin).length();
						this.controlsState = this.visual.getControlsState();
						this.visual.setControlsState(false);
						this.plane.setFromNormalAndCoplanarPoint(
							this.visual.camera.getWorldDirection(this.plane.normal),
							intersects[0].point
						);
						//this.plane.setFromNormalAndCoplanarPoint(this.plane.normal.set(0,0,1), new THREE.Vector3(0,0,0));
						this.selected = selected;
					}
				};

				Drag.prototype.onMouseMove = function onMouseMove(e) {
					if (!this.enabled) return;
					e.preventDefault();

					if (this.selected) {
						this.setCoordsFromEvent(e);
						this.raycaster.setFromCamera(this.coords, this.camera);
						if (this.raycaster.ray.intersectPlane(this.plane, this.intersection)) {
							if (!this.onDragCallback(this.intersection)) this.onMouseUp(e);
						} /**/
						//this.intersection.copy(this.raycaster.ray.direction).normalize().multiplyScalar(this.distance).add(this.raycaster.ray.origin);/**/
						//if(!this.onDragCallback(this.selected, this.intersection)) this.onMouseUp(e);
					}
				};

				Drag.prototype.onMouseUp = function onMouseUp(e) {
					if (this.selected) {
						this.onReleaseCallback();
						this.selected = null;
						this.visual.setControlsState(this.controlsState);
					}
					if (!this.enabled) return;
					e.preventDefault();
				};

				return Drag;
			})();

			exports.default = Drag;

			/***/
		},
		/* 52 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			__webpack_require__(75)(_libs.$);

			var EventsToActions = (function () {
				EventsToActions.getEventFlags = function getEventFlags(e) {
					return (e.ctrlKey << 0) | (e.shiftKey << 1) | (e.altKey << 2);
				};

				EventsToActions.getPosition = function getPosition(touches) {
					var x = void 0,
						y = void 0;
					if (touches.length === 2) {
						x = touches[1].pageX - touches[0].pageX;
						y = touches[1].pageY - touches[0].pageY;
					} else {
						x = touches[0].pageX;
						y = touches[0].pageY;
					}
					return {
						x: x,
						y: y,
					};
				};

				function EventsToActions(element, actions) {
					_classCallCheck(this, EventsToActions);

					this.actions = actions || {};
					this.element = element;
					this.doc = element[0].ownerDocument;
					this.wnd = this.doc.defaultView;
					this.enabled = true;

					this.binds = {
						contextMenu: this.contextMenu.bind(this),

						mouseDown: this.mouseDown.bind(this),
						mouseMove: this.mouseMove.bind(this),
						mouseUp: this.mouseUp.bind(this),
						mouseWheel: this.mouseWheel.bind(this),

						mouseMoveDoc: this.mouseMoveDoc.bind(this),
						mouseUpDoc: this.mouseUpDoc.bind(this),

						click: this.click.bind(this),
						dblclick: this.dblclick.bind(this),

						touchStart: this.touchStart.bind(this),
						touchMove: this.touchMove.bind(this),
						touchEnd: this.touchEnd.bind(this),

						keyDown: this.keyDown.bind(this),
						keyPress: this.keyPress.bind(this),
						keyUp: this.keyUp.bind(this),
					};

					this.element.on("contextmenu", this.binds.contextMenu);

					this.element.on("mousedown", this.binds.mouseDown);
					this.element.on("mousemove", this.binds.mouseMove);
					this.element.on("mouseup", this.binds.mouseUp);
					this.element.on("mousewheel", this.binds.mouseWheel);

					(0, _libs.$)(this.doc).on("mousemove", this.binds.mouseMoveDoc);
					(0, _libs.$)(this.doc).on("mouseup", this.binds.mouseUpDoc);

					this.element.on("click", this.binds.click);
					this.element.on("dblclick", this.binds.dblclick);

					this.element.on("touchstart", this.binds.touchStart);
					this.element.on("touchmove", this.binds.touchMove);
					this.element.on("touchend", this.binds.touchEnd);

					(0, _libs.$)(this.wnd).on("keydown", this.binds.keyDown);
					(0, _libs.$)(this.wnd).on("keypress", this.binds.keyPress);
					(0, _libs.$)(this.wnd).on("keyup", this.binds.keyUp);
				}

				EventsToActions.prototype.addAction = function addAction(action, type, code, flags) {
					type = type.toLowerCase();
					if (!this.actions[type]) {
						this.actions[type] = {};
					}
					if (!this.actions[type][code]) {
						this.actions[type][code] = {};
					}
					if (!this.actions[type][code][flags]) {
						this.actions[type][code][flags] = [];
					}
					this.actions[type][code][flags].push(action);
				};

				EventsToActions.prototype.getActions = function getActions(type, code, flags) {
					return ((this.actions[type] || {})[code] || {})[flags] || [];
				};

				EventsToActions.prototype.fireActions = function fireActions(actions, e, data) {
					for (
						var _iterator = actions,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var action = _ref;

						action(e, data);
					}
				};

				EventsToActions.prototype.contextMenu = function contextMenu(e) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions("contextmenu", e.button, flags), e);
					}
				};

				EventsToActions.prototype.mouseDown = function mouseDown(e) {
					if (this.picked) {
						this.mouseUpDoc();
					}
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions("mousedown", e.button, flags), e);
						this.picked = {
							x: e.pageX,
							y: e.pageY,
							actions: this.getActions("mousedrag", e.button, flags),
						};
						this.fireActions(this.picked.actions, e, {
							state: "start",
						});
					}
				};

				EventsToActions.prototype.mouseMove = function mouseMove(e) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions("mousemove", e.button, flags), e);
					}
				};

				EventsToActions.prototype.mouseMoveDoc = function mouseMoveDoc(e) {
					if (this.enabled && this.picked) {
						this.fireActions(this.picked.actions, e, {
							state: "move",
							dx: e.pageX - this.picked.x,
							dy: e.pageY - this.picked.y,
						});
						this.picked = {
							x: e.pageX,
							y: e.pageY,
							actions: this.picked.actions,
						};
					}
				};

				EventsToActions.prototype.mouseUp = function mouseUp(e) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions("mouseup", e.button, flags), e);
					}
				};

				EventsToActions.prototype.mouseUpDoc = function mouseUpDoc(e) {
					if (this.picked) {
						this.fireActions(this.picked.actions, e, {
							state: "end",
						});
						delete this.picked;
					}
				};

				EventsToActions.prototype.mouseWheel = function mouseWheel(e) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions("mousewheel", 0, flags), e);
					}
				};

				EventsToActions.prototype.clicks = function clicks(e, type) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions(type, e.button, flags), e);
					}
				};

				EventsToActions.prototype.click = function click(e) {
					this.clicks(e, "click");
				};

				EventsToActions.prototype.dblclick = function dblclick(e) {
					this.clicks(e, "dblclick");
				};

				EventsToActions.prototype.touchPick = function touchPick(e, flags, touches) {
					var pos = EventsToActions.getPosition(touches);
					this.touchPicked = _extends({}, pos, {
						actions: this.getActions("touchdrag", touches.length, flags),
						code: touches.length,
						flags: flags,
					});
					this.fireActions(
						this.touchPicked.actions,
						e,
						_extends(
							{
								state: "start",
							},
							pos
						)
					);
				};

				EventsToActions.prototype.touchStart = function touchStart(e) {
					if (this.touchPicked) {
						this.touchEnd(e);
					}
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e),
							touches = e.touches || e.originalEvent.touches;
						this.fireActions(this.getActions("touchstart", touches.length, flags), e);
						this.touchPick(e, flags, touches);
					}
				};

				EventsToActions.prototype.touchMove = function touchMove(e) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e),
							touches = e.touches || e.originalEvent.touches;
						this.fireActions(this.getActions("touchmove", touches.length, flags), e);
						if (this.touchPicked) {
							if (this.touchPicked.code === touches.length && this.touchPicked.flags === flags) {
								var pos = EventsToActions.getPosition(touches);
								this.fireActions(
									this.touchPicked.actions,
									e,
									_extends(
										{
											state: "move",
											dx: pos.x - this.touchPicked.x,
											dy: pos.y - this.touchPicked.y,
										},
										pos
									)
								);
								this.touchPicked = _extends({}, this.touchPicked, pos);
							} else {
								this.touchEnd(e);
								this.touchPick(e, flags, touches);
							}
						}
					}
				};

				EventsToActions.prototype.touchEnd = function touchEnd(e) {
					if (this.touchPicked) {
						this.fireActions(this.touchPicked.actions, e, {
							state: "end",
						});
						delete this.touchPicked;
					}
				};

				EventsToActions.prototype.key = function key(e, type) {
					if (this.enabled) {
						var flags = EventsToActions.getEventFlags(e);
						this.fireActions(this.getActions(type, e.keyCode, flags), e);
					}
				};

				EventsToActions.prototype.keyDown = function keyDown(e) {
					this.key(e, "keydown");
				};

				EventsToActions.prototype.keyPress = function keyPress(e) {
					this.key(e, "keypress");
				};

				EventsToActions.prototype.keyUp = function keyUp(e) {
					this.key(e, "keyup");
				};

				EventsToActions.prototype.dispose = function dispose() {
					this.element.off("contextmenu", this.binds.contextMenu);

					this.element.off("mousedown", this.binds.mouseDown);
					this.element.off("mousemove", this.binds.mouseMove);
					this.element.off("mouseup", this.binds.mouseUp);
					this.element.off("mousewheel", this.binds.mouseWheel);

					(0, _libs.$)(this.doc).off("mousemove", this.binds.mouseMoveDoc);
					(0, _libs.$)(this.doc).off("mouseup", this.binds.mouseUpDoc);

					this.element.off("click", this.binds.click);
					this.element.off("dblclick", this.binds.dblclick);

					this.element.off("touchstart", this.binds.touchStart);
					this.element.off("touchmove", this.binds.touchMove);
					this.element.off("touchend", this.binds.touchEnd);

					(0, _libs.$)(this.wnd).off("keydown", this.binds.keyDown);
					(0, _libs.$)(this.wnd).off("keypress", this.binds.keyPress);
					(0, _libs.$)(this.wnd).off("keyup", this.binds.keyUp);
				};

				return EventsToActions;
			})();

			EventsToActions.modKeys = {
				Ctrl: 1,
				Shift: 2,
				Alt: 4,
			};
			EventsToActions.mouseButtons = {
				Left: 0,
				Middle: 1,
				Right: 2,
			};
			exports.default = EventsToActions;

			/***/
		},
		/* 53 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var FullScreen = (function () {
				function FullScreen() {
					_classCallCheck(this, FullScreen);
				}

				FullScreen.available = function available() {
					return (
						FullScreen._hasWebkitFullScreen || FullScreen._hasMozFullScreen || FullScreen._hasMsFullscreen
					);
				};

				FullScreen.activated = function activated() {
					if (FullScreen._hasWebkitFullScreen) {
						return document.webkitIsFullScreen;
					} else if (FullScreen._hasMozFullScreen) {
						return document.mozFullScreen;
					} else if (FullScreen._hasMsFullscreen) {
						return !!document.msFullscreenElement;
					} else {
						console.assert(false);
					}
				};

				FullScreen.addEventListener = function addEventListener(element, handler) {
					if (element.addEventListener) {
						element.addEventListener("webkitfullscreenchange", handler, false);
						element.addEventListener("mozfullscreenchange", handler, false);
						element.addEventListener("fullscreenchange", handler, false);
						element.addEventListener("MSFullscreenChange", handler, false);
					}
				};

				FullScreen.removeEventListener = function removeEventListener(element, handler) {
					if (element.removeEventListener) {
						element.removeEventListener("webkitfullscreenchange", handler, false);
						element.removeEventListener("mozfullscreenchange", handler, false);
						element.removeEventListener("fullscreenchange", handler, false);
						element.removeEventListener("MSFullscreenChange", handler, false);
					}
				};

				FullScreen.request = function request(element) {
					element = element || document.body;
					if (FullScreen._hasWebkitFullScreen) {
						element.webkitRequestFullScreen();
					} else if (FullScreen._hasMozFullScreen) {
						element.mozRequestFullScreen();
					} else if (FullScreen._hasMsFullscreen) {
						element.msRequestFullscreen();
					} else {
						console.assert(false);
					}
				};

				FullScreen.cancel = function cancel() {
					if (FullScreen._hasWebkitFullScreen) {
						document.webkitCancelFullScreen();
					} else if (FullScreen._hasMozFullScreen) {
						document.mozCancelFullScreen();
					} else if (FullScreen._hasMsFullscreen) {
						document.msExitFullscreen();
					} else {
						console.assert(false);
					}
				};

				return FullScreen;
			})();

			FullScreen._hasWebkitFullScreen = !!document.webkitCancelFullScreen;
			FullScreen._hasMozFullScreen = !!document.mozCancelFullScreen;
			FullScreen._hasMsFullscreen = !!document.documentElement.msRequestFullscreen;
			exports.default = FullScreen;

			/***/
		},
		/* 54 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _ImageBase2 = __webpack_require__(6);

			var _ImageBase3 = _interopRequireDefault(_ImageBase2);

			var _BaseMathUtils = __webpack_require__(2);

			var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

			var _Dom2Image = __webpack_require__(50);

			var _Dom2Image2 = _interopRequireDefault(_Dom2Image);

			var _DocMouseSimulator = __webpack_require__(49);

			var _DocMouseSimulator2 = _interopRequireDefault(_DocMouseSimulator);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var InteractiveImage = (function (_ImageBase) {
				_inherits(InteractiveImage, _ImageBase);

				function InteractiveImage(context, width, height, color, src, cache, injector) {
					_classCallCheck(this, InteractiveImage);

					var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

					_this.iId = "i" + _BaseMathUtils2.default.getUnique();
					var jFrame = (0, _libs.$)(
						'<iframe id="' +
							_this.iId +
							'" src="' +
							src +
							'" style="position: fixed; left: -1000px;"></iframe>'
					);
					(0, _libs.$)(_this.doc.body).append(jFrame);
					_this.frame = jFrame[0];

					_this.binds = {};

					if (injector) {
						injector(_this.frame.contentWindow);
					}

					if (
						_this.doc.implementation.hasFeature("www.http://w3.org/TR/SVG11/feature#Extensibility", "1.1")
					) {
						// svg foreignObject renderer
						_this.image = new Image();
						_this.binds.imageLoad = function () {
							_this.renderImage(_this.image);
							_this.finishRender();
						};
						(0, _libs.$)(_this.image).on("load", _this.binds.imageLoad);
						_this.svgRender = new _Dom2Image2.default(
							_this.frame.contentWindow,
							_this.frame.contentDocument,
							cache
						);
					} // otherwise - html2canvas

					_this.binds.frameLoad = function () {
						if (~_this.frame.contentDocument.title.indexOf("404")) {
							_this.startRender = function () {
								_this.renderNotFoundPage();
								_this.finishRender();
							};
							_this.finishLoad();
						} else {
							setTimeout(function () {
								if (_this.frame) {
									_this.width = (0, _libs.$)(_this.frame.contentDocument.body).width();
									_this.height = (0, _libs.$)(_this.frame.contentDocument.body).height();
									_this.resH = (_this.height / _this.width) * _this.resW;
									jFrame.css("width", _this.width + "px").css("height", _this.height + "px");
									jFrame.offset({ left: -_this.width - 100, top: 0 });
									if (_this.svgRender) {
										_this.simulator = new _DocMouseSimulator2.default(
											jFrame,
											_this.frame.contentDocument.body,
											_this.element
										);
										_this.simulator.addDocChangeClb(_this.finishLoad.bind(_this));
									}
									_this.startRender = function () {
										_this.render();
									};
									_this.finishLoad();
								}
							}, 500);
						}
					};
					(0, _libs.$)(_this.frame.contentWindow).on("load", _this.binds.frameLoad);
					return _this;
				}

				InteractiveImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
					return this.frame.contentDocument;
				};

				InteractiveImage.prototype.render = function render() {
					var _this2 = this;

					if (this.svgRender) {
						this.svgRender
							.toSvg(this.simulator.element, { height: this.height + "px", width: this.width + "px" })
							.then(function (dataUrl) {
								_this2.image.src = dataUrl;
							})
							.catch(function (error) {
								console.error("Dom2Image: ", error);
								_this2.renderBlankPage();
								_this2.finishRender();
							});
					} else {
						(0, _libs.html2canvas)(this.frame.contentDocument.body, { timeout: 30000 }).then(function (
							canvas
						) {
							_this2.renderImage(canvas);
							_this2.finishRender();
						});
					}
				};

				InteractiveImage.prototype.dispose = function dispose() {
					(0, _libs.$)(this.image).off("load", this.binds.imageLoad);
					(0, _libs.$)(this.frame.contentWindow).off("load", this.binds.frameLoad);
					(0, _libs.$)(this.doc.body)
						.find("#" + this.iId)
						.remove();
					if (this.image) {
						this.image.src = "";
						delete this.image;
					}
					this.frame.src = "";
					delete this.frame;
					_ImageBase.prototype.dispose.call(this);
				};

				InteractiveImage.prototype.simulate = function simulate(e, doc, x, y) {
					if (this.simulator) {
						this.simulator.simulate(e, doc, x, y);
					}
				};

				return InteractiveImage;
			})(_ImageBase3.default);

			exports.default = InteractiveImage;

			/***/
		},
		/* 55 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _GraphUtils = __webpack_require__(4);

			var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

			var _MathUtils = __webpack_require__(5);

			var _MathUtils2 = _interopRequireDefault(_MathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var LoadingAnimation = (function () {
				LoadingAnimation.prototype.dy = function dy(t, y) {
					var w = y[0],
						a = y[1];
					return [-this.g * Math.cos(a), w];
				};

				LoadingAnimation.prototype.integrate = function integrate(T) {
					var t = 0,
						dt = this.p.dt,
						os = this.os;
					while (t < T) {
						if (t + dt > T) {
							dt = T - t;
						}
						os = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
						t += dt;
					}
					return os;
				};

				LoadingAnimation.prototype.calcTimeTo = function calcTimeTo(target) {
					var t = 0,
						dt = this.p.dt,
						os = this.os;
					while (Math.abs(os[1] - target) > 1e-4) {
						var nos = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
						if ((nos[0] < 0 && nos[1] < target) || (nos[0] > 0 && nos[1] > target)) {
							dt /= 2;
						} else {
							os = nos;
							t += dt;
						}
					}
					return t;
				};

				LoadingAnimation.prototype.update = function update(T) {
					this.os = this.integrate(T);

					this.t += T;
					if (this.t >= this.p.updateInterval) {
						this.t = 0;
						var r = 0.04 * Math.min(this.c.width, this.c.height),
							a = this.os[1],
							x0 = 0.5 * this.c.width,
							y0 = 0.5 * this.c.height,
							ctx = this.ctx;

						ctx.clearRect(0, 0, this.c.width, this.c.height);
						ctx.beginPath();
						ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.p.color, 1);
						ctx.rect(0, 0, this.c.width, this.c.height);
						ctx.fill();

						ctx.beginPath();
						ctx.shadowBlur = 50;
						ctx.fillStyle = _GraphUtils2.default.color2Rgba(
							_GraphUtils2.default.inverseColor(this.p.color, 0.9),
							Math.abs(this.os[0] / 6.36)
						);
						ctx.shadowColor = _GraphUtils2.default.color2Rgba(
							_GraphUtils2.default.inverseColor(this.p.color, 1),
							0.9
						);
						ctx.shadowOffsetX = 0;
						ctx.shadowOffsetY = 0;
						ctx.font = "bold " + Math.round(0.25 * r) + "px Arial";
						ctx.textAlign = "center";
						ctx.textBaseline = "middle";
						ctx.fillText((0, _libs.tr)("Loading..."), x0, y0);

						var ps = 10,
							da = (2 * Math.PI) / ps; //2.5*_r/r
						ctx.shadowColor = _GraphUtils2.default.color2Rgba(
							_GraphUtils2.default.inverseColor(this.p.color, 1),
							0.7
						);
						for (var i = 0, _a = a, _r = 0.2 * r; i < ps; ++i, _r *= 0.9, _a += da) {
							ctx.beginPath();
							ctx.fillStyle = _GraphUtils2.default.color2Rgba(
								_GraphUtils2.default.inverseColor(this.p.color, (ps - i) / ps),
								(0.7 * (ps - i)) / ps
							);
							var cx = x0 + r * Math.cos(_a),
								cy = y0 - r * Math.sin(_a),
								nx = x0 + r * Math.cos(_a + da),
								ny = y0 - r * Math.sin(_a + da);
							ctx.shadowOffsetX = 0.2 * (nx - cx);
							ctx.shadowOffsetY = 0.2 * (ny - cy);
							ctx.arc(cx, cy, _r, 0, Math.PI * 2, 1);
							ctx.fill();
						}
						if (this.onChange) {
							this.onChange(this.c, this.p.color);
						}
					}
				};

				LoadingAnimation.prototype.getImage = function getImage() {
					return this.c;
				};

				LoadingAnimation.prototype.dispose = function dispose() {
					this.c.width = 0;
					this.c.height = 0;
					delete this.ctx;
					delete this.c;
				};

				LoadingAnimation.prototype.createSprite = function createSprite(n) {
					var c = _GraphUtils2.default.createCanvas(this.c.width * n, this.c.height),
						ctx = c.getContext("2d"),
						t = this.calcTimeTo(this.os[1] + Math.sign(this.os[0]) * 2 * Math.PI),
						dt = t / (n + 1);
					var updateInterval = this.p.updateInterval;

					this.p.updateInterval = 0;
					for (var i = 0; i < n; ++i) {
						this.update(dt);
						ctx.drawImage(this.c, i * this.c.width, 0);
					}
					this.p.updateInterval = updateInterval;
					return c;
				};

				function LoadingAnimation(width, height, color) {
					_classCallCheck(this, LoadingAnimation);

					this.c = _GraphUtils2.default.createCanvas(width, height);
					this.p = {
						g: 9.8,
						dt: 1 / 60,
						color: color,
						updateInterval: 0.25,
					};
					this.ctx = this.c.getContext("2d");
					this.os = [-2, Math.PI / 2];
					this.t = this.p.updateInterval;
				}

				return LoadingAnimation;
			})();

			exports.default = LoadingAnimation;

			/***/
		},
		/* 56 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var LoadingController = (function () {
				function LoadingController(view) {
					var showProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
					var loadingMsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

					_classCallCheck(this, LoadingController);

					this.view = view;
					this.progress = 0;
					this.showProgress = showProgress;
					this.getLoadingMsg = loadingMsg || LoadingController.defaultLoadingMsg;
					this.updateView();
				}

				LoadingController.defaultLoadingMsg = function defaultLoadingMsg(progress) {
					return ["Please wait... the Application is Loading: ", progress, "%"].join("");
				};

				LoadingController.prototype.dispose = function dispose() {
					this.showProgress = false;
					this.updateView();
					delete this.view;
				};

				LoadingController.prototype.setProgress = function setProgress(v) {
					this.progress = v;
					this.updateView();
				};

				LoadingController.prototype.updateView = function updateView() {
					if (this.view) {
						this.view.setState("widLoadingProgress", {
							enable: true,
							visible: this.showProgress,
							active: false,
						});

						this.view.setState("txtLoadingProgress", {
							value: this.getLoadingMsg(this.progress),
							visible: true,
						});

						for (
							var _iterator = this.view.getLinks(),
								_isArray = Array.isArray(_iterator),
								_i = 0,
								_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
							;

						) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var name = _ref;

							this.view.setState(name, {
								enable: false,
								visible: true,
								active: false,
							});
						}

						this.view.setState("inpPages", {
							visible: true,
							value: "",
						});

						this.view.setState("inpPage", {
							visible: true,
							enable: false,
							value: "",
						});
					}
				};

				return LoadingController;
			})();

			exports.default = LoadingController;

			/***/
		},
		/* 57 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _EventConverter2 = __webpack_require__(7);

			var _EventConverter3 = _interopRequireDefault(_EventConverter2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var MouseEventConverter = (function (_EventConverter) {
				_inherits(MouseEventConverter, _EventConverter);

				function MouseEventConverter(wnd, doc, element) {
					_classCallCheck(this, MouseEventConverter);

					var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

					_this.element = element;
					_this.binds = {
						convert: _this.convert.bind(_this),
					};
					(0, _libs.$)(_this.element).on("mousemove mousedown mouseover mouseout click", _this.binds.convert);
					(0, _libs.$)(_this.doc).on("mouseup", _this.binds.convert);
					return _this;
				}

				MouseEventConverter.prototype.dispose = function dispose() {
					(0, _libs.$)(this.element).off("mousemove mousedown mouseover mouseout click", this.binds.convert);
					(0, _libs.$)(this.doc).off("mouseup", this.binds.convert);
				};

				return MouseEventConverter;
			})(_EventConverter3.default);

			exports.default = MouseEventConverter;

			/***/
		},
		/* 58 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			var _MathUtils = __webpack_require__(5);

			var _MathUtils2 = _interopRequireDefault(_MathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Object3DWatcher = (function () {
				function Object3DWatcher(visual, boundBoxClb) {
					var testScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.testScale;

					_classCallCheck(this, Object3DWatcher);

					this.visual = visual;
					this.boundBoxClb = boundBoxClb;
					this.testScale = testScale;
					this.camera = visual.camera;
					this.element = this.visual.element;
					this.elementSize = { w: 1, h: 1 };
					this.orbit = visual.getOrbit();
					this.scale = 1;
					this.padding = 0;

					this.eps = 1e-4;
					this.v = new _libs.THREE.Vector3();
					this.dv = new _libs.THREE.Vector2();

					this.enabled = false;

					visual.addRenderCallback(this.update.bind(this));

					this.os = {
						vx: 0,
						vy: 0,
						x: 0,
						y: 0,
					};
					this.orbit.update();
					this.camera.updateMatrixWorld();
					var box = this.computeClientBoundBox(),
						k = 1.11;
					this.movePan({ x: -k * box.mid.x, y: -k * box.mid.y });
				}

				Object3DWatcher.prototype.setPadding = function setPadding(padding) {
					this.padding = padding;
				};

				Object3DWatcher.prototype.movePan = function movePan(dv) {
					this.orbit.pan(dv.x * this.visual.width(), -dv.y * this.visual.height());
				};

				Object3DWatcher.prototype.vToCamera = function vToCamera(v) {
					v.project(this.camera);
					return {
						x: 0.5 * v.x,
						y: 0.5 * v.y,
					};
				};

				Object3DWatcher.prototype.computeClientBoundBox = function computeClientBoundBox() {
					var box = this.boundBoxClb(),
						xs = [box.min.x, box.max.x],
						ys = [0, 0],
						zs = [box.min.z, box.max.z];

					var ps = [],
						res = { max: {}, min: {} };
					for (
						var _iterator = xs,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var x = _ref;

						for (
							var _iterator2 = ys,
								_isArray2 = Array.isArray(_iterator2),
								_i2 = 0,
								_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
							;

						) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var y = _ref2;

							for (
								var _iterator3 = zs,
									_isArray3 = Array.isArray(_iterator3),
									_i3 = 0,
									_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
								;

							) {
								var _ref3;

								if (_isArray3) {
									if (_i3 >= _iterator3.length) break;
									_ref3 = _iterator3[_i3++];
								} else {
									_i3 = _iterator3.next();
									if (_i3.done) break;
									_ref3 = _i3.value;
								}

								var z = _ref3;

								ps.push(this.vToCamera(this.v.set(x, y, z)));
							}
						}
					}

					ps.sort(function (p1, p2) {
						return p1.x - p2.x;
					});
					res.min.x = ps[0].x;
					res.max.x = ps[ps.length - 1].x;
					ps.sort(function (p1, p2) {
						return p1.y - p2.y;
					});
					res.min.y = ps[0].y;
					res.max.y = ps[ps.length - 1].y;

					res.width = res.max.x - res.min.x;
					res.height = res.max.y - res.min.y;

					res.mid = {
						x: 0.5 * (res.max.x + res.min.x),
						y: 0.5 * (res.max.y + res.min.y),
					};

					return res;
				};

				Object3DWatcher.prototype.setObject = function setObject(boundBoxClb) {
					this.boundBoxClb = boundBoxClb;
				};

				Object3DWatcher.prototype.testScale = function testScale() {
					return true;
				};

				Object3DWatcher.prototype.computeCorr = function computeCorr(K, min, max) {
					var corr = 0;
					if (K < 1) {
						if (min > -0.5) {
							corr = -0.5 - min;
						} else if (max < 0.5) {
							corr = 0.5 - max;
						}
					} else {
						if (min < -0.5) {
							corr = -0.5 - min;
						} else if (max > 0.5) {
							corr = 0.5 - max;
						}
					}
					return corr;
				};

				Object3DWatcher.prototype.centerView = function centerView(T) {
					var box = this.computeClientBoundBox(),
						Kx = this.elementSize.w / box.width,
						Ky = this.elementSize.h / box.height,
						K = Math.min(Kx, Ky),
						moving = false;

					if (this.testScale() && Math.abs(1 / K - this.scale) > this.eps) {
						var scale = 1 / K + 0.2 * (this.scale - 1 / K);
						this.orbit.setScale(this.orbit.getScale() / (K * scale));
						this.orbit.update();
						this.camera.updateMatrixWorld();
						box = this.computeClientBoundBox();
						Kx = this.elementSize.w / box.width;
						Ky = this.elementSize.h / box.height;
						K = Math.min(Kx, Ky);
						moving = true;
					}

					var dv = this.dv;
					if (K > 1 - this.eps) {
						if (this.padding) {
							var height = this.visual.height(),
								marg = (0.5 * (Ky - 1)) / Ky,
								pad = this.padding / height,
								dpad = Math.max(0, Math.abs(pad) - marg);
							dv.set(
								-box.mid.x,
								-Math.sign(pad) * Math.min(Math.max(0, marg - 20 / height), dpad) - box.mid.y
							);
						} else {
							dv.set(-box.mid.x, -box.mid.y);
						}
					} else {
						var px = 70 / this.visual.width(),
							py = 70 / this.visual.height();
						dv.set(
							this.computeCorr(Kx, box.min.x - px, box.max.x + px),
							this.computeCorr(Ky, box.min.y - py, box.max.y + py)
						);
					}

					if (Math.sqrt(this.os.vx * this.os.vx + this.os.vy * this.os.vy) > 0.003 || dv.length() > 0.003) {
						var dt = 1 / 60,
							t = 0,
							os = _extends({}, this.os, {
								x: 0,
								y: 0,
							});
						os.tf = function (vx, vy, x, y) {
							return {
								x: 75 * (dv.x - x),
								y: 75 * (dv.y - y),
							};
						};
						while (t < T) {
							if (t + dt > T) {
								dt = T - t;
							}
							os = this.integrate(os, dt);
							t += dt;
						}
						this.movePan(os);
						this.os = os;
						moving = true;
					}
					this.orbit.setMoving(moving);
				};

				Object3DWatcher.prototype.integrate = function integrate(os, dt) {
					var _MathUtils$rk = _MathUtils2.default.rk4(this.dy.bind(os), 0, dt, [os.vx, os.vy, os.x, os.y]),
						vx = _MathUtils$rk[0],
						vy = _MathUtils$rk[1],
						x = _MathUtils$rk[2],
						y = _MathUtils$rk[3];

					return _extends({}, os, {
						vx: vx,
						vy: vy,
						x: x,
						y: y,
					});
				};

				Object3DWatcher.prototype.dy = function dy(t, Y) {
					var vx = Y[0],
						vy = Y[1],
						x = Y[2],
						y = Y[3],
						vd = 15,
						tf = this.tf(vx, vy, x, y);

					return [tf.x - vd * vx, tf.y - vd * vy, vx, vy];
				};

				Object3DWatcher.prototype.update = function update(dt) {
					if (this.enabled && this.boundBoxClb) {
						this.centerView(dt);
					}
				};

				return Object3DWatcher;
			})();

			exports.default = Object3DWatcher;

			/***/
		},
		/* 59 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var Orbit = (function (_THREE$EventDispatche) {
				_inherits(Orbit, _THREE$EventDispatche);

				function Orbit(object, world) {
					_classCallCheck(this, Orbit);

					var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

					_this.moving = false;
					_this.object = object;
					_this.world = world;

					// Set to false to disable this control
					_this.enabled = true;

					// "target" sets the location of focus, where the object orbits around
					_this.target = new _libs.THREE.Vector3();

					// How far you can dolly in and out(PerspectiveCamera only)
					_this.minDistance = 0;
					_this.maxDistance = Infinity;

					// How far you can zoom in and out(OrthographicCamera only)
					_this.minZoom = 0;
					_this.maxZoom = Infinity;

					// How far you can orbit vertically, upper and lower limits.
					// Range is 0 to Math.PI radians.
					_this.minPolarAngle = 0; // radians
					_this.maxPolarAngle = Math.PI; // radians

					// How far you can orbit horizontally, upper and lower limits.
					// If set, must be a sub-interval of the interval [-Math.PI, Math.PI ].
					_this.minAzimuthAngle = -Infinity; // radians
					_this.maxAzimuthAngle = Infinity; // radians

					// Set to true to enable damping (inertia)
					// If damping is enabled, you must call controls.update() in your animation loop
					_this.enableDamping = false;
					_this.dampingFactor = 0.25;

					// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
					// Set to false to disable zooming
					_this.enableZoom = true;
					_this.zoomSpeed = 1.0;

					// Set to false to disable rotating
					_this.enableRotate = true;
					_this.rotateSpeed = 1.0;

					// Set to false to disable panning
					_this.enablePan = true;

					// Set to true to automatically rotate around the target
					// If auto-rotate is enabled, you must call controls.update() in your animation loop
					_this.autoRotate = false;
					_this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

					// for reset
					_this.target0 = _this.target.clone();
					_this.position0 = _this.object.position.clone();
					_this.zoom0 = _this.object.zoom;

					//
					// public methods
					//
					_this.getPolarAngle = function () {
						return spherical.phi;
					};

					_this.getAzimuthalAngle = function () {
						return spherical.theta;
					};

					_this.reset = function () {
						scope.target.copy(scope.target0);
						scope.object.position.copy(scope.position0);
						scope.object.zoom = scope.zoom0;

						scope.object.updateProjectionMatrix();
						scope.dispatchEvent(changeEvent);

						scope.update();
					};

					_this.zoomOut = function () {
						var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

						var _speed = this.zoomSpeed;
						this.zoomSpeed = speed;
						dollyIn(getZoomScale());
						this.zoomSpeed = _speed;
					};

					_this.zoomIn = function () {
						var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

						var _speed = this.zoomSpeed;
						this.zoomSpeed = speed;
						dollyOut(getZoomScale());
						this.zoomSpeed = _speed;
					};

					_this.getScale = function () {
						return scale;
					};

					_this.setScale = function (newScale) {
						scale = newScale;
					};

					// this method is exposed, but perhaps it would be better if we can make it private...
					_this.update = (function () {
						var offset = new _libs.THREE.Vector3();
						// so camera.up is the orbit axis
						var quat = new _libs.THREE.Quaternion().setFromUnitVectors(
							object.up,
							new _libs.THREE.Vector3(0, 1, 0)
						);
						var quatInverse = quat.clone().inverse();
						var lastPosition = new _libs.THREE.Vector3();
						var lastQuaternion = new _libs.THREE.Quaternion();

						return function update() {
							var position = scope.object.position;
							offset.copy(position).sub(scope.target);
							// rotate offset to "y-axis-is-up" space
							offset.applyQuaternion(quat);
							// angle from z-axis around y-axis
							spherical.setFromVector3(offset);
							if (scope.autoRotate) {
								rotateLeft(getAutoRotationAngle());
							}
							spherical.theta += sphericalDelta.theta;
							spherical.phi += sphericalDelta.phi;
							// restrict theta to be between desired limits
							spherical.theta = Math.max(
								scope.minAzimuthAngle,
								Math.min(scope.maxAzimuthAngle, spherical.theta)
							);
							// restrict phi to be between desired limits
							spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
							spherical.makeSafe();
							spherical.radius *= scale;
							// restrict radius to be between desired limits
							spherical.radius = Math.max(
								scope.minDistance,
								Math.min(scope.maxDistance, spherical.radius)
							);
							// move target to panned location
							scope.target.add(panOffset);
							offset.setFromSpherical(spherical);
							// rotate offset back to "camera-up-vector-is-up" space
							offset.applyQuaternion(quatInverse);
							position.copy(scope.target).add(offset);
							scope.object.lookAt(scope.target);

							if (scope.enableDamping === true) {
								sphericalDelta.theta *= 1 - scope.dampingFactor;
								sphericalDelta.phi *= 1 - scope.dampingFactor;
							} else {
								sphericalDelta.set(0, 0, 0);
							}

							scale = 1;
							panOffset.set(0, 0, 0);

							// update condition is:
							// min(camera displacement, camera rotation in radians)^2 > EPS
							// using small-angle approximation cos(x/2) = 1-x^2 / 8

							if (
								zoomChanged ||
								lastPosition.distanceToSquared(scope.object.position) > EPS ||
								8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS
							) {
								scope.dispatchEvent(changeEvent);

								lastPosition.copy(scope.object.position);
								lastQuaternion.copy(scope.object.quaternion);
								zoomChanged = false;

								return true;
							}
							return false;
						};
					})();

					_this.dispose = function () {};

					//
					// internals
					//
					var scope = _this;
					var changeEvent = { type: "change" };
					var EPS = 1e-6;
					// current position in spherical coordinates
					var spherical = new _libs.THREE.Spherical();
					var sphericalDelta = new _libs.THREE.Spherical();

					var scale = 1;
					var panOffset = new _libs.THREE.Vector3();
					var zoomChanged = false;

					function getAutoRotationAngle() {
						return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;
					}

					function getZoomScale() {
						return Math.pow(0.95, scope.zoomSpeed);
					}

					function rotateLeft(angle) {
						sphericalDelta.theta -= angle;
					}

					function rotateUp(angle) {
						sphericalDelta.phi -= angle;
					}

					var panLeft = (function () {
						var v = new _libs.THREE.Vector3();
						return function panLeft(distance, objectMatrix) {
							v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
							v.multiplyScalar(-distance);
							panOffset.add(v);
						};
					})();

					var panUp = (function () {
						var v = new _libs.THREE.Vector3();
						return function panUp(distance, objectMatrix) {
							v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix
							v.multiplyScalar(distance);
							panOffset.add(v);
						};
					})();

					// deltaX and deltaY are in pixels; right and down are positive
					scope.pan = (function () {
						var offset = new _libs.THREE.Vector3();
						return function pan(deltaX, deltaY) {
							var clientWidth = scope.world.width(),
								clientHeight = scope.world.height();
							if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
								// perspective
								var position = scope.object.position;
								offset.copy(position).sub(scope.target);
								var targetDistance = offset.length();
								// half of the fov is center to top of screen
								targetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0);
								// we actually don't use screenWidth, since perspective camera is fixed to screen height
								panLeft((2 * deltaX * targetDistance) / clientHeight, scope.object.matrix);
								panUp((2 * deltaY * targetDistance) / clientHeight, scope.object.matrix);
							} else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
								// orthographic
								panLeft(
									(deltaX * (scope.object.right - scope.object.left)) /
										scope.object.zoom /
										clientWidth,
									scope.object.matrix
								);
								panUp(
									(deltaY * (scope.object.top - scope.object.bottom)) /
										scope.object.zoom /
										clientHeight,
									scope.object.matrix
								);
							} else {
								// camera neither orthographic nor perspective
								console.warn(
									"WARNING: OrbitControls.js encountered an unknown camera type-pan disabled."
								);
								scope.enablePan = false;
							}
						};
					})();

					function dollyIn(dollyScale) {
						if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
							scale /= dollyScale;
						} else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
							scope.object.zoom = Math.max(
								scope.minZoom,
								Math.min(scope.maxZoom, scope.object.zoom * dollyScale)
							);
							scope.object.updateProjectionMatrix();
							zoomChanged = true;
						} else {
							console.warn(
								"WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled."
							);
							scope.enableZoom = false;
						}
					}

					function dollyOut(dollyScale) {
						if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
							scale *= dollyScale;
						} else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
							scope.object.zoom = Math.max(
								scope.minZoom,
								Math.min(scope.maxZoom, scope.object.zoom / dollyScale)
							);
							scope.object.updateProjectionMatrix();
							zoomChanged = true;
						} else {
							console.warn(
								"WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled."
							);
							scope.enableZoom = false;
						}
					}

					/* Actions */

					function rotate(event, data) {
						if (scope.enabled && scope.enableRotate && data.state === "move") {
							var clientWidth = scope.world.width(),
								clientHeight = scope.world.height();
							// rotating across whole screen goes 360 degrees around
							rotateLeft(((2 * Math.PI * data.dx) / clientWidth) * scope.rotateSpeed);
							// rotating up and down along whole screen attempts to go 360, but limited to 180
							rotateUp(((2 * Math.PI * data.dy) / clientHeight) * scope.rotateSpeed);
							scope.update();
						}
					}

					function pan(event, data) {
						if (scope.enabled && scope.enablePan && data.state === "move") {
							scope.pan(data.dx, data.dy);
							scope.update();
						}
					}

					function offsetDolly(event, data) {
						if (scope.enabled && scope.enableZoom && data.state === "move") {
							if (data.dy > 0) {
								dollyIn(getZoomScale());
							} else if (data.dy < 0) {
								dollyOut(getZoomScale());
							}
							scope.update();
						}
					}

					function wheelDolly(event) {
						if (scope.enabled && scope.enableZoom) {
							if (event.deltaY > 0) {
								dollyOut(getZoomScale());
							} else if (event.deltaY < 0) {
								dollyIn(getZoomScale());
							}
							scope.update();
						}
					}

					_this.actions = {
						rotate: rotate,
						pan: pan,
						offsetDolly: offsetDolly,
						wheelDolly: wheelDolly,

						// force an update at start
					};
					_this.update();
					return _this;
				}

				Orbit.prototype.setMoving = function setMoving(moving) {
					this.moving = moving;
				};

				Orbit.prototype.isMoving = function isMoving() {
					return this.moving;
				};

				return Orbit;
			})(_libs.THREE.EventDispatcher);

			exports.default = Orbit;

			/***/
		},
		/* 60 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _ImageBase2 = __webpack_require__(6);

			var _ImageBase3 = _interopRequireDefault(_ImageBase2);

			var _Pdf = __webpack_require__(19);

			var _Pdf2 = _interopRequireDefault(_Pdf);

			var _BaseMathUtils = __webpack_require__(2);

			var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

			var _CustomEventConverter = __webpack_require__(16);

			var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

			var _PolyTarget = __webpack_require__(73);

			var _PolyTarget2 = _interopRequireDefault(_PolyTarget);

			var _Finder = __webpack_require__(17);

			var _Finder2 = _interopRequireDefault(_Finder);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var PdfImage = (function (_ImageBase) {
				_inherits(PdfImage, _ImageBase);

				function PdfImage(context, width, height, color, pdf, n) {
					_classCallCheck(this, PdfImage);

					var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

					_this.query = "";
					_this.n = n;
					_this.pdf = pdf;
					_this.v = {
						x: 0,
						y: 0,
						z: 0,
						set: function set(x, y, z) {
							this.x = x;
							this.y = y;
							this.z = z;
							return this;
						},
						transform: function transform(m) {
							var x = m.m[0][0] * this.x + m.m[1][0] * this.y + m.m[2][0] * this.z,
								y = m.m[0][1] * this.x + m.m[1][1] * this.y + m.m[2][1] * this.z,
								z = m.m[0][2] * this.x + m.m[0][2] * this.y + m.m[2][0] * this.z;
							this.x = x;
							this.y = y;
							this.z = z;
							return this;
						},
					};
					_this.m = {
						m: [
							[1, 0, 0],
							[0, 1, 0],
							[0, 0, 1],
						],
						set: function set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
							this.m = [
								[m00, m01, m02],
								[m10, m11, m12],
								[m20, m21, m22],
							];
							return this;
						},
					};

					_this.startRender = function () {
						_this.pdf.getHandler(_this.render.bind(_this));
					};
					Promise.resolve().then(function () {
						return _this.pdf.getHandler(_this.init.bind(_this));
					});

					_this.cssLayerRequests = [];
					return _this;
				}

				PdfImage.prototype.setQuery = function setQuery(query) {
					this.query = query.trim();
					if (this.textContent) {
						this.setHits(this.textContent);
						// this.finishLoad();
					}
				};

				PdfImage.prototype.rectSize = function rectSize(r) {
					return {
						width: r[2] - r[0],
						height: r[3] - r[1],
					};
				};

				PdfImage.prototype.createPoly = function createPoly(m, p, s) {
					var poly = [],
						v = this.v;
					v.set(p.x, p.y, 1).transform(m);
					poly.push({ x: v.x, y: v.y });
					v.set(p.x, p.y + s.height, 1).transform(m);
					poly.push({ x: v.x, y: v.y });
					v.set(p.x + s.width, p.y + s.height, 1).transform(m);
					poly.push({ x: v.x, y: v.y });
					v.set(p.x + s.width, p.y, 1).transform(m);
					poly.push({ x: v.x, y: v.y });
					return poly;
				};

				PdfImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
					return this;
				};

				PdfImage.prototype.simulate = function simulate(e, doc, x, y) {
					if (this.eventConverter) {
						this.eventConverter.convert(e, { doc: doc, x: x, y: y });
					}
				};

				PdfImage.prototype.setAnnotations = function setAnnotations(annos) {
					var _this2 = this;

					var t = this.viewport.transform,
						htmls = [],
						r = function r(n) {
							return (n * 100 + "").substr(0, 5);
						},
						targets = [];
					this.m.set(t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 1);

					for (
						var _iterator = annos,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var anno = _ref;

						if (anno.subtype === "Link" || anno.subtype === "Widget") {
							var rect = anno.rect,
								aPos = {
									x: rect[0],
									y: rect[1],
								},
								aSz = this.rectSize(rect);
							var _target = new _PolyTarget2.default(
								this.createPoly(this.m, aPos, aSz).map(function (p) {
									return { x: p.x / _this2.viewport.width, y: 1 - p.y / _this2.viewport.height };
								})
							);
							_target.anno = anno;
							_target.callback = this.annoClb.bind(this);
							targets.push(_target);
							var p = _target.poly;
							htmls.push(
								'<div class="fb3d-block fb3d-link" style="top: ' +
									r(1 - p[2].y) +
									"%; left: " +
									r(p[0].x) +
									"%; width: " +
									r(p[2].x - p[0].x) +
									"%; height: " +
									r(p[2].y - p[0].y) +
									'%;"><a></a></div>'
							);
						}
					}
					if (targets.length) {
						this.eventConverter = new _CustomEventConverter2.default(
							this.wnd,
							this.doc,
							_PolyTarget2.default.test,
							this.getSimulatedDoc()
						);
						for (
							var _iterator2 = targets,
								_isArray2 = Array.isArray(_iterator2),
								_i2 = 0,
								_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
							;

						) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var target = _ref2;

							this.eventConverter.addCustom(target);
						}
					}
					this.cssLayer = {
						html: htmls.length ? "<pdf-layer>" + htmls.join("") + "</pdf-layer>" : undefined,
					};
					this.resolveCssLayerRequests();
				};

				PdfImage.prototype.resolveCssLayerRequests = function resolveCssLayerRequests() {
					if (this.cssLayer) {
						for (
							var _iterator3 = this.cssLayerRequests,
								_isArray3 = Array.isArray(_iterator3),
								_i3 = 0,
								_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
							;

						) {
							var _ref3;

							if (_isArray3) {
								if (_i3 >= _iterator3.length) break;
								_ref3 = _iterator3[_i3++];
							} else {
								_i3 = _iterator3.next();
								if (_i3.done) break;
								_ref3 = _i3.value;
							}

							var r = _ref3;

							r(this.cssLayer.html ? this.cssLayer : undefined);
						}
					}
				};

				PdfImage.prototype.getCSSLayer = function getCSSLayer() {
					var _this3 = this;

					return new Promise(function (resolve) {
						_this3.cssLayerRequests.push(resolve);
						_this3.resolveCssLayerRequests();
					});
				};

				PdfImage.prototype.setHits = function setHits(textContent) {
					this.textContent = textContent;
					if (this.query !== "") {
						this.finder = new _Finder2.default(
							textContent.items.map(function (item) {
								return item.str;
							}),
							this.query,
							{ contexts: false }
						);
					}
				};

				PdfImage.prototype.renderHits = function renderHits() {
					var _this4 = this;

					if (this.finder) {
						var view = this.page.view,
							testSz = (0, _libs.$)(
								'<div style="position: absolute; visibility: hidden;"></div>'
							).appendTo("body"),
							textDiv = testSz[0],
							baseOffset = testSz.offset().left;
						for (
							var _iterator4 = this.finder.getHits(),
								_isArray4 = Array.isArray(_iterator4),
								_i4 = 0,
								_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
							;

						) {
							var _ref4;

							if (_isArray4) {
								if (_i4 >= _iterator4.length) break;
								_ref4 = _iterator4[_i4++];
							} else {
								_i4 = _iterator4.next();
								if (_i4.done) break;
								_ref4 = _i4.value;
							}

							var hit = _ref4;

							var item = this.textContent.items[hit.index],
								t = _libs.PDFJS.Util.transform(this.viewport.transform, item.transform),
								style = this.textContent.styles[item.fontName],
								angle = Math.atan2(t[1], t[0]) + (style.vertical ? Math.PI / 2 : 0),
								fontHeight = Math.sqrt(t[2] * t[2] + t[3] * t[3]),
								fontAscent = style.ascent
									? style.ascent * fontHeight
									: style.descent
									? (1 + style.descent) * fontHeight
									: fontHeight;
							testSz.html(
								item.str.substr(0, hit.offset) +
									"<span>" +
									item.str.substr(hit.offset, hit.length) +
									"</span>" +
									item.str.substr(hit.offset + hit.length)
							);

							textDiv.style.fontSize = fontHeight + "px";
							textDiv.style.fontFamily = style.fontFamily;

							var testSpan = testSz.find("span"),
								iwidth = style.vertical
									? item.height * this.viewport.scale
									: item.width * this.viewport.scale,
								width = testSz.width(),
								relativeOffset = (testSpan.offset().left - baseOffset) / width;
							this.m.set(
								1,
								0,
								0,
								0,
								1,
								0,
								t[4] + fontAscent * Math.sin(angle),
								t[5] - fontAscent * Math.cos(angle),
								1
							);
							var poly = this.createPoly(
								this.m,
								{ x: relativeOffset * iwidth, y: 0 },
								{ width: (iwidth * testSpan.width()) / width, height: testSpan.height() }
							);
							poly = poly.map(function (p) {
								return { x: p.x / _this4.viewport.width, y: 1 - p.y / _this4.viewport.height };
							});
							this.renderHit(poly);
						}
						testSz.remove();
					}
				};

				PdfImage.prototype.annoClb = function annoClb(e, data) {
					if (this.context.dispatchEvent) {
						this.context.dispatchEvent({
							type: "pdfAnnotation",
							event: e,
							annotation: data.target.anno,
						});
					}
				};

				PdfImage.prototype.calcViewport = function calcViewport() {
					var scale = _BaseMathUtils2.default.calcScale(
						this.size.width,
						this.size.height,
						this.resW,
						this.resH
					);
					if (!this.viewport || Math.abs(this.viewport.scale - scale) > 1e-4) {
						this.viewport = this.page.getViewport({ scale: scale });
						if (this.type !== "full") {
							if (this.type === "right") {
								this.viewport.offsetX += 0.5 * this.viewport.width * 1.0005;
								this.viewport.transform[4] -= 0.5 * this.viewport.width * 1.0005;
								this.viewport.width *= 0.5 / 1.0005;
							} else {
								this.viewport.width /= 2;
							}
						}
						this.resW = this.width = this.viewport.width;
						this.resH = this.height = this.viewport.height;
					}
				};

				PdfImage.prototype.init = function init() {
					var _this5 = this;

					this.type = this.pdf.getPageType(this.n);
					this.pdf
						.getPage(this.n)
						.then(function (page) {
							_this5.page = page;
							_this5.size = _Pdf2.default.getPageSize(page);
							if (_this5.type !== "full") {
								_this5.size.width /= 2;
							}
							page.getAnnotations().then(_this5.setAnnotations.bind(_this5));
							page.getTextContent().then(_this5.setHits.bind(_this5));
							_this5.calcViewport();
							_this5.finishLoad();
						})
						.catch(function (e) {
							console.error("Cannot load PDF page: " + (_this5.n + 1));
							console.error(e);
							_this5.finishLoad();
						});
				};

				PdfImage.prototype.setResolution = function setResolution(res) {
					_ImageBase.prototype.setResolution.call(this, res);
					if (this.page) {
						this.calcViewport();
					}
				};

				PdfImage.prototype.render = function render(handler) {
					var _this6 = this;

					if (this.page) {
						var ctx = this.pushCtx();
						this.ctx.clearRect(0, 0, this.c.width, this.c.height);
						this.renderTask = this.page.render({
							canvasContext: this.ctx,
							viewport: this.viewport,
						});
						this.renderTask.onContinue = function (continueRender) {
							if (_this6.renderPause) {
								_this6.continueRender = continueRender;
							} else {
								continueRender();
							}
						};
						this.renderTask.promise
							.then(function () {
								_this6.renderHits();
								_this6.popCtx();
								_this6.finishRender();
							})
							.catch(function (e) {
								_this6.popCtx();
								_this6.finishRender(true);
							});
					} else {
						this.renderBlankPage();
						this.finishRender();
					}
				};

				return PdfImage;
			})(_ImageBase3.default);

			exports.default = PdfImage;

			/***/
		},
		/* 61 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Search = (function () {
				function Search(container, pages) {
					_classCallCheck(this, Search);

					this.container = container;
					this.pages = pages;
					this.prevResults = [];
					container.html(
						'\n      <div class="search">\n        <div class="query">\n          <input class="inpQuery" type="text" maxlength="30" value="" />\n        </div>\n        <div class="results">\n        </div>\n        <div class="status">\n\n        </div>\n      </div>\n    '.fb3dQFilter()
					);
					this.query = container.find(".query input");
					this.results = container.find(".results");
					this.status = container.find(".status");

					this.binds = {
						navigate: this.navigate.bind(this),
						doQuery: this.doQuery.bind(this),
					};

					this.query.on("keydown", this.binds.doQuery);
					this.results.on("click", this.binds.navigate);
				}

				Search.prototype.dispose = function dispose() {
					this.results.off("click", this.binds.navigate);
					this.query.off("keydown", this.binds.doQuery);
				};

				Search.prototype.navigate = function navigate(e) {
					e.preventDefault();
					if (this.onNavigate !== undefined) {
						var target = (0, _libs.$)(e.target);
						if (!target.hasClass("result")) {
							var t = target.find(".result");
							if (t.length) {
								target = t;
							} else {
								while (target.length && !target.hasClass("result")) {
									target = (0, _libs.$)(target[0].parentNode);
								}
							}
						}
						var page = target.attr("data");
						if (page !== undefined) {
							this.onNavigate(parseInt(page));
						}
					}
				};

				Search.prototype.doQuery = function doQuery() {
					var _this = this;

					if (this.onQuery) {
						var queryStamp = (this.queryStamp = Date.now());
						setTimeout(function () {
							if (queryStamp === _this.queryStamp) {
								_this.onQuery(_this.query[0].value.trim());
							}
						}, 1000);
					}
				};

				Search.prototype.setResults = function setResults(results, lastPage) {
					if (this.prevResults.length && results[0] !== this.prevResults[0]) {
						this.prevResults = [];
						this.results.html("");
					}
					var htmls = [];
					for (var i = this.prevResults.length; i < results.length; ++i) {
						var result = results[i];
						htmls.push('<div class="result" data="' + result.page + '">');
						htmls.push("<a>");
						htmls.push("<div>" + result.contexts.join("</div><div>") + "</div>");
						htmls.push("</a>");
						htmls.push("</div>");
					}
					(0, _libs.$)(htmls.join("")).appendTo(this.results);
					this.prevResults = [].concat(results);
					if (lastPage === undefined) {
						this.status.html("");
					} else {
						this.status.html(lastPage + 1 + " of " + this.pages);
					}
				};

				return Search;
			})();

			exports.default = Search;

			/***/
		},
		/* 62 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _ImageBase2 = __webpack_require__(6);

			var _ImageBase3 = _interopRequireDefault(_ImageBase2);

			var _Utils = __webpack_require__(3);

			var _Utils2 = _interopRequireDefault(_Utils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var StaticImage = (function (_ImageBase) {
				_inherits(StaticImage, _ImageBase);

				function StaticImage(context, width, height, color, src) {
					_classCallCheck(this, StaticImage);

					var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

					_this.binds = {};
					_this.image = new Image();
					_this.image.crossOrigin = "Anonymous";
					_this.binds.imageLoad = function () {
						_this.width = _this.image.width;
						_this.height = _this.image.height;
						_this.resH = (_this.height / _this.width) * _this.resW;
						_this.startRender = function () {
							_this.renderImage(_this.image);
							_this.finishRender();
						};
						_this.finishLoad();
					};
					_this.binds.imageError = function () {
						_this.startRender = function () {
							_this.renderNotFoundPage();
							_this.finishRender();
						};
						_this.finishLoad();
					};
					(0, _libs.$)(_this.image).on("load", _this.binds.imageLoad).on("error", _this.binds.imageError);
					_this.image.src = _Utils2.default.normalizeUrl(src);
					return _this;
				}

				StaticImage.prototype.dispose = function dispose() {
					(0, _libs.$)(this.image).off("load", this.binds.imageLoad).off("error", this.binds.imageError);
					this.image.src = "";
					delete this.image;
					_ImageBase.prototype.dispose.call(this);
				};

				return StaticImage;
			})(_ImageBase3.default);

			exports.default = StaticImage;

			/***/
		},
		/* 63 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var TextureAnimator = (function () {
				function TextureAnimator(img, tilesHoriz, tilesVert, numTiles, tileDispDuration) {
					_classCallCheck(this, TextureAnimator);

					var texture = new _libs.THREE.Texture();
					texture.minFilter = _libs.THREE.LinearFilter;
					texture.image = img;
					texture.needsUpdate = true;

					// note: texture passed by reference, will be updated by the update function.
					this.texture = texture;
					this.tilesHorizontal = tilesHoriz;
					this.tilesVertical = tilesVert;
					// how many images does this spritesheet contain?
					//  usually equals tilesHoriz * tilesVert, but not necessarily,
					//  if there at blank tiles at the bottom of the spritesheet.
					this.numberOfTiles = numTiles;
					texture.repeat.set(1 / this.tilesHorizontal, 1 / this.tilesVertical);

					// how long should each image be displayed?
					this.tileDisplayDuration = tileDispDuration;

					// how long has the current image been displayed?
					this.currentDisplayTime = 0;

					// which image is currently being displayed?
					this.currentTile = 0;
				}

				TextureAnimator.prototype.update = function update(milliSec) {
					this.currentDisplayTime += milliSec;
					while (this.currentDisplayTime > this.tileDisplayDuration) {
						this.currentDisplayTime -= this.tileDisplayDuration;
						++this.currentTile;
						if (this.currentTile == this.numberOfTiles) this.currentTile = 0;
						var currentColumn = this.currentTile % this.tilesHorizontal;
						this.texture.offset.x = currentColumn / this.tilesHorizontal;
						var currentRow = Math.floor(this.currentTile / this.tilesHorizontal);
						this.texture.offset.y = currentRow / this.tilesVertical;
					}
				};

				TextureAnimator.prototype.dispose = function dispose() {
					var img = this.texture.image;
					img.height = img.width = 0;
					this.texture.dispose();
				};

				return TextureAnimator;
			})();

			exports.default = TextureAnimator;

			/***/
		},
		/* 64 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _Utils = __webpack_require__(3);

			var _Utils2 = _interopRequireDefault(_Utils);

			var _MouseEventConverter2 = __webpack_require__(57);

			var _MouseEventConverter3 = _interopRequireDefault(_MouseEventConverter2);

			var _ThreeEventConverter = __webpack_require__(20);

			var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var ThreeMouseEventConverter = (function (_MouseEventConverter) {
				_inherits(ThreeMouseEventConverter, _MouseEventConverter);

				function ThreeMouseEventConverter(wnd, doc, visualWorld, test) {
					_classCallCheck(this, ThreeMouseEventConverter);

					var _this = _possibleConstructorReturn(
						this,
						_MouseEventConverter.call(this, wnd, doc, visualWorld.element)
					);

					_Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
					return _this;
				}

				ThreeMouseEventConverter.prototype.getCallback = function getCallback(object) {
					return object.object.userData.mouseCallback;
				};

				ThreeMouseEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
					var jElement = (0, _libs.$)(this.element);
					var offset = jElement.offset();
					this.coords.x = ((e.pageX - offset.left) / jElement.width()) * 2 - 1;
					this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
					return this.coords;
				};

				return ThreeMouseEventConverter;
			})(_MouseEventConverter3.default);

			exports.default = ThreeMouseEventConverter;

			/***/
		},
		/* 65 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _Utils = __webpack_require__(3);

			var _Utils2 = _interopRequireDefault(_Utils);

			var _TouchEventConverter2 = __webpack_require__(67);

			var _TouchEventConverter3 = _interopRequireDefault(_TouchEventConverter2);

			var _ThreeEventConverter = __webpack_require__(20);

			var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var ThreeTouchEventConverter = (function (_TouchEventConverter) {
				_inherits(ThreeTouchEventConverter, _TouchEventConverter);

				function ThreeTouchEventConverter(wnd, doc, visualWorld, test) {
					_classCallCheck(this, ThreeTouchEventConverter);

					var _this = _possibleConstructorReturn(
						this,
						_TouchEventConverter.call(this, wnd, doc, visualWorld.element)
					);

					_Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
					return _this;
				}

				ThreeTouchEventConverter.prototype.getCallback = function getCallback(object) {
					return object.object.userData.touchCallback;
				};

				ThreeTouchEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
					var jElement = (0, _libs.$)(this.element),
						offset = jElement.offset(),
						touches = e.touches || e.originalEvent.touches,
						touch = touches.length ? touches[0] : (this.lastTouches || [{ pageX: 0, pageY: 0 }])[0],
						pageX = touch.pageX,
						pageY = touch.pageY;
					this.lastTouches = touches.length ? touches : this.lastTouches;
					this.coords.x = ((pageX - offset.left) / jElement.width()) * 2 - 1;
					this.coords.y = -((pageY - offset.top) / jElement.height()) * 2 + 1;
					return this.coords;
				};

				return ThreeTouchEventConverter;
			})(_TouchEventConverter3.default);

			exports.default = ThreeTouchEventConverter;

			/***/
		},
		/* 66 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			var _ImageFactory = __webpack_require__(8);

			var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

			var _GraphUtils = __webpack_require__(4);

			var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var Thumbnails = (function () {
				function Thumbnails(context, container, thumbnailsClb, size) {
					var _this = this;

					var props =
						arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { kWtoH: 210 / 297 };

					_classCallCheck(this, Thumbnails);

					this.container = container;
					this.p = props;
					this.thumbnailsClb = thumbnailsClb;
					this.size = size;
					this.queue = { first: 0, len: 0 };
					this.canvas = _GraphUtils2.default.createCanvas();
					this.imageFactory = new _ImageFactory2.default(
						_extends({}, context, {
							renderCanvas: this.canvas,
							renderCanvasCtx: this.canvas.getContext("2d"),
						})
					);
					this.thumbnails = [];
					for (var i = 0; i < size; ++i) {
						var info = this.thumbnailsClb(i);
						this.thumbnails.push(
							_extends({}, info, {
								index: i,
								loaded: info.type === "thumbnail-image",
								heading: null,
								thumbnail: null,
								title: info.title || i,
							})
						);
					}

					this.binds = {
						update: this.update.bind(this),
						navigate: function navigate(e) {
							e.preventDefault();
							if (_this.onNavigate) {
								var node = e.target;
								while (node && !node.dataThumbnail) {
									node = node.parentNode;
								}
								_this.onNavigate(node.dataThumbnail.index);
							}
						},
					};
					this.container.on("scroll", this.binds.update);
				}

				Thumbnails.prototype.getSize = function getSize() {
					return this.size;
				};

				Thumbnails.prototype.setEnable = function setEnable(enable) {
					this.enable = enable;
					this.update();
				};

				Thumbnails.prototype.dispose = function dispose() {
					this.container.find("a").off("click", this.binds.navigate);
					this.container.off("scroll", this.binds.update);
					this.container.html("");
					this.canvas.height = this.canvas.width = 0;
					delete this.canvas;
				};

				Thumbnails.prototype.setLoadQueue = function setLoadQueue(first, len) {
					var _this2 = this;

					first = Math.min(first, this.size - 1);
					len = Math.min(len, this.size - first);
					this.queue = { first: first, len: len };
					Promise.resolve().then(function () {
						return _this2.update();
					});
				};

				Thumbnails.prototype.load = function load(thumbnail) {
					var _this3 = this;

					this.loading = true;
					var wrapper = this.imageFactory.build(
						thumbnail,
						thumbnail.number === undefined ? thumbnail.index : thumbnail.number,
						this.p.kWtoH * 300,
						300
					);
					wrapper.onChange = function (canvas) {
						_this3.setImage(thumbnail, canvas.toDataURL("image/png"));
						thumbnail.loaded = true;
						wrapper.dispose();
						_this3.loading = false;
						Promise.resolve().then(function () {
							return _this3.update();
						});
					};
				};

				Thumbnails.prototype.getActive = function getActive() {
					var first = this.container.scrollTop(),
						last = first + this.container.height(),
						res = [];
					for (
						var _iterator = this.thumbnails,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var thumbnail = _ref;

						if (Math.max(thumbnail.first, first) < Math.min(thumbnail.last, last)) {
							res.push(thumbnail);
						}
					}
					return res;
				};

				Thumbnails.prototype.update = function update() {
					if (!this.loading && this.canvas) {
						if (this.enable) {
							if (!this.built) {
								this.render();
							}
							var active = this.getActive();
							for (
								var _iterator2 = active,
									_isArray2 = Array.isArray(_iterator2),
									_i2 = 0,
									_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
								;

							) {
								var _ref2;

								if (_isArray2) {
									if (_i2 >= _iterator2.length) break;
									_ref2 = _iterator2[_i2++];
								} else {
									_i2 = _iterator2.next();
									if (_i2.done) break;
									_ref2 = _i2.value;
								}

								var thumbnail = _ref2;

								if (!thumbnail.loaded) {
									this.load(thumbnail);
									break;
								}
							}
						}
						if (!this.loading) {
							for (var i = this.queue.first; i < this.queue.first + this.queue.len; ++i) {
								var t = this.thumbnails[i];
								if (!t.loaded) {
									this.load(t);
									break;
								}
							}
						}
					}
				};

				Thumbnails.prototype.setImage = function setImage(thumbnail, img) {
					var trigger = thumbnail.img !== img;
					thumbnail.img = img;
					if (thumbnail.thumbnail) {
						thumbnail.thumbnail.css("background-image", ["url('", img, "')"].join(""));
						thumbnail.thumbnail.removeClass("loading");
					}
					if (trigger) {
						this.container.trigger("fb3d.thumbnails.thumbnailLoaded", [thumbnail]);
					}
				};

				Thumbnails.prototype.render = function render() {
					var elements = ['<div class="thumbnails">'];
					for (var i = 0; i < this.size; ++i) {
						elements.push(
							[
								'<div class="item"><a><div class="thumbnail loading" style="padding-top:' +
									Math.round(100 / this.p.kWtoH) +
									'%;"></div></a><div class="heading"><a title="',
								i + 1,
								'">',
								i + 1,
								"</a></div></div>",
							].join("")
						);
					}
					elements.push("</div>");
					this.container.append(elements.join(""));
					var items = this.container.find(".item"),
						base = this.container.find(".thumbnails").offset().top;
					for (var _i3 = 0; _i3 < items.length; ++_i3) {
						var item = (0, _libs.$)(items[_i3]);
						this.thumbnails[_i3].heading = item.find(".heading");
						this.thumbnails[_i3].thumbnail = item.find(".thumbnail");
						this.thumbnails[_i3].first = item.offset().top - base;
						this.thumbnails[_i3].last = this.thumbnails[_i3].first + item.height();
						if (this.thumbnails[_i3].loaded) {
							this.setImage(this.thumbnails[_i3], this.thumbnails[_i3].img || this.thumbnails[_i3].src);
						}
						var as = item.find("a");
						for (var j = 0; j < as.length; ++j) {
							var a = as[j];
							a.dataThumbnail = this.thumbnails[_i3];
						}
					}
					this.container.find("a").on("click", this.binds.navigate);
					this.built = true;
				};

				return Thumbnails;
			})();

			exports.default = Thumbnails;

			/***/
		},
		/* 67 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			var _EventConverter2 = __webpack_require__(7);

			var _EventConverter3 = _interopRequireDefault(_EventConverter2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var TouchConverter = (function (_EventConverter) {
				_inherits(TouchConverter, _EventConverter);

				function TouchConverter(wnd, doc, element) {
					_classCallCheck(this, TouchConverter);

					var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

					_this.element = element;
					_this.binds = {
						convert: _this.convert.bind(_this),
					};
					(0, _libs.$)(_this.element).on("touchstart touchmove", _this.binds.convert);
					(0, _libs.$)(_this.doc).on("touchend", _this.binds.convert);
					return _this;
				}

				TouchConverter.prototype.dispose = function dispose() {
					(0, _libs.$)(this.element).off("touchstart touchmove", this.binds.convert);
					(0, _libs.$)(this.doc).off("touchend", this.binds.convert);
				};

				return TouchConverter;
			})(_EventConverter3.default);

			exports.default = TouchConverter;

			/***/
		},
		/* 68 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var UserMessageController = (function () {
				function UserMessageController(view) {
					_classCallCheck(this, UserMessageController);

					this.view = view;
					this.showMessage = false;
					this.message = "";
					this.updateView();
				}

				UserMessageController.prototype.dispose = function dispose() {
					this.updateView();
					delete this.view;
				};

				UserMessageController.prototype.setError = function setError(text) {
					this.showMessage = true;
					this.message = ['<div class="text error">', text, "</div>"].join("");
					this.updateView();
				};

				UserMessageController.prototype.updateView = function updateView() {
					if (this.view) {
						this.view.setState("widUserMessage", {
							enable: true,
							visible: this.showMessage,
							active: false,
						});

						this.view.setState("txtUserMessage", {
							value: this.message,
							visible: true,
						});
					}
				};

				return UserMessageController;
			})();

			exports.default = UserMessageController;

			/***/
		},
		/* 69 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var View = (function () {
				View.classProperty = function classProperty(ctrl, className, value) {
					if (value) {
						ctrl.addClass(className);
					} else {
						ctrl.removeClass(className);
					}
				};

				View.attributeProperty = function attributeProperty(ctrl, attributeName, value) {
					if (value) {
						ctrl.attr(attributeName, value);
					} else {
						ctrl.removeAttr(attributeName);
					}
				};

				View.callHandlers = function callHandlers(handlers, id, e, data) {
					for (
						var _iterator = handlers,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var handler = _ref;

						if (handler[id]) {
							handler[id](e, data);
						} else if (handler.handleDefault) {
							handler.handleDefault(id, e, data);
						}
					}
				};

				View.handleEvent = function handleEvent(id, getHandlers, e, data) {
					View.callHandlers(getHandlers(id), id, e, data);
				};

				View.handleLinkEvent = function handleLinkEvent(e) {
					e.preventDefault();
					if (!this.ctrl.hasClass("disabled")) {
						View.handleEvent(this.id, this.getHandlers, e);
					}
				};

				View.handleInputEvent = function handleInputEvent(e) {
					View.handleEvent(this.id, this.getHandlers, e, e.target.value);
				};

				View.handleFormEvent = function handleFormEvent(e) {
					e.preventDefault();
					View.handleEvent(this.id, this.getHandlers, e);
				};

				// virtual functions {

				View.prototype.getLinks = function getLinks() {
					return null;
				};

				View.prototype.getWidgets = function getWidgets() {
					return null;
				};

				View.prototype.getInputs = function getInputs() {
					return null;
				};

				View.prototype.getTexts = function getTexts() {
					return null;
				};

				View.prototype.getTemplate = function getTemplate() {
					return {};
				};

				View.prototype.getHandlers = function getHandlers(id) {
					return this.handlers;
				};
				// }

				View.prototype.callLater = function callLater(handlers, id, e, data, ms) {
					var _this = this;

					this.pendings[id] = {
						timestamp: new Date().getTime(),
					};
					setTimeout(function () {
						var timestamp = new Date().getTime(),
							pending = _this.pendings[id];
						if (pending && timestamp - pending.timestamp >= ms) {
							View.callHandlers(handlers, id, e, data);
							delete _this.pendings[id];
						}
					}, ms);
				};

				// loadFiles(urls, ready, failure) {
				//   let done = Promise.resolve();
				//   for(let url of urls) {
				//     done = done.then(()=> {
				//       return new Promise((resolve, reject)=> {
				//         $.get(url, (res)=> {
				//           ready(res, url);
				//           resolve();
				//         }).fail((res)=> {
				//           if(failure && failure(res, url)) {
				//             resolve();
				//           }
				//           else {
				//             reject(res);
				//           }
				//         });
				//       });
				//     });
				//   }
				//   return done;
				// }

				View.prototype.loadFiles = function loadFiles(urls, files) {
					var tasks = [];

					var _loop = function _loop() {
						if (_isArray2) {
							if (_i2 >= _iterator2.length) return "break";
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) return "break";
							_ref2 = _i2.value;
						}

						var name = _ref2;

						files[name] = [];

						var _loop2 = function _loop2() {
							if (_isArray3) {
								if (_i3 >= _iterator3.length) return "break";
								_ref3 = _iterator3[_i3++];
							} else {
								_i3 = _iterator3.next();
								if (_i3.done) return "break";
								_ref3 = _i3.value;
							}

							var url = _ref3;

							tasks.push(
								new Promise(function (resolve, reject) {
									_libs.$.get(url, function (data) {
										files[name].push({ url: url, data: data });
										resolve();
									}).fail(function (res) {
										reject(res);
									});
								})
							);
						};

						for (
							var _iterator3 = urls[name],
								_isArray3 = Array.isArray(_iterator3),
								_i3 = 0,
								_iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();
							;

						) {
							var _ref3;

							var _ret2 = _loop2();

							if (_ret2 === "break") break;
						}
					};

					for (
						var _iterator2 = Object.keys(urls),
							_isArray2 = Array.isArray(_iterator2),
							_i2 = 0,
							_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
						;

					) {
						var _ref2;

						var _ret = _loop();

						if (_ret === "break") break;
					}
					return Promise.all(tasks);
				};

				View.prototype.getRootUrl = function getRootUrl() {
					return location.origin + "/";
				};

				View.prototype.getCurrentUrl = function getCurrentUrl() {
					return location.href.substr(0, location.href.lastIndexOf("/") + 1);
				};

				View.prototype.urlResolver = function urlResolver(baseUrl, url) {
					url = url.replace(/\\/g, "/");
					if (url.charAt(0) === "/") {
						baseUrl = this.getRootUrl();
						url = url.substr(1);
					}
					if (!baseUrl.match(/^https{0,1}:/i)) {
						baseUrl = this.urlResolver(this.getCurrentUrl(), baseUrl);
					}
					if (!url.match(/^(data|blob|http|https):/i)) {
						baseUrl = baseUrl.replace(/\\/g, "/");
						var p = baseUrl.lastIndexOf("/");
						url = (~p ? baseUrl.substr(0, p + 1) : "") + url;

						var parts = url.split("/");
						url = [];
						for (
							var _iterator4 = parts,
								_isArray4 = Array.isArray(_iterator4),
								_i4 = 0,
								_iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();
							;

						) {
							var _ref4;

							if (_isArray4) {
								if (_i4 >= _iterator4.length) break;
								_ref4 = _iterator4[_i4++];
							} else {
								_i4 = _iterator4.next();
								if (_i4.done) break;
								_ref4 = _i4.value;
							}

							var part = _ref4;

							if (part === ".") {
							} else if (part === "..") {
								if (url.length > 3) {
									url.pop();
								}
							} else {
								url.push(part);
							}
						}
						url = url.join("/");
					}

					return url;
				};

				View.prototype.objToAttrsStr = function objToAttrsStr(o) {
					var res = [];
					for (
						var _iterator5 = Object.keys(o),
							_isArray5 = Array.isArray(_iterator5),
							_i5 = 0,
							_iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();
						;

					) {
						var _ref5;

						if (_isArray5) {
							if (_i5 >= _iterator5.length) break;
							_ref5 = _iterator5[_i5++];
						} else {
							_i5 = _iterator5.next();
							if (_i5.done) break;
							_ref5 = _i5.value;
						}

						var _name = _ref5;

						res.push([_name, '="', o[_name], '"'].join(""));
					}
					return res.join(" ");
				};

				View.prototype.checkIframeSize = function checkIframeSize() {
					if (this.frame) {
						if (
							Math.abs(this.frame.width - this.parentContainer.width()) > 1 ||
							Math.abs(this.frame.height - this.parentContainer.height()) > 1
						) {
							this.onResize();
						}
						setTimeout(this.checkIframeSize.bind(this), 250);
					}
				};

				View.prototype.onResize = function onResize() {
					this.frame.width = this.parentContainer.width();
					this.frame.height = this.parentContainer.height();
				};

				View.prototype.translate = function translate(html) {
					return html.replace(/<\$tr>(.*)<\/\$tr>/gi, function (s0, s1) {
						return (0, _libs.tr)(s1);
					});
				};

				View.prototype.fireLinksOnLoadEvent = function fireLinksOnLoadEvent() {
					var _this2 = this;

					if (this.templateObject && this.templateObject.linkLoaded) {
						var loaded = true;

						var _loop3 = function _loop3() {
							if (_isArray6) {
								if (_i6 >= _iterator6.length) return "break";
								_ref6 = _iterator6[_i6++];
							} else {
								_i6 = _iterator6.next();
								if (_i6.done) return "break";
								_ref6 = _i6.value;
							}

							var jLink = _ref6;

							var link = jLink[0];
							var img = new Image();
							img.onerror = function () {
								return _this2.templateObject.linkLoaded(link);
							};
							img.src = link.href;
						};

						for (
							var _iterator6 = this.jLinks,
								_isArray6 = Array.isArray(_iterator6),
								_i6 = 0,
								_iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();
							;

						) {
							var _ref6;

							var _ret3 = _loop3();

							if (_ret3 === "break") break;
						}
					}
				};

				function View(parentContainer, onLoad) {
					var _this3 = this;

					var template = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

					_classCallCheck(this, View);

					this.pendings = {};
					this.binds = {
						onResize: this.onResize.bind(this),
					};
					this.parentContainer = (0, _libs.$)(parentContainer);
					this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
					this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // && ~navigator.userAgent.search('Version/14.1');
					var initUrl = this.isSafari ? View.initUrl : undefined;
					this.parentContainer.html(
						'<iframe title="View" style="border: 0;' +
							(this.isIOS ? "" : " width: 100%; height: 100%") +
							'" ' +
							(initUrl ? ' src="' + initUrl + '"' : "") +
							' scrolling="no"></iframe>'
					);

					this.frame = this.parentContainer.find("iframe")[0];
					var build = function build() {
						if (_this3.isIOS) {
							(0, _libs.$)(_this3.parentContainer[0].ownerDocument.defaultView).on(
								"resize",
								_this3.binds.onResize
							);
							_this3.onResize();
							setTimeout(_this3.checkIframeSize.bind(_this3), 250);
						}

						_this3.container = (0, _libs.$)(_this3.frame.contentDocument.body);
						_this3.container.css("margin", "0");
						_this3.head = (0, _libs.$)(_this3.frame.contentDocument.head);
						_this3.onLoad = onLoad;
						_this3.handlers = [];
						_this3.styleData = {};

						var script = template.html ? template.script : _this3.getTemplate().script;
						var urls = void 0,
							files = void 0,
							links = void 0,
							templateName = void 0;
						if (typeof template === "function") {
							urls = {};
							files = template();
							links = [];
							templateName = files.name;
						} else {
							links = template.links || _this3.getTemplate().links;
							urls = {
								styles: template.styles || _this3.getTemplate().styles,
								html: [template.html || _this3.getTemplate().html],
								script: script ? [script] : [],
							};
							templateName = template.name;
							files = {};
						}
						if (templateName) {
							_this3.container.addClass(templateName);
						}
						_this3
							.loadFiles(urls, files)
							.then(function () {
								var _loop4 = function _loop4() {
									if (_isArray7) {
										if (_i7 >= _iterator7.length) return "break";
										_ref7 = _iterator7[_i7++];
									} else {
										_i7 = _iterator7.next();
										if (_i7.done) return "break";
										_ref7 = _i7.value;
									}

									var style = _ref7;

									var textCss = style.data,
										url = style.url;
									textCss = textCss.replace(/url\(['"](.*?)["']\)/g, function (r, r1) {
										return ["url('", _this3.urlResolver(url, r1), "')"].join("");
									});
									(0, _libs.$)('<style type="text/css">' + textCss + "</style>").appendTo(
										_this3.head
									);
									var match = textCss.match(/\/\*json-data:(([\n\r]|.)*?)\*\//);
									if (match) {
										try {
											_this3.styleData = _extends({}, _this3.styleData, JSON.parse(match[1]));
										} catch (e) {
											console.error(e);
										}
									}
								};

								for (
									var _iterator7 = files.styles,
										_isArray7 = Array.isArray(_iterator7),
										_i7 = 0,
										_iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();
									;

								) {
									var _ref7;

									var _ret4 = _loop4();

									if (_ret4 === "break") break;
								}

								_this3.container.html(_this3.translate(files.html[0].data));

								_this3.jLinks = [];
								for (
									var _iterator8 = links,
										_isArray8 = Array.isArray(_iterator8),
										_i8 = 0,
										_iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();
									;

								) {
									var _ref8;

									if (_isArray8) {
										if (_i8 >= _iterator8.length) break;
										_ref8 = _iterator8[_i8++];
									} else {
										_i8 = _iterator8.next();
										if (_i8.done) break;
										_ref8 = _i8.value;
									}

									var _link = _ref8;

									_this3.jLinks.push(
										(0, _libs.$)(
											[
												"<link ",
												_this3.objToAttrsStr(
													_extends({}, _link, {
														href: _this3.urlResolver(_this3.getCurrentUrl(), _link.href),
													})
												),
												">",
											].join("")
										).appendTo(_this3.head)
									);
								}

								if (files.script[0]) {
									var init = eval(files.script[0].data);
									_this3.templateObject = init(_this3.container);
								} else {
									_this3.templateObject = {};
								}

								_this3.linkControls = {};
								for (
									var _iterator9 = _this3.getLinks(),
										_isArray9 = Array.isArray(_iterator9),
										_i9 = 0,
										_iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();
									;

								) {
									var _ref9;

									if (_isArray9) {
										if (_i9 >= _iterator9.length) break;
										_ref9 = _iterator9[_i9++];
									} else {
										_i9 = _iterator9.next();
										if (_i9.done) break;
										_ref9 = _i9.value;
									}

									var id = _ref9;

									_this3.linkControls[id] = _this3.container.find("." + id);
									_this3.binds[id] = View.handleLinkEvent.bind({
										getHandlers: _this3.getHandlers.bind(_this3),
										id: id,
										ctrl: _this3.linkControls[id],
									});
									_this3.linkControls[id].on("click", _this3.binds[id]);
								}

								_this3.widgetControls = {};
								for (
									var _iterator10 = _this3.getWidgets(),
										_isArray10 = Array.isArray(_iterator10),
										_i10 = 0,
										_iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();
									;

								) {
									var _ref10;

									if (_isArray10) {
										if (_i10 >= _iterator10.length) break;
										_ref10 = _iterator10[_i10++];
									} else {
										_i10 = _iterator10.next();
										if (_i10.done) break;
										_ref10 = _i10.value;
									}

									var _id = _ref10;

									_this3.widgetControls[_id] = _this3.container.find("." + _id);
								}

								_this3.inputControls = {};
								for (
									var _iterator11 = _this3.getInputs(),
										_isArray11 = Array.isArray(_iterator11),
										_i11 = 0,
										_iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();
									;

								) {
									var _ref11;

									if (_isArray11) {
										if (_i11 >= _iterator11.length) break;
										_ref11 = _iterator11[_i11++];
									} else {
										_i11 = _iterator11.next();
										if (_i11.done) break;
										_ref11 = _i11.value;
									}

									var _id2 = _ref11;

									_this3.inputControls[_id2] = _this3.container.find("." + _id2);
									_this3.binds[_id2] = View.handleInputEvent.bind({
										getHandlers: _this3.getHandlers.bind(_this3),
										id: _id2,
										ctrl: _this3.inputControls[_id2],
									});
									_this3.inputControls[_id2].on("keyup", _this3.binds[_id2]);
								}

								_this3.formControls = {};
								for (
									var _iterator12 = _this3.getForms(),
										_isArray12 = Array.isArray(_iterator12),
										_i12 = 0,
										_iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();
									;

								) {
									var _ref12;

									if (_isArray12) {
										if (_i12 >= _iterator12.length) break;
										_ref12 = _iterator12[_i12++];
									} else {
										_i12 = _iterator12.next();
										if (_i12.done) break;
										_ref12 = _i12.value;
									}

									var _id3 = _ref12;

									_this3.formControls[_id3] = _this3.container.find("." + _id3);
									_this3.binds[_id3] = View.handleFormEvent.bind({
										getHandlers: _this3.getHandlers.bind(_this3),
										id: _id3,
										ctrl: _this3.formControls[_id3],
									});
									_this3.formControls[_id3].on("submit", _this3.binds[_id3]);
								}

								_this3.textControls = {};
								for (
									var _iterator13 = _this3.getTexts(),
										_isArray13 = Array.isArray(_iterator13),
										_i13 = 0,
										_iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();
									;

								) {
									var _ref13;

									if (_isArray13) {
										if (_i13 >= _iterator13.length) break;
										_ref13 = _iterator13[_i13++];
									} else {
										_i13 = _iterator13.next();
										if (_i13.done) break;
										_ref13 = _i13.value;
									}

									var _id4 = _ref13;

									_this3.textControls[_id4] = _this3.container.find("." + _id4);
								}

								_this3.stateSetters = [
									{
										map: _this3.linkControls,
										setter: _this3.setLinkControlState.bind(_this3),
									},
									{
										map: _this3.widgetControls,
										setter: _this3.setWidgetControlState.bind(_this3),
									},
									{
										map: _this3.inputControls,
										setter: _this3.setInputControlState.bind(_this3),
									},
									{
										map: _this3.textControls,
										setter: _this3.setTextControlState.bind(_this3),
									},
								];

								_this3.initView();

								if (_this3.onLoad) {
									_this3.onLoad();
								}

								_this3.fireLinksOnLoadEvent();
							})
							.catch(function (res) {
								return console.error(res);
							});
					};

					if (initUrl) {
						(0, _libs.$)(this.frame.contentWindow).on("load", build);
					} else {
						if (this.frame.contentWindow.stop) {
							this.frame.contentWindow.stop();
						}
						build();
					}
				}

				View.prototype.dispose = function dispose() {
					delete this.textControls;
					for (
						var _iterator14 = this.getLinks(),
							_isArray14 = Array.isArray(_iterator14),
							_i14 = 0,
							_iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();
						;

					) {
						var _ref14;

						if (_isArray14) {
							if (_i14 >= _iterator14.length) break;
							_ref14 = _iterator14[_i14++];
						} else {
							_i14 = _iterator14.next();
							if (_i14.done) break;
							_ref14 = _i14.value;
						}

						var id = _ref14;

						this.linkControls[id].off("click", this.binds[id]);
					}
					delete this.linkControls;
					delete this.widgetControls;
					for (
						var _iterator15 = this.getInputs(),
							_isArray15 = Array.isArray(_iterator15),
							_i15 = 0,
							_iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();
						;

					) {
						var _ref15;

						if (_isArray15) {
							if (_i15 >= _iterator15.length) break;
							_ref15 = _iterator15[_i15++];
						} else {
							_i15 = _iterator15.next();
							if (_i15.done) break;
							_ref15 = _i15.value;
						}

						var _id5 = _ref15;

						this.inputControls[_id5].off("keyup", this.binds[_id5]);
					}
					delete this.inputControls;
					for (
						var _iterator16 = this.getForms(),
							_isArray16 = Array.isArray(_iterator16),
							_i16 = 0,
							_iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();
						;

					) {
						var _ref16;

						if (_isArray16) {
							if (_i16 >= _iterator16.length) break;
							_ref16 = _iterator16[_i16++];
						} else {
							_i16 = _iterator16.next();
							if (_i16.done) break;
							_ref16 = _i16.value;
						}

						var _id6 = _ref16;

						this.formControls[_id6].off("submit", this.binds[_id6]);
					}
					delete this.formControls;

					!this.templateObject.dispose || this.templateObject.dispose();
					delete this.templateObject;

					if (this.isIOS) {
						(0, _libs.$)(this.parentContainer[0].ownerDocument.defaultView).off(
							"resize",
							this.binds.onResize
						);
					}
					this.parentContainer.html("");
					delete this.frame;
				};

				View.prototype.getStyleData = function getStyleData() {
					return this.styleData;
				};

				View.prototype.getContainer = function getContainer() {
					return this.container[0];
				};

				View.prototype.getParentContainer = function getParentContainer() {
					return this.parentContainer[0];
				};

				View.prototype.addHandler = function addHandler(handler) {
					this.handlers.push(handler);
				};

				View.prototype.initView = function initView() {};

				View.setControlState = function setControlState(ctrl, defaults, state, stateHandlers) {
					if (ctrl && ctrl[0]) {
						var st = _extends({}, defaults, state);
						for (var _name2 in st) {
							if (st.hasOwnProperty(_name2) && stateHandlers[_name2]) {
								stateHandlers[_name2](ctrl, st[_name2]);
							}
						}
					}
				};

				View.prototype.setLinkControlState = function setLinkControlState(id, state) {
					View.setControlState(
						this.linkControls[id],
						{
							visible: true,
							active: false,
							enable: true,
						},
						state,
						View.linkStateHandlers
					);
				};

				View.prototype.setWidgetControlState = function setWidgetControlState(id, state) {
					View.setControlState(
						this.widgetControls[id],
						{
							visible: true,
							active: false,
							enable: true,
						},
						state,
						View.widgetStateHandlers
					);
				};

				View.prototype.setInputControlState = function setInputControlState(id, state) {
					View.setControlState(
						this.inputControls[id],
						{
							visible: true,
							enable: true,
							value: "",
						},
						state,
						View.inputStateHandlers
					);
				};

				View.prototype.setTextControlState = function setTextControlState(id, state) {
					View.setControlState(
						this.textControls[id],
						{
							visible: true,
							value: "",
						},
						state,
						View.textStateHandlers
					);
				};

				View.prototype.onItemStateChanged = function onItemStateChanged() {};

				View.prototype.setState = function setState(id, state) {
					for (
						var _iterator17 = this.stateSetters,
							_isArray17 = Array.isArray(_iterator17),
							_i17 = 0,
							_iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();
						;

					) {
						var _ref17;

						if (_isArray17) {
							if (_i17 >= _iterator17.length) break;
							_ref17 = _iterator17[_i17++];
						} else {
							_i17 = _iterator17.next();
							if (_i17.done) break;
							_ref17 = _i17.value;
						}

						var item = _ref17;

						if (item.map[id]) {
							item.setter(id, state);
							this.onItemStateChanged(id, state);
							break;
						}
					}
				};

				return View;
			})();

			View.initUrl = URL.createObjectURL(
				new Blob(
					[
						'\n    <!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <meta charset="utf-8">\n      </head>\n      <body style="height: 100vh">\n      </body>\n    </html>\n  ',
					],
					{ type: "text/html" }
				)
			);
			View.linkStateHandlers = {
				visible: function visible(ctrl, value) {
					return View.classProperty(ctrl, "hidden", !value);
				},
				active: function active(ctrl, value) {
					return View.classProperty(ctrl, "active", value);
				},
				enable: function enable(ctrl, value) {
					return View.classProperty(ctrl, "disabled", !value);
				},
			};
			View.widgetStateHandlers = {
				visible: function visible(ctrl, value) {
					return View.classProperty(ctrl, "hidden", !value);
				},
				active: function active(ctrl, value) {
					return View.classProperty(ctrl, "active", value);
				},
				enable: function enable(ctrl, value) {
					return View.classProperty(ctrl, "disabled", !value);
				},
			};
			View.inputStateHandlers = {
				visible: function visible(ctrl, value) {
					return View.classProperty(ctrl, "hidden", !value);
				},
				value: function value(ctrl, _value) {
					return (ctrl[0].value = _value);
				},
				enable: function enable(ctrl, value) {
					return View.attributeProperty(ctrl, "disabled", !value);
				},
			};
			View.textStateHandlers = {
				visible: function visible(ctrl, value) {
					return View.classProperty(ctrl, "hidden", !value);
				},
				value: function value(ctrl, _value2) {
					return ctrl.html(_value2);
				},
			};
			exports.default = View;

			/***/
		},
		/* 70 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _extends =
				Object.assign ||
				function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];
						for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}
					return target;
				};

			var _libs = __webpack_require__(0);

			var _Utils = __webpack_require__(3);

			var _Utils2 = _interopRequireDefault(_Utils);

			var _Orbit = __webpack_require__(59);

			var _Orbit2 = _interopRequireDefault(_Orbit);

			var _ThreeMouseEventConverter = __webpack_require__(64);

			var _ThreeMouseEventConverter2 = _interopRequireDefault(_ThreeMouseEventConverter);

			var _ThreeTouchEventConverter = __webpack_require__(65);

			var _ThreeTouchEventConverter2 = _interopRequireDefault(_ThreeTouchEventConverter);

			var _Drag = __webpack_require__(51);

			var _Drag2 = _interopRequireDefault(_Drag);

			var _CSS3DRenderer = __webpack_require__(12);

			var _CSS3DRenderer2 = _interopRequireDefault(_CSS3DRenderer);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var VisualWorld = (function (_THREE$EventDispatche) {
				_inherits(VisualWorld, _THREE$EventDispatche);

				function VisualWorld(wnd, doc, container) {
					var useHelpers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

					_classCallCheck(this, VisualWorld);

					var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

					_this.checkUpdateFlag = true;
					_this.wnd = wnd;
					_this.doc = doc;
					_this.jContainer = container;
					_this.renderCallbacks = [];
					_this.diag = _this.getDiag();

					_this.clock = new _libs.THREE.Clock();

					_this.raycaster = new _libs.THREE.Raycaster();

					_this.scene = new _libs.THREE.Scene();
					_this.cssScene = new _libs.THREE.Scene();

					_this.camera = new _libs.THREE.PerspectiveCamera(30, _this.width() / _this.height(), 0.2, 2000);
					var scale = 1;

					_this.camera.position.x = 0;
					_this.camera.position.y = 5.5 * scale;
					_this.camera.position.z = 0;

					_this.renderer = new _libs.THREE.WebGLRenderer({
						alpha: true,
						precision: VisualWorld.getPrecision(),
						antialias: true,
					});
					_this.renderer.shadowMap.enabled = true;
					_this.renderer.shadowMap.type = _libs.THREE.PCFSoftShadowMap;

					_this.renderer.setClearColor(0x000000, 0);
					_this.renderer.setPixelRatio(Math.sqrt(_this.wnd.devicePixelRatio || 1));
					_this.renderer.setSize(_this.width(), _this.height());

					_this.jContainer.append(_this.renderer.domElement);

					_this.cssRenderer = new _CSS3DRenderer2.default();
					_this.cssRenderer.setSize(_this.width(), _this.height());
					(0, _libs.$)(_this.cssRenderer.domElement).css({
						position: "absolute",
						top: 0,
						margin: 0,
						padding: 0,
					});
					_this.jContainer.append(_this.cssRenderer.domElement);

					_this.element = _this.cssRenderer.domElement;

					_this.textureLoader = new _libs.THREE.TextureLoader();

					_this.ambientLight = new _libs.THREE.AmbientLight(0xffffff);
					_this.scene.add(_this.ambientLight);

					_this.light = new _libs.THREE.DirectionalLight(0x000000, 1);
					_this.light.position.set(-6 * scale, 6 * scale, -3 * scale);
					var d = 3 * scale;
					_this.light.castShadow = true;
					_this.light.shadow.camera.left = -d;
					_this.light.shadow.camera.right = d;
					_this.light.shadow.camera.top = d;
					_this.light.shadow.camera.bottom = -d;
					_this.light.shadow.camera.near = 0.5 * scale;
					_this.light.shadow.camera.far = 20 * scale;
					_this.light.shadow.mapSize.x = 512;
					_this.light.shadow.mapSize.y = 512;
					_this.scene.add(_this.light);
					// this.scene.add(new THREE.CameraHelper(this.light.shadow.camera));

					_this.shadowPlace = new _libs.THREE.Mesh(
						new _libs.THREE.PlaneGeometry(10, 10).rotateX(-Math.PI / 2),
						new _libs.THREE.ShadowMaterial({ color: 0x000000, transparent: true, opacity: 0.2 })
					);
					_this.shadowPlace.position.set(0, 0, 0);
					_this.shadowPlace.receiveShadow = true;
					_this.shadowPlace.castShadow = false;
					_this.scene.add(_this.shadowPlace);

					_this.controls = new _Orbit2.default(_this.camera, _this);
					_this.controls.target.y = 0.5;

					var cssScene = (0, _libs.$)(_this.cssRenderer.domElement).find("div"),
						tmpVector = new _libs.THREE.Vector3();
					_this.controls.addEventListener("change", function () {
						_this.camera.getWorldDirection(tmpVector);
						cssScene.css("display", tmpVector.y - _this.camera.position.y > 0 ? "none" : "block");
						_this.updateThree();
					});

					if (useHelpers) {
						_this.scene.add(new _libs.THREE.AxisHelper(5));
					}

					_this.binds = {
						onWindowResize: _this.onWindowResize.bind(_this),
						animate: _this.animate.bind(_this),
					};

					(0, _libs.$)(_this.wnd).on("resize", _this.binds.onWindowResize);

					_this.mouseEvents = new _ThreeMouseEventConverter2.default(_this.wnd, _this.doc, _this);
					_this.touchEvents = new _ThreeTouchEventConverter2.default(_this.wnd, _this.doc, _this);
					var filterData = { type: "mousemove" };
					_this.mouseEvents.filter = function (element, e) {
						var types = ["mouseenter", "mouseover", "mouseleave", "mouseout"],
							contains = function contains(p, c) {
								return p === c || _libs.$.contains(p, c);
							};
						if (e.type === "mousemove") {
							filterData.pageX = e.pageX;
							filterData.pageY = e.pageY;
						}
						return e.relatedTarget &&
							~types.indexOf(e.type) &&
							contains(element, e.target) &&
							contains(element, e.relatedTarget)
							? _extends({}, e, filterData)
							: e;
					};
					_this.drag = new _Drag2.default(_this.wnd, _this.doc, _this);

					_this.onWindowResize();
					_this.animate();
					return _this;
				}

				VisualWorld.prototype.getDiag = function getDiag() {
					var test = (0, _libs.$)('<div style="height: 1in; width: 1in; display: none;"></div>').appendTo(
							this.jContainer
						),
						r = new _libs.THREE.Vector2(screen.width / test.width(), screen.height / test.height());
					test.remove();
					return r.length();
				};

				VisualWorld.prototype.updateThree = function updateThree() {
					this.light.userData.needsUpdate = true;
				};

				VisualWorld.prototype.setLight = function setLight(ambient, directional) {
					this.ambientLight.color.set(ambient);
					this.light.color.set(directional);
					this.updateThree();
				};

				VisualWorld.prototype.dispose = function dispose() {
					delete this.binds.animate;
					(0, _libs.$)(this.wnd).off("resize", this.binds.onWindowResize);
					this.mouseEvents.dispose();
					this.touchEvents.dispose();
					this.drag.dispose();
					this.controls.dispose();
				};

				VisualWorld.prototype.width = function width() {
					return this.jContainer.width() || 200;
				};

				VisualWorld.prototype.height = function height() {
					return this.jContainer.height() || 200;
				};

				VisualWorld.prototype.setExtraLighting = function setExtraLighting(v) {
					this.light.intensity = v;
				};

				VisualWorld.prototype.isMobile = function isMobile() {
					return this.diag < _Utils2.default.MOBILE_DIAG;
				};

				VisualWorld.prototype.getOrbit = function getOrbit() {
					return this.controls;
				};

				VisualWorld.prototype.setControlsState = function setControlsState(state) {
					this.controls.enabled = state;
				};

				VisualWorld.prototype.getControlsState = function getControlsState() {
					return this.controls.enabled;
				};

				VisualWorld.prototype.onWindowResize = function onWindowResize() {
					var _this2 = this;

					var width = this.width(),
						height = this.height();
					if (width > 1 && height > 1) {
						var updateCamera = function updateCamera(camera) {
								camera.aspect = width / height;
								camera.updateProjectionMatrix();
							},
							updateRenderer = function updateRenderer(renderer) {
								renderer.setSize(width, height);
							};
						if (
							!this.lastResize ||
							Math.abs(this.lastResize.width - width) + Math.abs(this.lastResize.height - height) > 1
						) {
							this.lastResize = { width: width, height: height };
							var resizeStamp = (this.resizeStamp = Date.now());
							setTimeout(function () {
								if (resizeStamp === _this2.resizeStamp) {
									updateCamera(_this2.camera);
									updateRenderer(_this2.renderer);
									updateRenderer(_this2.cssRenderer);
									_this2.updateThree();
									_this2.dispatchEvent({ type: "resize" });
								}
							}, 10);
						}
					} else {
						setTimeout(function () {
							_this2.onWindowResize();
						}, 250);
					}
				};

				VisualWorld.prototype.addObject = function addObject(object) {
					this.scene.add(object);
				};

				VisualWorld.prototype.addCssObject = function addCssObject(object) {
					this.cssScene.add(object);
				};

				VisualWorld.prototype.removeCssObject = function removeCssObject(object) {
					this.cssScene.remove(object);
				};

				VisualWorld.prototype.removeObject = function removeObject(object) {
					this.scene.remove(object);
				};

				VisualWorld.prototype.animate = function animate() {
					if (this.binds.animate) {
						requestAnimationFrame(this.binds.animate);
					}
					this.render();
				};

				VisualWorld.prototype.addRenderCallback = function addRenderCallback(clb) {
					this.renderCallbacks.push(clb);
				};

				VisualWorld.prototype.removeRenderCallback = function removeRenderCallback(clb) {
					var i = this.renderCallbacks.indexOf(clb);
					if (~i) {
						this.renderCallbacks.splice(i, 1);
					}
				};

				VisualWorld.prototype.render = function render() {
					var deltaTime = Math.min(this.clock.getDelta(), 0.017 * 2);
					this.controls.update(deltaTime);
					for (
						var _iterator = this.renderCallbacks,
							_isArray = Array.isArray(_iterator),
							_i = 0,
							_iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
						;

					) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var clb = _ref;

						clb(deltaTime);
					}
					this.cssRenderer.render(this.cssScene, this.camera);
					var render = true;
					if (this.checkUpdateFlag) {
						render = false;
						for (
							var _iterator2 = this.scene.children,
								_isArray2 = Array.isArray(_iterator2),
								_i2 = 0,
								_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();
							;

						) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var o = _ref2;

							render = render || o.userData.needsUpdate;
							o.userData.needsUpdate = false;
						}
					}
					if (render) {
						this.renderer.render(this.scene, this.camera);
					}
				};

				VisualWorld.getPrecision = function getPrecision() {
					var scene = new _libs.THREE.Scene();
					scene.add(new _libs.THREE.AmbientLight(0xffffff));

					var camera = new _libs.THREE.PerspectiveCamera(30, 1, 1, 100);
					camera.position.set(0, 0, 1);
					camera.lookAt(0, 0, 0);

					var renderer = new _libs.THREE.WebGLRenderer();
					renderer.setClearColor(0xffffff);
					renderer.setSize(1, 1);

					var c = document.createElement("canvas"),
						ctx = c.getContext("2d");
					c.width = c.height = 1;
					ctx.fillStyle = "#ff0000";
					ctx.fillRect(0, 0, c.width, c.height);
					var t = new _libs.THREE.Texture(c);
					t.needsUpdate = true;

					scene.add(
						new _libs.THREE.Mesh(
							new _libs.THREE.PlaneGeometry(1, 1, 1, 1),
							new _libs.THREE.MeshPhongMaterial({ map: t })
						)
					);

					renderer.render(scene, camera);

					function getPixel(c, x, y) {
						var ps = new Uint8Array(4);
						c.readPixels(x, y, 1, 1, c.RGBA, c.UNSIGNED_BYTE, ps);
						return ps;
					}
					var p = getPixel(
						renderer.domElement.getContext("webgl") || renderer.domElement.getContext("experimental-webgl"),
						0,
						0
					);
					return p[0] === 255 && p[1] === 0 && p[2] === 0 ? "highp" : "mediump";
				};

				return VisualWorld;
			})(_libs.THREE.EventDispatcher);

			exports.default = VisualWorld;

			/***/
		},
		/* 71 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			var YouTubeApi = (function () {
				function YouTubeApi() {
					_classCallCheck(this, YouTubeApi);
				}

				YouTubeApi.init = function init() {
					if (!YouTubeApi.task) {
						YouTubeApi.task = new Promise(function (resolve) {
							if (!window["YT"]) {
								window["YT"] = {
									loading: 0,
									loaded: 0,
								};
							}
							if (!window["YTConfig"]) {
								window["YTConfig"] = {
									host: "http://www.youtube.com",
								};
							}
							if (!YT.loading) {
								YT.loading = 1;
								(function () {
									var l = [];
									YT.ready = function (f) {
										if (YT.loaded) {
											f();
										} else {
											l.push(f);
										}
									};
									window.onYTReady = function () {
										YT.loaded = 1;
										for (var i = 0; i < l.length; i++) {
											try {
												l[i]();
											} catch (e) {}
										}
										resolve();
									};
									YT.setConfig = function (c) {
										for (var k in c) {
											if (c.hasOwnProperty(k)) {
												YTConfig[k] = c[k];
											}
										}
									};
									var a = document.createElement("script");
									a.type = "text/javascript";
									a.id = "www-widgetapi-script";
									a.src = "https://s.ytimg.com/yts/jsbin/www-widgetapi-vfldn1jRM/www-widgetapi.js";
									a.async = false;
									var c = document.currentScript;
									if (c) {
										var n = c.nonce || c.getAttribute("nonce");
										if (n) {
											a.setAttribute("nonce", n);
										}
									}
									var b = document.getElementsByTagName("script")[0];
									b.parentNode.insertBefore(a, b);
								})();
							}
						});
					}
					return YouTubeApi.task;
				};

				return YouTubeApi;
			})();

			exports.default = YouTubeApi;

			/***/
		},
		/* 72 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _Target2 = __webpack_require__(23);

			var _Target3 = _interopRequireDefault(_Target2);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var CircleTarget = (function (_Target) {
				_inherits(CircleTarget, _Target);

				function CircleTarget(x, y, r) {
					_classCallCheck(this, CircleTarget);

					var _this = _possibleConstructorReturn(this, _Target.call(this));

					_this.p = {
						x: x,
						y: y,
						r: r,
					};
					return _this;
				}

				CircleTarget.prototype.testIntersection = function testIntersection(e, data) {
					var res = void 0;
					var x = data.x,
						y = data.y,
						p = this.p;

					if ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) <= p.r * p.r) {
						res = {
							target: this,
							data: data,
						};
					}
					return res;
				};

				return CircleTarget;
			})(_Target3.default);

			exports.default = CircleTarget;

			/***/
		},
		/* 73 */
		/***/ function (module, exports, __webpack_require__) {
			"use strict";

			exports.__esModule = true;

			var _Target2 = __webpack_require__(23);

			var _Target3 = _interopRequireDefault(_Target2);

			var _BaseMathUtils = __webpack_require__(2);

			var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			function _classCallCheck(instance, Constructor) {
				if (!(instance instanceof Constructor)) {
					throw new TypeError("Cannot call a class as a function");
				}
			}

			function _possibleConstructorReturn(self, call) {
				if (!self) {
					throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
				}
				return call && (typeof call === "object" || typeof call === "function") ? call : self;
			}

			function _inherits(subClass, superClass) {
				if (typeof superClass !== "function" && superClass !== null) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
				}
				subClass.prototype = Object.create(superClass && superClass.prototype, {
					constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
				});
				if (superClass)
					Object.setPrototypeOf
						? Object.setPrototypeOf(subClass, superClass)
						: (subClass.__proto__ = superClass);
			}

			var PolyTarget = (function (_Target) {
				_inherits(PolyTarget, _Target);

				function PolyTarget(poly) {
					_classCallCheck(this, PolyTarget);

					var _this = _possibleConstructorReturn(this, _Target.call(this));

					_this.poly = poly;
					return _this;
				}

				PolyTarget.prototype.testIntersection = function testIntersection(e, p) {
					return _BaseMathUtils2.default.isInsidePoly(this.poly, p)
						? {
								target: this,
								data: p,
						  }
						: undefined;
				};

				return PolyTarget;
			})(_Target3.default);

			exports.default = PolyTarget;

			/***/
		},
		/* 74 */
		/***/ function (module, exports, __webpack_require__) {
			// stats.js - http://github.com/mrdoob/stats.js
			(function (f, e) {
				true
					? (module.exports = e())
					: "function" === typeof define && define.amd
					? define(e)
					: (f.Stats = e());
			})(this, function () {
				var f = function () {
					function e(a) {
						c.appendChild(a.dom);
						return a;
					}
					function u(a) {
						for (var d = 0; d < c.children.length; d++)
							c.children[d].style.display = d === a ? "block" : "none";
						l = a;
					}
					var l = 0,
						c = document.createElement("div");
					c.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
					c.addEventListener(
						"click",
						function (a) {
							a.preventDefault();
							u(++l % c.children.length);
						},
						!1
					);
					var k = (performance || Date).now(),
						g = k,
						a = 0,
						r = e(new f.Panel("FPS", "#0ff", "#002")),
						h = e(new f.Panel("MS", "#0f0", "#020"));
					if (self.performance && self.performance.memory) var t = e(new f.Panel("MB", "#f08", "#201"));
					u(0);
					return {
						REVISION: 16,
						dom: c,
						addPanel: e,
						showPanel: u,
						begin: function () {
							k = (performance || Date).now();
						},
						end: function () {
							a++;
							var c = (performance || Date).now();
							h.update(c - k, 200);
							if (c > g + 1e3 && (r.update((1e3 * a) / (c - g), 100), (g = c), (a = 0), t)) {
								var d = performance.memory;
								t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);
							}
							return c;
						},
						update: function () {
							k = this.end();
						},
						domElement: c,
						setMode: u,
					};
				};
				f.Panel = function (e, f, l) {
					var c = Infinity,
						k = 0,
						g = Math.round,
						a = g(window.devicePixelRatio || 1),
						r = 80 * a,
						h = 48 * a,
						t = 3 * a,
						v = 2 * a,
						d = 3 * a,
						m = 15 * a,
						n = 74 * a,
						p = 30 * a,
						q = document.createElement("canvas");
					q.width = r;
					q.height = h;
					q.style.cssText = "width:80px;height:48px";
					var b = q.getContext("2d");
					b.font = "bold " + 9 * a + "px Helvetica,Arial,sans-serif";
					b.textBaseline = "top";
					b.fillStyle = l;
					b.fillRect(0, 0, r, h);
					b.fillStyle = f;
					b.fillText(e, t, v);
					b.fillRect(d, m, n, p);
					b.fillStyle = l;
					b.globalAlpha = 0.9;
					b.fillRect(d, m, n, p);
					return {
						dom: q,
						update: function (h, w) {
							c = Math.min(c, h);
							k = Math.max(k, h);
							b.fillStyle = l;
							b.globalAlpha = 1;
							b.fillRect(0, 0, r, m);
							b.fillStyle = f;
							b.fillText(g(h) + " " + e + " (" + g(c) + "-" + g(k) + ")", t, v);
							b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);
							b.fillRect(d + n - a, m, a, p);
							b.fillStyle = l;
							b.globalAlpha = 0.9;
							b.fillRect(d + n - a, m, a, g((1 - h / w) * p));
						},
					};
				};
				return f;
			});

			/***/
		},
		/* 75 */
		/***/ function (module, exports, __webpack_require__) {
			/*** IMPORTS FROM imports-loader ***/
			var define = false;

			/*!
			 * jQuery Mousewheel 3.1.13
			 *
			 * Copyright jQuery Foundation and other contributors
			 * Released under the MIT license
			 * http://jquery.org/license
			 */

			(function (factory) {
				if (typeof define === "function" && define.amd) {
					// AMD. Register as an anonymous module.
					define(["jquery"], factory);
				} else if (true) {
					// Node/CommonJS style for Browserify
					module.exports = factory;
				} else {
					// Browser globals
					factory(jQuery);
				}
			})(function ($) {
				var toFix = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
					toBind =
						"onwheel" in document || document.documentMode >= 9
							? ["wheel"]
							: ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
					slice = Array.prototype.slice,
					nullLowestDeltaTimeout,
					lowestDelta;

				if ($.event.fixHooks) {
					for (var i = toFix.length; i; ) {
						$.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
					}
				}

				var special = ($.event.special.mousewheel = {
					version: "3.1.12",

					setup: function () {
						if (this.addEventListener) {
							for (var i = toBind.length; i; ) {
								this.addEventListener(toBind[--i], handler, false);
							}
						} else {
							this.onmousewheel = handler;
						}
						// Store the line height and page height for this particular element
						$.data(this, "mousewheel-line-height", special.getLineHeight(this));
						$.data(this, "mousewheel-page-height", special.getPageHeight(this));
					},

					teardown: function () {
						if (this.removeEventListener) {
							for (var i = toBind.length; i; ) {
								this.removeEventListener(toBind[--i], handler, false);
							}
						} else {
							this.onmousewheel = null;
						}
						// Clean up the data we added to the element
						$.removeData(this, "mousewheel-line-height");
						$.removeData(this, "mousewheel-page-height");
					},

					getLineHeight: function (elem) {
						var $elem = $(elem),
							$parent = $elem["offsetParent" in $.fn ? "offsetParent" : "parent"]();
						if (!$parent.length) {
							$parent = $("body");
						}
						return parseInt($parent.css("fontSize"), 10) || parseInt($elem.css("fontSize"), 10) || 16;
					},

					getPageHeight: function (elem) {
						return $(elem).height();
					},

					settings: {
						adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
						normalizeOffset: true, // calls getBoundingClientRect for each event
					},
				});

				$.fn.extend({
					mousewheel: function (fn) {
						return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
					},

					unmousewheel: function (fn) {
						return this.unbind("mousewheel", fn);
					},
				});

				function handler(event) {
					var orgEvent = event || window.event,
						args = slice.call(arguments, 1),
						delta = 0,
						deltaX = 0,
						deltaY = 0,
						absDelta = 0,
						offsetX = 0,
						offsetY = 0;
					event = $.event.fix(orgEvent);
					event.type = "mousewheel";

					// Old school scrollwheel delta
					if ("detail" in orgEvent) {
						deltaY = orgEvent.detail * -1;
					}
					if ("wheelDelta" in orgEvent) {
						deltaY = orgEvent.wheelDelta;
					}
					if ("wheelDeltaY" in orgEvent) {
						deltaY = orgEvent.wheelDeltaY;
					}
					if ("wheelDeltaX" in orgEvent) {
						deltaX = orgEvent.wheelDeltaX * -1;
					}

					// Firefox < 17 horizontal scrolling related to DOMMouseScroll event
					if ("axis" in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
						deltaX = deltaY * -1;
						deltaY = 0;
					}

					// Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
					delta = deltaY === 0 ? deltaX : deltaY;

					// New school wheel delta (wheel event)
					if ("deltaY" in orgEvent) {
						deltaY = orgEvent.deltaY * -1;
						delta = deltaY;
					}
					if ("deltaX" in orgEvent) {
						deltaX = orgEvent.deltaX;
						if (deltaY === 0) {
							delta = deltaX * -1;
						}
					}

					// No change actually happened, no reason to go any further
					if (deltaY === 0 && deltaX === 0) {
						return;
					}

					// Need to convert lines and pages to pixels if we aren't already in pixels
					// There are three delta modes:
					//   * deltaMode 0 is by pixels, nothing to do
					//   * deltaMode 1 is by lines
					//   * deltaMode 2 is by pages
					if (orgEvent.deltaMode === 1) {
						var lineHeight = $.data(this, "mousewheel-line-height");
						delta *= lineHeight;
						deltaY *= lineHeight;
						deltaX *= lineHeight;
					} else if (orgEvent.deltaMode === 2) {
						var pageHeight = $.data(this, "mousewheel-page-height");
						delta *= pageHeight;
						deltaY *= pageHeight;
						deltaX *= pageHeight;
					}

					// Store lowest absolute delta to normalize the delta values
					absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

					if (!lowestDelta || absDelta < lowestDelta) {
						lowestDelta = absDelta;

						// Adjust older deltas if necessary
						if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
							lowestDelta /= 40;
						}
					}

					// Adjust older deltas if necessary
					if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
						// Divide all the things by 40!
						delta /= 40;
						deltaX /= 40;
						deltaY /= 40;
					}

					// Get a whole, normalized value for the deltas
					delta = Math[delta >= 1 ? "floor" : "ceil"](delta / lowestDelta);
					deltaX = Math[deltaX >= 1 ? "floor" : "ceil"](deltaX / lowestDelta);
					deltaY = Math[deltaY >= 1 ? "floor" : "ceil"](deltaY / lowestDelta);

					// Normalise offsetX and offsetY properties
					if (special.settings.normalizeOffset && this.getBoundingClientRect) {
						var boundingRect = this.getBoundingClientRect();
						offsetX = event.clientX - boundingRect.left;
						offsetY = event.clientY - boundingRect.top;
					}

					// Add information to the event object
					event.deltaX = deltaX;
					event.deltaY = deltaY;
					event.deltaFactor = lowestDelta;
					event.offsetX = offsetX;
					event.offsetY = offsetY;
					// Go ahead and set deltaMode to 0 since we converted to pixels
					// Although this is a little odd since we overwrite the deltaX/Y
					// properties with normalized deltas.
					event.deltaMode = 0;

					// Add event and delta to the front of the arguments
					args.unshift(event, delta, deltaX, deltaY);

					// Clearout lowestDelta after sometime to better
					// handle multiple device types that give different
					// a different lowestDelta
					// Ex: trackpad = 3 and mouse wheel = 120
					if (nullLowestDeltaTimeout) {
						clearTimeout(nullLowestDeltaTimeout);
					}
					nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

					return ($.event.dispatch || $.event.handle).apply(this, args);
				}

				function nullLowestDelta() {
					lowestDelta = null;
				}

				function shouldAdjustOldDeltas(orgEvent, absDelta) {
					// If this is an older event and the delta is divisable by 120,
					// then we are assuming that the browser is treating this as an
					// older mouse wheel event and that we should divide the deltas
					// by 40 to try and get a more usable deltaFactor.
					// Side note, this actually impacts the reported scroll distance
					// in older browsers and can cause scrolling to be slower than native.
					// Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
					return special.settings.adjustOldDeltas && orgEvent.type === "mousewheel" && absDelta % 120 === 0;
				}
			});

			/***/
		},
		/* 76 */
		/***/ function (module, exports, __webpack_require__) {
			__webpack_require__(25);
			module.exports = __webpack_require__(24);

			/***/
		},
		/******/
	]
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTFkZGYzNmY1NmIyY2IyZTcyNzQiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2xpYnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbGlicy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CYXNlTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1V0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0dyYXBoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0ltYWdlQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0NTUzNEUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9GaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlblguanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9XaWRnZXRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwid2VicGFjazovLy8uL2luZGV4LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9CaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQm9va0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJpbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0NvdmVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ3NzTGF5ZXJzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BhZ2VNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvUGRmQm9va1Byb3BzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BkZkxpbmtzSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NlYXJjaEVuZ2luZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoYXJlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoZWV0Q3NzTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Tb3VuZHNFbnZpcm9tZW50LmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvVG9jQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbHMvc2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CbGFua0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0Jvb2ttYXJrcy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9EZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Eb2NNb3VzZVNpbXVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Eb20ySW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRHJhZy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudHNUb0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbnRlcmFjdGl2ZUltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTG9hZGluZ0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9PYmplY3QzRFdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvT3JiaXQuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1N0YXRpY0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RleHR1cmVBbmltYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RodW1ibmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVG91Y2hFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Vc2VyTWVzc2FnZUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVmlldy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9WaXN1YWxXb3JsZC5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Zb3VUdWJlQXBpLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvQ2lyY2xlVGFyZ2V0LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvUG9seVRhcmdldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2pxdWVyeS1tb3VzZXdoZWVsL2pxdWVyeS5tb3VzZXdoZWVsLmpzIl0sIm5hbWVzIjpbIl8kIiwiR0xPQkFMX0xJQlMiLCJ3aW5kb3ciLCJqUXVlcnkiLCJyZXF1aXJlIiwiX2h0bWwyY2FudmFzIiwiaHRtbDJjYW52YXMiLCJfVEhSRUUiLCJUSFJFRSIsIl9SZWFjdCIsIlJlYWN0IiwiX1JlYWN0RE9NIiwiUmVhY3RET00iLCJfUERGSlMiLCJwZGZqc0xpYiIsIl90ciIsInMiLCJpYmVyZXphbnNreSIsInRyIiwiJCIsIlBERkpTIiwiRkIzRF9MT0NBTEUiLCJkaWN0aW9uYXJ5IiwiQmFzZU1hdGhVdGlscyIsInN1bTEiLCJrYSIsImEiLCJrYiIsImIiLCJzdW0yIiwic3VtMyIsInN1bTQiLCJyazQiLCJkeSIsInQiLCJkdCIsInkiLCJzdW0iLCJsZW5ndGgiLCJrMSIsImsyIiwiazMiLCJrNCIsImV4dHJhcG9sYXRlTGluZWFyIiwieCIsInhpIiwiaW50ZXJwb2xhdGVMaW5lYXIiLCJ5aSIsInJldmVyc2UiLCJjYWxjU2NhbGUiLCJzcmNXIiwic3JjSCIsImRzdFciLCJkc3RIIiwibXVsTSIsInIiLCJpIiwicHVzaCIsImoiLCJrIiwidHJhbnNNIiwibSIsIm1hdCIsImRhdGEiLCJkaXNwIiwiTSIsInByZWRpY3QxIiwibnVtIiwibCIsIkQiLCJhbSIsImJtIiwidGEiLCJkIiwicCIsInYiLCJNYXRoIiwicm91bmQiLCJpbmRleE9mIiwicHJlZGljdCIsInNnbnMiLCJzaWduIiwiYWJzIiwiY3VyIiwiZ2V0VW5pcXVlIiwiY2VpbCIsInJhbmRvbSIsInNldFNwbGluZVBvaW50cyIsInNwbGluZSIsInBzIiwicG9pbnRzIiwiY29uc29sZSIsIndhcm4iLCJzZXQiLCJ6IiwibWFwbDJMIiwibHMiLCJsZW4iLCJuIiwiZiIsImRMIiwiTCIsImRldDIiLCJjIiwic29sdmUyTGluIiwiYTEiLCJiMSIsImEyIiwiYjIiLCJyZXMiLCJlcHMiLCJkeCIsImlzSW5zaWRlUG9seSIsImRvbmUiLCJjdCIsInYyZGlzdCIsIm5wIiwicm4iLCJwMCIsInAxIiwiaXAiLCJtaW4iLCJtYXgiLCJ0biIsImlzSW5zaWRlQ29udlBvbHkiLCJzZyIsInYybGVuIiwidjIiLCJzcXJ0IiwidjIxIiwidjIyIiwiY29tcHV0ZVNxdWFyZSIsImNvbXB1dGVJbnRlcnBDb2VmcyIsInRyaSIsImNvZWZzIiwiVXRpbHMiLCJub3JtYWxpemVVcmwiLCJ1cmwiLCJzcGxpdCIsInJlcGxhY2UiLCJiYXNlIiwibG9jYXRpb24iLCJocmVmIiwiam9pbiIsIl9lc2NhcGVIVE1MY2xiIiwiX2VzY2FwZUhUTUxjaGFycyIsImVzY2FwZUhUTUwiLCJleHRlbmRzIiwiZGVyIiwibmFtZSIsImhhc093blByb3BlcnR5IiwiZGVmYXVsdENtcCIsImxvd2VyQm91bmQiLCJjbXAiLCJoIiwibWlkIiwiZmxvb3IiLCJNT0JJTEVfRElBRyIsIkdyYXBoVXRpbHMiLCJjcmVhdGVDYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImludGVycG9sYXRlMDEiLCJ5MSIsInkyIiwiZ2V0Q29sb3JCeXRlcyIsImNvbG9yIiwiaW52ZXJzZUNvbG9yIiwiYnMiLCJpYnMiLCJuYnMiLCJieXRlczJDb2xvciIsImNvbG9yMlJnYmEiLCJieXRlczJSZ2JhIiwiTWF0aFV0aWxzIiwic3BsaXRTcGxpbmUiLCJOIiwibyIsImRsIiwiZ2V0UG9pbnQiLCJ2MSIsImRpc3RhbmNlVG8iLCJjb3B5IiwiZ2V0TGluZWFySW5kZWNlcyIsImRlbCIsImREZWwiLCJyZWZpbmVQb2x5IiwicG9seSIsIm1heERsIiwiVmVjdG9yMiIsIlZlY3RvcjMiLCJJbWFnZUJhc2UiLCJjb250ZXh0IiwicmVuZGVyUGF1c2UiLCJ3bmQiLCJkb2MiLCJlbGVtZW50IiwiYm9keSIsInJlbmRlckNhbnZhcyIsImN0eCIsInJlbmRlckNhbnZhc0N0eCIsInJlc1ciLCJyZXNIIiwic2V0UmVuZGVyQ2FudmFzIiwic2V0UmVzb2x1dGlvbiIsImRpc3Bvc2UiLCJyZW5kZXJCbGFua1BhZ2UiLCJiZWdpblBhdGgiLCJmaWxsU3R5bGUiLCJyZWN0IiwiZmlsbCIsInNldFJlbmRlclBhdXNlIiwiY29udGludWVSZW5kZXIiLCJjYW5jZWxSZW5kZXIiLCJyZW5kZXJUYXNrIiwiY2FuY2VsIiwicmVuZGVySW1hZ2UiLCJpbWFnZSIsInB1c2hDdHgiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJwb3BDdHgiLCJub3JtVG9Db252IiwicmVuZGVySGl0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwic2F2ZSIsInNjYWxlIiwicmVzdG9yZSIsInJlbmRlck5vdEZvdW5kUGFnZSIsImZpbmlzaFJlbmRlciIsImNhbmNlbGVkIiwib25DaGFuZ2UiLCJmaW5pc2hMb2FkIiwib25Mb2FkIiwic3RhcnRSZW5kZXIiLCJnZXRTaW11bGF0ZWREb2MiLCJ1bmRlZmluZWQiLCJnZXRDb250ZXh0IiwiRXZlbnRDb252ZXJ0ZXIiLCJlbmFibGVkIiwic2V0RW5hYmxlIiwidmwiLCJtQ2FwT2JqZWN0Iiwibm90aWZ5IiwiRXZlbnQiLCJtSG92T2JqZWN0IiwiZ2V0Q2FsbGJhY2siLCJvYmplY3QiLCJlIiwidHlwZSIsImNhbGxiYWNrIiwicHJvcHMiLCJ2aWV3IiwiakUiLCJjb252ZXJ0IiwiZmlsdGVyIiwiZ2V0T2JqZWN0IiwiY29udmVydFRvdWNoIiwiY29udmVydE1vdXNlIiwidENhcE9iamVjdCIsInRlc3QiLCJvcmlnaW5hbEV2ZW50Iiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsIkltYWdlRmFjdG9yeSIsImNhY2hlIiwiQ2FjaGUiLCJidWlsZCIsImluZm8iLCJ3aWR0aFRleGVscyIsImhlaWdodFRleGVscyIsImluamVjdG9yIiwiSW50ZXJhY3RpdmVJbWFnZSIsInNyYyIsIlN0YXRpY0ltYWdlIiwiUGRmSW1hZ2UiLCJCbGFua0ltYWdlIiwiQm9va1Byb3BzQnVpbGRlciIsIm9uUmVhZHkiLCJzdHlsZSIsImRlZmF1bHRzIiwiY2FsY1NpemUiLCJjYWxjVGV4ZWxzIiwic2hlZXQiLCJjYWxjUHJvcHMiLCJwYWdlcyIsImNvdmVyIiwicGFnZSIsImNhbGNTaGVldHMiLCJzaGVldHMiLCJnZXRTaGVldHMiLCJnZXRQcm9wcyIsImdldFBhZ2VDYWxsYmFjayIsImJpbmRzIiwicGFnZUNhbGxiYWNrIiwicmVhZHkiLCJTaGVldEJsb2NrIiwidmlzdWFsIiwiZmlyc3QiLCJsYXN0IiwiYW5nbGUiLCJzdGF0ZSIsImxvYWRlZFBvaW50cyIsImxvYWRQb2ludHMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwic2hhcGUiLCJwU3BsaW5lIiwiQ2F0bXVsbFJvbUN1cnZlMyIsImludGVycG9sYXRpb25Qb2ludHMiLCJpU3BsaW5lIiwic2hlZXRCbG9jayIsInJlc1giLCJhU3BsaW5lcyIsImdlb21ldHJ5IiwiY2xvbmUiLCJzaWRlRmFjZXMiLCJmYWNlcyIsInNpZGVUZXh0dXJlIiwiVGV4dHVyZSIsIndyYXBUIiwiUmVwZWF0V3JhcHBpbmciLCJyZXBlYXQiLCJuZWVkc1VwZGF0ZSIsIm1hdGVyaWFscyIsIk1lc2hQaG9uZ01hdGVyaWFsIiwic2V0VGV4dHVyZSIsIm1lc2giLCJNZXNoIiwiY2FzdFNoYWRvdyIsInJlY2VpdmVTaGFkb3ciLCJ0aHJlZSIsInVzZXJEYXRhIiwic2VsZiIsIm1hcmtlcnMiLCJtYXJrZXIiLCJ1c2UiLCJ2ZXJ0aWNlcyIsImlzIiwiQXJyYXkiLCJhcHBseSIsIl8iLCJUaHJlZVV0aWxzIiwiY3JlYXRlTWFya2VyIiwic2l6ZSIsInZlcnRleCIsImFkZCIsImNvcm5lciIsIm1heERpc3RhbmNlIiwiT1oiLCJheGlzIiwiZ2V0U2l6ZSIsInJlZHVjZWRXaWR0aCIsInJlZHVjZVdpZHRoIiwiZ2V0VG9wQ2VybmVycyIsIm9mZiIsIlBJIiwicmVzWiIsImdldFRvcFNpemUiLCJ2cyIsIncwIiwidzEiLCJsb2NhbFRvV29ybGQiLCJnZXRUb3BXb3JsZFJvdGF0aW9uIiwicSIsImdldFRvcFdvcmxkUG9zaXRpb24iLCJ3IiwidmkiLCJnZXRJbnRlcnBvbGF0aW9uUG9pbnRzIiwiaW5kcyIsIm1vZCIsIksiLCJ3YXZlIiwiZmxpcERpcmVjdGlvbiIsImNsb3NlZEFuZ2xlIiwiYmluZGVyVHVybiIsIm9wZW5lZEFuZ2xlIiwiY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMiLCJnZXRQb2ludHNBdEFuZ2xlIiwib3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJobCIsImhyIiwib2Zmc2V0IiwiZGVwdGgiLCJkRGVwdGgiLCJpbkFuZ2xlIiwiaEFuZ2xlIiwiZ2V0UG9pbnRzQXRBbmdsZUFuZEhzIiwibGVmdCIsInJpZ2h0IiwiaW52ZXJzZSIsInNldFBvaW50cyIsInlzIiwicmVzWSIsInBsYW5lIiwiUGxhbmUiLCJub3JtYWwiLCJwbGFuZU9mZnNldCIsImZsZXhpYmxlQ29ybmVyIiwicHJvaiIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50Iiwibm9ybWFsaXplIiwicHJvamVjdFBvaW50Iiwic3ViIiwiZGlzdGFuY2UiLCJkMkFuZ2xlIiwiY29ybmVyRGV2aWF0aW9uIiwiZXhwIiwiYmVuZGluZyIsImFwcGx5QXhpc0FuZ2xlIiwicG9pbnQiLCJwb3NpdGlvbiIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwidmVydGljZXNOZWVkVXBkYXRlIiwibWFya3VwIiwiY29tcHV0ZVZlcnRpY2VzIiwiZ2V0UG9pbnRzQXRIcyIsImhzIiwiYmwiLCJwMiIsImRwIiwibG4iLCJzcCIsInNpbiIsImNvcyIsIm5wcyIsImFuZ2xlcyIsInhwcyIsInlwcyIsImludGVycG9sYXRlIiwiZGVmIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFN0eWxlIiwiaGlnaGxpZ2h0TGlua3MiLCJsaWdodGluZyIsImdyYXZpdHkiLCJjYWNoZWRQYWdlcyIsInJlbmRlckluYWN0aXZlUGFnZXMiLCJyZW5kZXJJbmFjdGl2ZVBhZ2VzT25Nb2JpbGUiLCJyZW5kZXJXaGlsZUZsaXBwaW5nIiwicGFnZXNGb3JQcmVkaWN0aW5nIiwicHJlbG9hZFBhZ2VzIiwiYXV0b1BsYXlEdXJhdGlvbiIsInJ0bCIsImludGVyYWN0aXZlQ29ybmVycyIsIm1heERlcHRoIiwic3RhcnRWZWxvY2l0eSIsImZsZXhpYmlsaXR5Iiwic2lkZSIsImJpbmRlclRleHR1cmUiLCJwYWRkaW5nIiwibWFzcyIsImNzc0xheWVyUHJvcHMiLCJzdHlsZXMiLCJ2b2x1bWUiLCJmbGF0IiwiQ1NTM0RPYmplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiT2JqZWN0M0QiLCJDU1MzRFNwcml0ZSIsIkNTUzNEUmVuZGVyZXIiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3dpZHRoSGFsZiIsIl9oZWlnaHRIYWxmIiwibWF0cml4IiwiTWF0cml4NCIsImNhbWVyYSIsImZvdiIsIm9iamVjdHMiLCJkb21FbGVtZW50Iiwib3ZlcmZsb3ciLCJjYW1lcmFFbGVtZW50IiwiV2Via2l0VHJhbnNmb3JtU3R5bGUiLCJNb3pUcmFuc2Zvcm1TdHlsZSIsInRyYW5zZm9ybVN0eWxlIiwiYXBwZW5kQ2hpbGQiLCJpc0lFIiwic2V0Q2xlYXJDb2xvciIsInNldFNpemUiLCJlcHNpbG9uIiwidmFsdWUiLCJOdW1iZXIiLCJFUFNJTE9OIiwiZ2V0Q2FtZXJhQ1NTTWF0cml4IiwiZWxlbWVudHMiLCJnZXRPYmplY3RDU1NNYXRyaXgiLCJjYW1lcmFDU1NNYXRyaXgiLCJtYXRyaXgzZCIsInJlbmRlck9iamVjdCIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInRyYW5zcG9zZSIsImNvcHlQb3NpdGlvbiIsIm1hdHJpeFdvcmxkIiwiY2FjaGVkU3R5bGUiLCJpZCIsIldlYmtpdFRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsInRyYW5zZm9ybSIsImRpc3RhbmNlVG9DYW1lcmFTcXVhcmVkIiwiZ2V0RGlzdGFuY2VUb1NxdWFyZWQiLCJjaGlsZHJlbiIsIm9iamVjdDEiLCJvYmplY3QyIiwic2V0RnJvbU1hdHJpeFBvc2l0aW9uIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJ6T3JkZXIiLCJzY2VuZSIsIm9yZGVyIiwic29ydCIsInpNYXgiLCJ0cmF2ZXJzZSIsImluZGV4IiwiekluZGV4IiwicmVuZGVyIiwicHJvamVjdGlvbk1hdHJpeCIsIldlYmtpdFBlcnNwZWN0aXZlIiwiTW96UGVyc3BlY3RpdmUiLCJwZXJzcGVjdGl2ZSIsInVwZGF0ZU1hdHJpeFdvcmxkIiwicGFyZW50IiwiX0NTUzNET2JqZWN0IiwiX0NTUzNEU3ByaXRlIiwiQ1NTTGF5ZXIiLCJpbml0IiwiZGVsYXkiLCJmYjNkUUZpbHRlciIsImFwcGVuZFRvIiwiaGVhZCIsInJlbW92ZSIsImpDb250YWluZXIiLCJzZXREYXRhIiwid2lkdGhQeHMiLCJoZWlnaHRQeHMiLCJjYWxsSW50ZXJuYWwiLCJlcnJvciIsImNsZWFySW50ZXJuYWxzIiwiY3NzIiwiaHRtbCIsImpzIiwiZXZhbCIsInBlbmRlZENhbGwiLCJjbGIiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImlzSGlkZGVuIiwiaGFzQ2xhc3MiLCJoaWRlIiwiYWRkQ2xhc3MiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNob3ciLCJyZW1vdmVDbGFzcyIsIm1heFNpemUiLCJJbmZpbml0eSIsInNpemVvZiIsImNvdW50U2l6ZW9mIiwib3MiLCJNYXAiLCJmb3JFYWNoIiwiZ2V0IiwibG9ja2VkIiwiZGVsZXRlIiwiZnJlZVNwYWNlIiwiYXJyIiwia2V5IiwicmVjdXJzaW9uU2l6ZW9mIiwiZ2V0VGltZXN0YW1wIiwicHV0IiwiQ29udHJvbGxlciIsImhhbmRsZURlZmF1bHQiLCJkaXNwYXRjaEFzeW5jIiwidGhlbiIsImRpc3BhdGNoRXZlbnQiLCJFdmVudERpc3BhdGNoZXIiLCJDdXN0b21FdmVudENvbnZlcnRlciIsImN1c3RvbVRlc3QiLCJlRG9jIiwiY3VzdG9tcyIsInRhcmdldCIsImFkZEN1c3RvbSIsImN1c3RvbSIsInRlc3RJbnRlcnNlY3Rpb24iLCJGaW5kZXIiLCJpc0RlbGltZXRyIiwiREVMSU1JVEVSIiwibWVyZ2UiLCJhcyIsInN0cnMiLCJjaGFyQXQiLCJzdHIiLCJhZGRIaXRzIiwiY2hhcnMiLCJwYXR0ZXJuIiwiZGVsaW1ldGVyIiwiaGl0cyIsImFkZENvbnRleHQiLCJkZWxzIiwiY29udGV4dExlbmd0aCIsInByZXZEZWxzIiwiY29udGV4dHMiLCJzdWJzdHIiLCJnZXRIaXRzIiwiZ2V0Q29udGV4dHMiLCJ0b0xvd2VyQ2FzZSIsImxzdHIiLCJGdWxsU2NyZWVuWCIsImF2YWlsYWJsZSIsImFjdGl2YXRlZCIsIm5vZGUiLCJjbGFzc1giLCJoYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlZkhhbmRsZXIiLCJyZXF1ZXN0IiwiZGVmTm9kZSIsIkZ1bGxTY3JlZW4iLCJHbG9iYWxXb3JrZXJPcHRpb25zIiwid29ya2VyU3JjIiwiUERGSlNfTE9DQUxFIiwiR0xPQkFMX1BBVEhTIiwicGRmSnNXb3JrZXIiLCJjTWFwVXJsIiwicGRmSnNDTWFwVXJsIiwiY01hcFBhY2tlZCIsImRpc2FibGVBdXRvRmV0Y2giLCJkaXNhYmxlU3RyZWFtIiwiZGlzYWJsZVJhbmdlIiwiaW1hZ2VSZXNvdXJjZXNQYXRoIiwiZXh0ZXJuYWxMaW5rVGFyZ2V0IiwiTGlua1RhcmdldCIsIkJMQU5LIiwiZGlzYWJsZUZvbnRGYWNlIiwiUGRmIiwibG9hZGluZ1Byb2dyZXNzIiwib3Blbk9wdGlvbnMiLCJoYW5kbGVyUXVldWUiLCJwcm9ncmVzRGF0YSIsImxvYWRlZCIsInRvdGFsIiwidGFzayIsImdldERvY3VtZW50IiwicmFuZ2VDaHVua1NpemUiLCJvblByb2dyZXNzIiwib2xkIiwiaXNOYU4iLCJwcm9taXNlIiwibnVtUGFnZXMiLCJhbGwiLCJnZXRQYWdlIiwiY2F0Y2giLCJlcnJvckhhbmRsZXIiLCJwMHMiLCJnZXRQYWdlU2l6ZSIsInAxcyIsImRvdWJsZWRQYWdlcyIsImdldFBhZ2VUeXBlIiwiZ2V0UGFnZXNOdW0iLCJnZXREZXN0aW5hdGlvbiIsImRlc3QiLCJkZXN0UHJvbWlzZSIsImdldFBhZ2VJbmRleCIsIm51bWJlciIsInNwbGljZSIsInNldExvYWRpbmdQcm9ncmVzc0NsYiIsInNldEVycm9ySGFuZGxlciIsImVoIiwicm90YXRlIiwiZ2V0SGFuZGxlciIsIlRocmVlRXZlbnRDb252ZXJ0ZXJGcyIsIm9iamVjdHNUZXN0Iiwib2JqZWN0c0FuZEZhY2VzVGVzdCIsImZhY2UiLCJtYXRlcmlhbEluZGV4IiwidmlzdWFsV29ybGQiLCJjb29yZHMiLCJyYXljYXN0ZXIiLCJ0aHJlZXMiLCJhZGRUaHJlZSIsInJlbW92ZVRocmVlIiwic2V0Q29vcmRzRnJvbUV2ZW50Iiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwidmVydGljZXMyVVZzIiwiaW5kZWNlcyIsImNvbnZlckNsYiIsInZpcyIsImNvbXB1dGVGYWNlVmVydGV4VXZzIiwidXZzIiwidXZzaSIsImZhY2VWZXJ0ZXhVdnMiLCJTcGhlcmVHZW9tZXRyeSIsImZpbmRVdlRyaXMiLCJmb3VuZCIsImZpbmRJbnRlcm5hbFZlcnRpY2VzIiwidmVydGV4Tm9ybWFscyIsInZhbHVlcyIsIldpZGdldENvbnRyb2xsZXIiLCJ2aXNpYmxlIiwidG9nbGUiLCJmaXJlQ2hhbmdlIiwidXBkYXRlVmlldyIsInNldFN0YXRlIiwiZW5hYmxlIiwiYWN0aXZlIiwiVGFyZ2V0IiwiZm4iLCJGbGlwQm9vayIsIm9wdGlvbnMiLCJwZGZMaW5rc0hhbmRsZXIiLCJzb3VuZHMiLCJ1c2VyTWVzc2FnZUN0cmwiLCJ0b2NDdHJsIiwidGh1bWJuYWlscyIsImJvb2ttYXJrcyIsInNoYXJlQ3RybCIsImN0cmwiLCJib29rUHJpbnRlciIsImJvb2siLCJwcm9wc0J1aWxkZXIiLCJib29rQnVpbGRlciIsInBlbmRpbmdEaXNwb3NlIiwicGFyZW50Q29udGFpbmVyIiwiYWN0aXZhdGVGdWxsU2NyZWVuIiwiQm9va1ZpZXciLCJEZXRlY3RvciIsIndlYmdsIiwiYWRkR2V0V2ViR0xNZXNzYWdlIiwiZ2V0VmlldyIsImxvYWRpbmdDdHJsIiwiTG9hZGluZ0NvbnRyb2xsZXIiLCJwcm9ncmVzcyIsIlVzZXJNZXNzYWdlQ29udHJvbGxlciIsIlZpc3VhbFdvcmxkIiwiZ2V0Q29udGFpbmVyIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicHJvcGVydGllc0NhbGxiYWNrIiwiQ2xiQm9va1Byb3BzQnVpbGRlciIsIkNvbG9yIiwiZ2V0SGV4U3RyaW5nIiwiYXR0ciIsIkJvb2siLCJCb29rUHJpbnRlciIsInRlbXBsYXRlIiwicHJpbnRTdHlsZSIsIkJvb2tDb250cm9sbGVyIiwiY29udHJvbHNQcm9wcyIsInNldEluamVjdG9yIiwiYm9va0N0cmwiLCJhZGRIYW5kbGVyIiwic2V0UHJpbnRlciIsIlRodW1ibmFpbHMiLCJnZXRUaHVtYm5haWxzVmlldyIsImdldFBhZ2VzIiwia1d0b0giLCJUb2NDb250cm9sbGVyIiwic2V0VGh1bWJuYWlscyIsIm91dGxpbmUiLCJCb29rbWFya3MiLCJnZXRCb29rbWFya3NWaWV3Iiwic2V0Qm9va21hcmtzIiwic2V0VG9jQ3RybCIsInNlYXJjaCIsIlNlYXJjaCIsImdldFNlYXJjaFZpZXciLCJvblF1ZXJ5Iiwic2V0UXVlcnkiLCJiaW5kIiwic2V0UmVzdWx0cyIsInJlc3VsdHMiLCJsYXN0UGFnZSIsInNldFNlYXJjaCIsIlBkZkxpbmtzSGFuZGxlciIsImhhbmRsZUV2ZW50IiwiZ2V0T3V0bGluZSIsInBkZkxpbmtzIiwic2V0SGFuZGxlciIsIlNvdW5kc0Vudmlyb21lbnQiLCJzZXRTb3VuZHMiLCJzdWJzY3JpYmVGbGlwcyIsImF1dG9OYXZpZ2F0b3IiLCJBdXRvTmF2aWdhdG9yIiwiYXV0b05hdmlnYXRpb24iLCJTaGFyZUNvbnRyb2xsZXIiLCJzaGFyZUxpbmtCdWlsZGVyIiwidSIsIlJlZ0V4cCIsInVybFBhcmFtIiwiaGFzaCIsInNldFNoYXJlQ3RybCIsIm9uRXJyb3IiLCJzZXRFcnJvciIsIm1lc3NhZ2UiLCJwZGYiLCJQZGZCb29rUHJvcHNCdWlsZGVyIiwiYm9va1N0eWxlIiwicGRmT3Blbk9wdGlvbnMiLCJzZXRQcm9ncmVzcyIsIm9uUGFnZUNhbGxiYWNrRXJyb3IiLCJjb250YWluZXJzIiwicHJvdG90eXBlIiwiVHlwZUVycm9yIiwiTyIsInN0YXJ0IiwiYXJndW1lbnRzIiwicmVsYXRpdmVTdGFydCIsImVuZCIsInJlbGF0aXZlRW5kIiwiZmluYWwiLCJmaW5kIiwiZGVmaW5lUHJvcGVydHkiLCJwcmVkaWNhdGUiLCJsaXN0IiwidGhpc0FyZyIsImNhbGwiLCJmaW5kSW5kZXgiLCJlc2NhcGUiLCJTdHJpbmciLCJyZXBsYWNlQWxsIiwibmF2aWdhdGVzIiwicGFnZU4iLCJmYjNkIiwibmF2aWdhdG9yIiwiaW5zdGFuY2VzIiwiZ29Ub1BhZ2UiLCJnZXRQYWdlTnVtYmVyIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwicmVnZXgiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VJbnQiLCJCaW5kZXIiLCJoaWRkZW4iLCJiYWNrU2l6ZSIsImJhY2tHIiwiQm94R2VvbWV0cnkiLCJ0cmFuc3BhcmVudCIsIm9wYWNpdHkiLCJiYWNrTSIsInRleHR1cmVMb2FkZXIiLCJsb2FkIiwidGV4dHVyZSIsInNldEhleCIsIm1pbkZpbHRlciIsIkxpbmVhckZpbHRlciIsImJhY2siLCJiYWNrUlQiLCJiYWNrUlIiLCJiYWNrTFQiLCJiYWNrTFIiLCJsZWZ0UGl2b3QiLCJyaWdodFBpdm90IiwidHIxIiwicXVhdGVybmlvbiIsInNldEZyb21BeGlzQW5nbGUiLCJ0cjIiLCJzZXRMZWZ0Iiwic2V0UmlnaHQiLCJqb2luTGVmdENvdmVyIiwiZGlzY29ubmVjdExlZnRDb3ZlciIsImpvaW5SaWdodENvdmVyIiwiZGlzY29ubmVjdFJpZ2h0Q292ZXIiLCJjc3NGcyIsInBsYXkiLCJwbGF5ZXIiLCJmYjNkTm9QbGF5IiwicGVuZGluZ1BsYXllcnMiLCJwbGF5VmlkZW8iLCJwYXVzZSIsInBhdXNlVmlkZW8iLCJtb3VzZUNvbnRyb2xsZXIiLCJwcmVwYXJlUHJvcHMiLCJ6b29tIiwic2luZ2xlUGFnZSIsImF1dG9SZXNvbHV0aW9uIiwidXNlckRpcmVjdGlvbiIsImxhc3RUb3BQYWdlIiwiZGlyZWN0aW9uIiwicGFnZU1hbmFnZXIiLCJQYWdlTWFuYWdlciIsImxheWVyTWFuYWdlciIsIkNzc0xheWVyc01hbmFnZXIiLCJzZWFyY2hFbmdpbmUiLCJTZWFyY2hFbmdpbmUiLCJvblBhZ2VIaXRzQ2hhbmdlZCIsInF1ZXJ5IiwicmVmcmVzaFBhZ2VRdWVyeSIsImJpbmRlciIsImNvdmVyUCIsImVuYWJsZU1vdXNlIiwibGVmdENvdmVyIiwiQ292ZXIiLCJzZXRMZWZ0Q292ZXJUZXh0dXJlIiwic3Vic2NyaWJlU2hlZXRCbG9jayIsInJpZ2h0Q292ZXIiLCJzZXRSaWdodENvdmVyVGV4dHVyZSIsInRocmVlU2hlZXRCbG9ja3MiLCJzaGVldEJsb2NrcyIsImFkZFNoZWV0QmxvY2siLCJzZXRQYWdlVGV4dHVyZSIsInJlZHVjZVBhZ2VzV2lkdGgiLCJvcGVuZWRCb3giLCJCb3gzIiwic2V0RnJvbU9iamVjdCIsInVuaW9uIiwibGFzdE1vdXNlUG9zIiwic2hlZXRQaHlzaWNzIiwiU2hlZXRQaHlzaWNzIiwidXBkYXRlIiwicGFnZVgiLCJwYWdlWSIsImFkZFJlbmRlckNhbGxiYWNrIiwib24iLCJvblBpY2tDYWxsYmFjayIsImRyYWciLCJvbkRyYWdDYWxsYmFjayIsIm9uUmVsZWFzZUNhbGxiYWNrIiwiZHJhZ0FuZ2xlIiwidG1wIiwiYm94cyIsImFkZE9iamVjdCIsInRtcEJveCIsImJvb2tTaGFkb3dNYXRlcmlhbCIsIkRvdWJsZVNpZGUiLCJib29rU2hhZG93IiwiUGxhbmVHZW9tZXRyeSIsInJvdGF0ZVgiLCJjYWxjdWxhdGVTaGFkb3ciLCJyZWZyZXNoWm9vbSIsImlzUHJvY2Vzc2luZyIsIm5vdGlmeUJlZm9yZUFuaW1hdGlvbiIsIm5vdGlmeUFmdGVyQW5pbWF0aW9uIiwidXBkYXRlVGhyZWUiLCJib3giLCJkZCIsInNoYWRvd1BsYWNlIiwicmVtb3ZlT2JqZWN0IiwicmVtb3ZlUmVuZGVyQ2FsbGJhY2siLCJyZW1vdmVTaGVldEJsb2NrcyIsInJlbW92ZVNoZWV0QmxvY2siLCJoYXNQZW5kaW5nUGxheWVycyIsInJlc29sdmVQZW5kaW5nUGxheWVycyIsInNldEF1dG9SZXNvbHV0aW9uIiwic2V0Wm9vbSIsImdldEJvb2tQYWdlcyIsInNldEZsaXBQcm9ncmVzc0NsYiIsImZsaXBQcm9ncmVzc0NsYiIsImlzQWN0aXZlUGFnZSIsImdldEJsb2NrQnlQYWdlIiwiYmxvY2siLCJnZXRCbG9ja1BhZ2VzIiwicmFuZ2UiLCJnZXRUb3BQYWdlcyIsImdldFBhZ2VTdGF0ZSIsImVuYWJsZUxvYWRpbmdBbmltYXRpb24iLCJnZXRMZWZ0RmxpcHBpbmciLCJnZXRSaWdodEZsaXBwaW5nIiwiZ2V0Q2xvc2VkQmxvY2tBbmdsZSIsInBoeXNpY0lkIiwiZ2V0UGFyYW1ldHIiLCJmbGlwTGVmdCIsInByb2dyZXNzQ2xiIiwiZmxpcERpc2FibGVkIiwiY29ubmVjdFBoeXNpY3MiLCJzZXRTaGVldEJsb2NrcyIsInNwbGl0U2hlZXRCbG9jayIsImZpbmlzaEFuaW1hdGlvbkNsYiIsImZsaXBSaWdodCIsImNsZWFySG92ZXJJbmZvIiwidHVybk9uRXZlbnRzIiwiaG92ZXJJbmZvIiwiZm9yY2UiLCJjb3JuZXJGb3JjZSIsInhTZWdtZW50IiwiY29tcHV0ZVRhcmdldCIsInNlZyIsInV2IiwiY29ybmVyVGFyZ2V0IiwiZHJhZ0ZvcmNlQ2xiIiwiZ2V0RHJhZ0Nvcm5lckZvcmNlQ2xiIiwiZHJhZ0luZm8iLCJ0dXJuT2ZmRXZlbnRzIiwiZ2V0RmxpcHBpbmciLCJmbGlwIiwiY29ybmVyQ2FsbGJhY2siLCJwZW5kaW5ncyIsImhvdmVyQW5nbGUiLCJob3ZlciIsInBvc3NpYmxlIiwibmV4dEJsb2NrIiwic2V0UGFyYW1ldHIiLCJnZXRUYXJnZXRGb3JjZUNsYiIsImhvdmVyQ29ybmVyRm9yY2VDbGIiLCJjb3JuZXJDbGlja0RhdGEiLCJwb3ciLCJldmVudENvbnZlcnRlciIsIkNpcmNsZVRhcmdldCIsIm1vdXNlQ2FsbGJhY2siLCJ0cmFuc2ZlckV2ZW50VG9UZXh0dXJlIiwidG91Y2hDYWxsYmFjayIsIm1vdXNlRXZlbnRzIiwidG91Y2hFdmVudHMiLCJibG9ja3MiLCJtYXRlcmlhbCIsIm1lcmdlU2hlZXRCbG9ja3MiLCJjYWxjQmxvY2tGb3JjZSIsInZlbG9jaXR5IiwiY29ybmVySGVpZ2h0IiwiY2FsY0Jsb2NrQ29ybmVyRm9yY2UiLCJzZXRWaXN1YWxNb2RlIiwibW9kZSIsImxpZ2h0TW9kZXMiLCJzZXRMaWdodCIsImFtYmllbnQiLCJkaXJlY3Rpb25hbCIsImFuaW1hdGlvbk5vdGlmaWNhdGlvbiIsInJlamVjdCIsImdldFVzZXJEaXJlY3Rpb24iLCJjb3ZlckhlaWdodCIsInNpbXVsYXRlQ2xiIiwicmVtb3ZlQ2xiIiwiYW5nbCIsImNoIiwibGFzdFQiLCJ0cmlnZ2VyIiwic2ltdWxhdGUiLCJsZWZ0U2l6ZSIsIm5ld0Jsb2NrIiwiZmlyc3RCbG9jayIsImxhc3RCbG9jayIsImNyZWF0ZVNpZGVUZXh0dXJlIiwibWVyZ2VQcm9wcyIsInNlY29uZCIsImZsZXhpYmxlQ29ybmVySyIsImNzc0xheWVyc0xvYWRlciIsImxvYWRlciIsIm5scyIsImNzc0xheWVySnNPYmplY3QiLCJjbElmRXgiLCJubyIsImNzc0xheWVySnNPYmplY3RJbml0Iiwicm8iLCJwcmV2ZW50RGVmYXVsdCIsInAwMSIsIm5tIiwiWW91VHViZUFwaSIsInBsYXllclZhcnMiLCJsb29wIiwiY29udHJvbHMiLCJtdXRlIiwicGxheWxpc3QiLCJZVCIsIlBsYXllciIsInZpZGVvSWQiLCJhZHMiLCJhZHNieWdvb2dsZSIsInNjcmlwdCIsImFzeW5jIiwiZWFjaCIsInNob3duIiwiYWQiLCJ0cmltIiwic3RhdGljIiwibGl2ZSIsIm1peGVkIiwibmF2aWdhdGlvbkNvbnRyb2xzIiwib3JiaXQiLCJnZXRPcmJpdCIsInVwZGF0ZVZpZXdJZlN0YXRlIiwiYmluZEFjdGlvbnMiLCJzbWFydFBhbiIsImFjdGlvbnMiLCJpc1NpbmdsZVBhZ2VBdmFpbGFibGUiLCJhY3RpdmVGb3JNb2JpbGUiLCJpc01vYmlsZSIsInN0YXRzIiwiYWN0aXZlU2lkZSIsImF1dG9QbGF5IiwiYm94MCIsImJveDEiLCJib29rV2lkdGgiLCJib29rV2F0Y2hlciIsIk9iamVjdDNEV2F0Y2hlciIsIngwIiwiZGVmYXVsdCIsIlN0YXRzIiwidG9wIiwib25TY3JlZW5Nb2RlQ2hhbmdlZCIsIm9uVXBkYXRlVmlldyIsImdldFBhcmVudENvbnRhaW5lciIsImNtZFNtYXJ0UGFuIiwibG9hZGluZ0FuaW1hdGlvbiIsInNraW4iLCJpbml0TG9hZGluZ0FuaW1hdGlvbiIsInRlbXBsYXRlT2JqZWN0IiwiYXBwTG9hZGVkIiwibG9hZGluZ0FuaW1hdGlvbkhhbmRsZXIiLCJwcmludGVyIiwibG9hZGluZyIsInBlbmRpbmdMb2FkaW5nQW5pbWF0aW9uIiwiZW5hYmxlTmF2aWdhdGlvbiIsInNldEFjdGl2ZVRhYiIsImRlZmF1bHRUYWIiLCJzZXRFbmFibGVkIiwiY2FuWm9vbUluIiwiY2FuWm9vbU91dCIsImNhbkRlZmF1bHRab29tIiwic2V0Qm9va1pvb20iLCJjbWRBdXRvUGxheSIsInBlbmRpbmdBdXRvUGxheSIsImZsaXBwZWQiLCJjYW5GbGlwTGVmdCIsImNtZEJhY2t3YXJkIiwiY2FuRmxpcFJpZ2h0IiwiY21kRm9yd2FyZCIsImNtZFpvb21JbiIsImRlbHRhIiwiem9vbUluIiwiY21kWm9vbU91dCIsInpvb21PdXQiLCJzZXRTY2FsZSIsImNtZERlZmF1bHRab29tIiwiY21kVG9jIiwiY21kU2hhcmUiLCJzdGFydEZsaXAiLCJjbWRCaWdCYWNrd2FyZCIsImNtZEJpZ0ZvcndhcmQiLCJjbWRTYXZlIiwiZG93bmxvYWRVUkwiLCJjbGljayIsImNtZFByaW50IiwicHJpbnQiLCJjbWRGdWxsU2NyZWVuIiwibWluQXppbXV0aEFuZ2xlIiwibWF4QXppbXV0aEFuZ2xlIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJjbWRTaW5nbGVQYWdlIiwiY21kU291bmRzIiwiY21kU3RhdHMiLCJhcHBlbmQiLCJjbWRQZW5kaW5nUGxheSIsImNtZEdvdG9GaXJzdFBhZ2UiLCJjbWRHb3RvTGFzdFBhZ2UiLCJwYWdlTnVtIiwiY3VycmVudCIsImZsaXBzIiwiY292cyIsImN2Iiwic2V0Q2xiIiwiZmwiLCJ0aW1lIiwibmV4dCIsImZsaXBSZXMiLCJlbmRGbGlwIiwiZ2V0UGFnZUZvckdVSSIsImlucFBhZ2UiLCJpc0NtZFZpc2libGUiLCJuYXJyb3dWaWV3IiwiZW5hYmxlZEluTmFycm93IiwidXBkYXRlVmlld1N0YXRlIiwidmlld1N0YXRlIiwiZmxpcHBlcnNFbmFibGUiLCJnZXRBY3Rpb25zIiwiaXNTd2lwcGluZyIsInRvdWNoQ21kU3dpcGUiLCJjb2RlIiwiY21kcyIsImFjdGl2YXRlIiwiY21kUGFuTGVmdCIsInBhbiIsInNwZWVkIiwiY21kUGFuUmlnaHQiLCJjbWRQYW5VcCIsImNtZFBhbkRvd24iLCJtb3VzZUNtZFJvdGF0ZSIsIm1vdXNlQ21kRHJhZ1pvb20iLCJtb3VzZUNtZFBhbiIsIm1vdXNlQ21kV2hlZWxab29tIiwiZGVsdGFZIiwidG91Y2hDbWRSb3RhdGUiLCJ0b3VjaENtZFpvb20iLCJ0b3VjaFpvb21EYXRhIiwidG91Y2hDbWRQYW4iLCJ0b3VjaCIsInRvdWNoZXMiLCJzd2lwZURhdGEiLCJoYW5kbGVkIiwieTAiLCJ3aWRTZXR0aW5ncyIsIndpZFRvb2xiYXIiLCJlVG9BIiwiRXZlbnRzVG9BY3Rpb25zIiwiYWRkQWN0aW9uIiwibW91c2VCdXR0b25zIiwiUmlnaHQiLCJhY3Rpb24iLCJmbGFncyIsInNldEFjdGlvbnMiLCJsZXZlbHMiLCJzdHlsZVNoZWV0IiwicGRmU3JjIiwiZnJhbWUiLCJwcmludFduZCIsImNhbGxNYW51YWxseSIsInVzZUlGcmFtZSIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwicmVuZGVyQ29udGVudCIsImNvbnRlbnQiLCJwcmludERvYyIsIndyaXRlIiwiY2xvc2UiLCJTZXQiLCJyZW5kZXJIdG1sIiwicmVuZGVySGVhZCIsIndyYXAiLCJsaW5rcyIsIm1hdGNoIiwibGluayIsImZhaWwiLCJyZXNwb25zZVRleHQiLCJkZWZhdWx0U3R5bGVTaGVldCIsImlzQ2hyb21pdW0iLCJjaHJvbWUiLCJ3aW5OYXYiLCJ2ZW5kb3JOYW1lIiwidmVuZG9yIiwiaXNJRWVkZ2UiLCJ1c2VyQWdlbnQiLCJpc0lPU0Nocm9tZSIsImNvbnRhaW5lciIsImluaXRWaWV3IiwiYm9va21hcmtzVmlldyIsInRodW1ibmFpbHNWaWV3Iiwic2VhcmNoVmlldyIsImdldEhhbmRsZXJzIiwiaGFuZGxlcnMiLCJjYWxsTGF0ZXIiLCJQQUdFX0hBTkRMRVJfREVMQVkiLCJvbkl0ZW1TdGF0ZUNoYW5nZWQiLCJnZXRGb3JtcyIsImdldExpbmtzIiwiZ2V0V2lkZ2V0cyIsImdldElucHV0cyIsImdldFRleHRzIiwiZ2V0VGVtcGxhdGUiLCJyZWwiLCJWaWV3IiwiaW1hZ2VGYWN0b3J5Iiwid3JhcHBlcnMiLCJnZXRBY3RpdmVzIiwiYWNzIiwibGF5ZXJzIiwiZ2V0TGF5ZXJzIiwiZmluaXNoIiwic2wiLCJTaGVldENzc0xheWVyIiwicGFnZU51bWJlciIsIndhaXQiLCJwYWdlUXVlcnkiLCJwYWdlQ2FjaGUiLCJyZXNvdXJjZXNDYWNoZSIsImNhbnZhc2VzIiwid2lsbFJlYWRGcmVxdWVudGx5IiwiZGVzeW5jaHJvbml6ZWQiLCJuZXh0Q2FudmFzIiwibG9hZGluZ3MiLCJyZW5kZXJRdWV1ZSIsInByZWRpY3RlZFJlcXVlc3RzIiwidG1wTWF0ZXJpYWwiLCJNZXNoQmFzaWNNYXRlcmlhbCIsImNyZWF0ZUxvYWRpbmdUZXh0dXJlIiwibG9hZFByZWRpY3RlZFBhZ2VzIiwidXBkYXRlUmVuZGVyUXVldWUiLCJzcHJpdGVUaWxlcyIsImFuaW1hdGlvbiIsIkxvYWRpbmdBbmltYXRpb24iLCJhbmltYXRvciIsIlRleHR1cmVBbmltYXRvciIsImNyZWF0ZVNwcml0ZSIsImlzQ292ZXIiLCJzZXR1cE1hdGVyaWFsIiwiaXNBY3RpdmUiLCJyZW1vdmVGcm9tTG9hZGluZ3MiLCJyZW1vdmVGcm9tUmVuZGVyUXVldWUiLCJ3cmFwcGVyIiwicHVzaEluUmVuZGVyUXVldWUiLCJyZW5kZXJpbmciLCJlcyIsImdldENTU0xheWVyIiwiYXJncyIsInJlc29sdmVQZW5kaW5ncyIsInJ0bFBhZ2VOIiwicGkiLCJpc1RvcCIsInNldE1hdGVyaWFsIiwiY2FsY1Jlc29sdXRpb24iLCJpbnRlcmFjdGl2ZSIsIm9uVXBkYXRlIiwiaXNTaW5nbGVQYWdlIiwiY29lZmZpY2llbnQiLCJkZXZpY2VQaXhlbFJhdGlvIiwibWluUmVzIiwibWF4UmVzIiwiaXNNb3ZpbmciLCJ1ZCIsIm5lYXIiLCJ0cmFuc2ZlckV2ZW50cyIsIm1vdXNldXAiLCJtb3VzZW91dCIsImVudCIsInRvT2JqZWN0IiwiZ2V0T3JMb2FkVGV4dHVyZU9iamVjdCIsInRvRG9jIiwib2IiLCJwYWdlRGVzY3JpcHRpb24iLCJ2aWV3cG9ydCIsImdldFZpZXdwb3J0IiwiY3Vyc29ycyIsImRlZmF1bHRIYW5kbGVyIiwiZGVzdGluYXRpb24iLCJjYWxsSGFuZGxlcnMiLCJldmVudCIsImFubm8iLCJhbm5vdGF0aW9uIiwicG9wIiwicHJvY2VzcyIsInN0YW1wIiwiZ2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsIml0ZW1zIiwiaXRlbSIsImxpbmtCdWlsZGVyIiwiY21kQ2xvc2VTaGFyZSIsImNsaWNrTGluayIsImJsYW5rIiwiY21kRmFjZWJvb2siLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRMaW5rIiwiY21kVHdpdHRlciIsImNtZEVtYWlsIiwiY21kIiwibGF5ZXIiLCJhZGRDc3NPYmplY3QiLCJyZW1vdmVDc3NPYmplY3QiLCJyb3RhdGlvbiIsInRhcmdldEZvcmNlQ2xiIiwiZyIsInRsIiwidGFyZ2V0QW5nbGUiLCJmbGJ0IiwiZHJhZ0Nvcm5lckZvcmNlQ2xiIiwiZnBzIiwic3RhcnREdCIsIm1hcmdpbiIsImluZk0iLCJhdHRlbXB0cyIsIm1heEl0ZXJhdGlvbnMiLCJmb3JjZUNsYiIsImNvcm5lckZvcmNlQ2xiIiwiY2YiLCJnZXRQYXJhbWV0ck1hcCIsIlQiLCJhdHRlbXB0IiwiaXQiLCJub3MiLCJpbnRlZ3JhdGUiLCJjaSIsImZpbmRDb2xsaXNpb25zIiwic2NvcyIsInNvbHZlQ29sbGlzaW9uIiwiZ3MiLCJpMCIsImZpbmRBbmRTb2x2ZUNvcm5lckNvbGxpc2lvbnMiLCJyZW1vdmVTdGF0aWNzIiwiYWwiLCJkQ2giLCJkdiIsIm1tIiwiYXYiLCJidiIsImlzQ29sbGlzaW9uIiwiYWxmIiwiY29zQWxmIiwiYnJmIiwiYXVkaW8iLCJBdWRpbyIsImN1cnJlbnRUaW1lIiwiZW1pdHRlciIsInRhYiIsIm9uTmF2aWdhdGUiLCJuYXZpZ2F0ZVRodW1ibmFpbHMiLCJuYXZpZ2F0ZVNlYXJjaCIsIm5hdmlnYXRlQm9va21hcmtzIiwiaXNCb29rbWFya3MiLCJjbWRCb29rbWFya3MiLCJjbWRUaHVtYm5haWxzIiwiY21kU2VhcmNoIiwiY21kQ2xvc2VUb2MiLCJvcGVuVXJsIiwiZHN0RGF0YUhhbmRsZXIiLCJkc3REYXRhIiwiZnJvbnRHZW9tZXRyeSIsInRyYW5zbGF0ZSIsImJhY2tHZW9tZXRyeSIsInJvdGF0ZVkiLCJsZWZ0R2VvbWV0cnkiLCJyaWdodEdlb21ldHJ5IiwidG9wR2VvbWV0cnkiLCJib3R0b21HZW9tZXRyeSIsIkdlb21ldHJ5IiwiYWRkRmFjZXMiLCJmcyIsIkZhY2UzIiwibWFwVmVydGljZXMiLCJkc3QiLCJlcSIsImZyb250TWFwIiwiYmFja01hcCIsImxlZnRNYXAiLCJyaWdodE1hcCIsIkxlZnQiLCJNaWRkbGUiLCJnZXRUaXRsZSIsInRpdGxlIiwiZ2V0SXRlbXMiLCJub2RlcyIsIm1hcE5vZGVzIiwibGkiLCJtaW5pbWl6ZWQiLCJyZW5kZXJOb2RlIiwicmVuZGVyTm9kZXMiLCJleHBhbmQiLCJtaW5pbWl6ZSIsImxldmVsIiwiZ2V0V2ViR0xFcnJvck1lc3NhZ2UiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwidGV4dEFsaWduIiwiYmFja2dyb3VuZCIsImlubmVySFRNTCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsInBhcmFtZXRlcnMiLCJjYW52YXMiLCJDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQiLCJ3b3JrZXJzIiwiV29ya2VyIiwiZmlsZWFwaSIsIkZpbGUiLCJGaWxlUmVhZGVyIiwiRmlsZUxpc3QiLCJCbG9iIiwiRG9jTW91c2VTaW11bGF0b3IiLCJqRnJhbWUiLCJiRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsInJlc2VuZFByb3BlcnRpZXMiLCJnZXREZWZhdWx0UmVzZW5kUHJvcGVydGllcyIsInVuZGVmaW5lZFByb3BlcnRpZXMiLCJnZXREZWZhdWx0VW5kZWZpbmVkUHJvcGVydGllcyIsIm9uRG9jQ2hhbmdlQ2xicyIsInRlcm1zIiwiSE9WRVIiLCJBQ1RJVkUiLCJzdHlsZVNoZWV0cyIsInNzIiwiY3NzUnVsZXMiLCJjc3NUZXh0IiwidGVybSIsInNlbGVjdG9yVGV4dCIsImNvbnZlcnRDb29yZHMiLCJqRWxlbWVudCIsInRyaWdnZXJFdmVudCIsImFkdmFuY2VkUHJvcHMiLCJ0aW1lU3RhbXAiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImVudGVyRWxlbWVudCIsImxlYXZlRWxlbWVudCIsImFjdGl2YXRlRWxlbWVudCIsImRlYWN0aXZhdGVFbGVtZW50IiwiYWRkRG9jQ2hhbmdlQ2xiIiwiZWxlbWVudEZyb21Qb2ludCIsImNoaWxkTm9kZXMiLCJjaGlsZCIsIkVsZW1lbnQiLCJqQyIsImdldEVsZW1lbnQiLCJvZmYwIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2FwRWxlbWVudCIsImxlYXZlZCIsImhvdkVsZW1lbnQiLCJyZWxhdGVkVGFyZ2V0IiwiRG9tMkltYWdlIiwidXRpbCIsIm5ld1V0aWwiLCJpbmxpbmVyIiwibmV3SW5saW5lciIsImZvbnRGYWNlcyIsIm5ld0ZvbnRGYWNlcyIsImltYWdlcyIsIm5ld0ltYWdlcyIsInRvU3ZnIiwidG9QbmciLCJ0b0pwZWciLCJ0b0Jsb2IiLCJ0b1BpeGVsRGF0YSIsImltcGwiLCJjbG9uZU5vZGUiLCJlbWJlZEZvbnRzIiwiaW5saW5lSW1hZ2VzIiwiYXBwbHlPcHRpb25zIiwibWFrZVN2Z0RhdGFVcmkiLCJiZ2NvbG9yIiwicHJvcGVydHkiLCJkcmF3IiwiZ2V0SW1hZ2VEYXRhIiwidG9EYXRhVVJMIiwicXVhbGl0eSIsImNhbnZhc1RvQmxvYiIsImRvbU5vZGUiLCJtYWtlSW1hZ2UiLCJuZXdDYW52YXMiLCJmaWxsUmVjdCIsInJvb3QiLCJtYWtlTm9kZUNvcHkiLCJjbG9uZUNoaWxkcmVuIiwicHJvY2Vzc0Nsb25lIiwiaXNDYW52YXMiLCJvcmlnaW5hbCIsImNsb25lQ2hpbGRyZW5Jbk9yZGVyIiwiYXNBcnJheSIsImNoaWxkQ2xvbmUiLCJpc0VsZW1lbnQiLCJjbG9uZVN0eWxlIiwiY2xvbmVQc2V1ZG9FbGVtZW50cyIsImNvcHlVc2VySW5wdXQiLCJmaXhTdmciLCJjb3B5U3R5bGUiLCJzb3VyY2UiLCJjb3B5UHJvcGVydGllcyIsInNldFByb3BlcnR5IiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsImNsb25lUHNldWRvRWxlbWVudCIsImNsYXNzTmFtZSIsInVpZCIsInN0eWxlRWxlbWVudCIsImZvcm1hdFBzZXVkb0VsZW1lbnRTdHlsZSIsInNlbGVjdG9yIiwiZm9ybWF0Q3NzVGV4dCIsImZvcm1hdENzc1Byb3BlcnRpZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImZvcm1hdFByb3BlcnR5IiwiaXNUZXh0QXJlYSIsImlzSW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJpc1NWRyIsImlzU1ZHUmVjdCIsImF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInJlc29sdmVBbGwiLCJzdHlsZU5vZGUiLCJpbmxpbmVBbGwiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJlc2NhcGVYaHRtbCIsInhodG1sIiwicGFyc2VFeHRlbnNpb24iLCJtaW1lVHlwZSIsImRhdGFBc1VybCIsImlzRGF0YVVybCIsInJlc29sdmVVcmwiLCJnZXRBbmRFbmNvZGUiLCJpc0ltYWdlIiwibWltZXMiLCJXT0ZGIiwiSlBFRyIsImV4dGVuc2lvbiIsImJpbmFyeVN0cmluZyIsImF0b2IiLCJiaW5hcnlBcnJheSIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwiYmFzZVVybCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiZm91clJhbmRvbUNoYXJzIiwidG9TdHJpbmciLCJzbGljZSIsInVyaSIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsIlRJTUVPVVQiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9udGltZW91dCIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJzZW5kIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImVuY29kZXIiLCJvbmxvYWRlbmQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwicmVzcG9uc2UiLCJzdHJpbmciLCJtcyIsImFyZyIsImFycmF5TGlrZSIsImFycmF5IiwibGVmdEJvcmRlciIsInB4IiwicmlnaHRCb3JkZXIiLCJzY3JvbGxXaWR0aCIsInRvcEJvcmRlciIsImJvdHRvbUJvcmRlciIsInNjcm9sbEhlaWdodCIsInN0eWxlUHJvcGVydHkiLCJwYXJzZUZsb2F0IiwiSFRNTENhbnZhc0VsZW1lbnQiLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwiSFRNTElucHV0RWxlbWVudCIsIlNWR0VsZW1lbnQiLCJTVkdSZWN0RWxlbWVudCIsIkhUTUxJbWFnZUVsZW1lbnQiLCJVUkxfUkVHRVgiLCJzaG91bGRQcm9jZXNzIiwicmVhZFVybHMiLCJpbmxpbmUiLCJkYXRhVXJsIiwidXJsQXNSZWdleCIsIm5vdGhpbmdUb0lubGluZSIsInVybHMiLCJyZWFkQWxsIiwid2ViRm9udHMiLCJ3ZWJGb250IiwiY3NzU3RyaW5ncyIsImdldENzc1J1bGVzIiwic2VsZWN0V2ViRm9udFJ1bGVzIiwicnVsZXMiLCJuZXdXZWJGb250IiwicnVsZSIsIkNTU1J1bGUiLCJGT05UX0ZBQ0VfUlVMRSIsImxvZyIsIndlYkZvbnRSdWxlIiwicGFyZW50U3R5bGVTaGVldCIsIm5ld0ltYWdlIiwiaW5saW5lQmFja2dyb3VuZCIsImlubGluZWQiLCJEcmFnIiwiaW50ZXJzZWN0aW9uIiwic2VsZWN0ZWQiLCJjb250cm9sc1N0YXRlIiwiZ2V0Q29udHJvbHNTdGF0ZSIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZURvd24iLCJvbk1vdXNlVXAiLCJyYXkiLCJvcmlnaW4iLCJzZXRDb250cm9sc1N0YXRlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJpbnRlcnNlY3RQbGFuZSIsImdldEV2ZW50RmxhZ3MiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJnZXRQb3NpdGlvbiIsImNvbnRleHRNZW51IiwibW91c2VEb3duIiwibW91c2VNb3ZlIiwibW91c2VVcCIsIm1vdXNlV2hlZWwiLCJtb3VzZU1vdmVEb2MiLCJtb3VzZVVwRG9jIiwiZGJsY2xpY2siLCJ0b3VjaFN0YXJ0IiwidG91Y2hNb3ZlIiwidG91Y2hFbmQiLCJrZXlEb3duIiwia2V5UHJlc3MiLCJrZXlVcCIsImZpcmVBY3Rpb25zIiwiYnV0dG9uIiwicGlja2VkIiwiY2xpY2tzIiwidG91Y2hQaWNrIiwicG9zIiwidG91Y2hQaWNrZWQiLCJrZXlDb2RlIiwibW9kS2V5cyIsIkN0cmwiLCJTaGlmdCIsIkFsdCIsIl9oYXNXZWJraXRGdWxsU2NyZWVuIiwiX2hhc01vekZ1bGxTY3JlZW4iLCJfaGFzTXNGdWxsc2NyZWVuIiwid2Via2l0SXNGdWxsU2NyZWVuIiwibW96RnVsbFNjcmVlbiIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJhc3NlcnQiLCJ3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIndlYmtpdENhbmNlbEZ1bGxTY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsImRvY3VtZW50RWxlbWVudCIsImlJZCIsImhhc0ZlYXR1cmUiLCJpbWFnZUxvYWQiLCJzdmdSZW5kZXIiLCJmcmFtZUxvYWQiLCJzaW11bGF0b3IiLCJjYWxjVGltZVRvIiwidXBkYXRlSW50ZXJ2YWwiLCJzaGFkb3dCbHVyIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsImRhIiwiX2EiLCJfciIsImN4IiwiY3kiLCJueCIsIm55IiwiYXJjIiwiZ2V0SW1hZ2UiLCJzaG93UHJvZ3Jlc3MiLCJsb2FkaW5nTXNnIiwiZ2V0TG9hZGluZ01zZyIsImRlZmF1bHRMb2FkaW5nTXNnIiwiTW91c2VFdmVudENvbnZlcnRlciIsImJvdW5kQm94Q2xiIiwidGVzdFNjYWxlIiwiZWxlbWVudFNpemUiLCJ2eCIsInZ5IiwiY29tcHV0ZUNsaWVudEJvdW5kQm94IiwibW92ZVBhbiIsInNldFBhZGRpbmciLCJ2VG9DYW1lcmEiLCJwcm9qZWN0IiwieHMiLCJ6cyIsInNldE9iamVjdCIsImNvbXB1dGVDb3JyIiwiY29yciIsImNlbnRlclZpZXciLCJLeCIsIkt5IiwibW92aW5nIiwiZ2V0U2NhbGUiLCJtYXJnIiwicGFkIiwiZHBhZCIsInB5IiwidGYiLCJzZXRNb3ZpbmciLCJZIiwidmQiLCJPcmJpdCIsIndvcmxkIiwibWluRGlzdGFuY2UiLCJtaW5ab29tIiwibWF4Wm9vbSIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwiZW5hYmxlWm9vbSIsInpvb21TcGVlZCIsImVuYWJsZVJvdGF0ZSIsInJvdGF0ZVNwZWVkIiwiZW5hYmxlUGFuIiwiYXV0b1JvdGF0ZSIsImF1dG9Sb3RhdGVTcGVlZCIsInRhcmdldDAiLCJwb3NpdGlvbjAiLCJ6b29tMCIsImdldFBvbGFyQW5nbGUiLCJzcGhlcmljYWwiLCJwaGkiLCJnZXRBemltdXRoYWxBbmdsZSIsInRoZXRhIiwicmVzZXQiLCJzY29wZSIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJjaGFuZ2VFdmVudCIsIl9zcGVlZCIsImRvbGx5SW4iLCJnZXRab29tU2NhbGUiLCJkb2xseU91dCIsIm5ld1NjYWxlIiwicXVhdCIsIlF1YXRlcm5pb24iLCJzZXRGcm9tVW5pdFZlY3RvcnMiLCJ1cCIsInF1YXRJbnZlcnNlIiwibGFzdFBvc2l0aW9uIiwibGFzdFF1YXRlcm5pb24iLCJhcHBseVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJvdGF0ZUxlZnQiLCJnZXRBdXRvUm90YXRpb25BbmdsZSIsInNwaGVyaWNhbERlbHRhIiwibWFrZVNhZmUiLCJyYWRpdXMiLCJwYW5PZmZzZXQiLCJzZXRGcm9tU3BoZXJpY2FsIiwibG9va0F0Iiwiem9vbUNoYW5nZWQiLCJFUFMiLCJkb3QiLCJTcGhlcmljYWwiLCJyb3RhdGVVcCIsInBhbkxlZnQiLCJvYmplY3RNYXRyaXgiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwibXVsdGlwbHlTY2FsYXIiLCJwYW5VcCIsImRlbHRhWCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ0YXJnZXREaXN0YW5jZSIsInRhbiIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsImJvdHRvbSIsImRvbGx5U2NhbGUiLCJvZmZzZXREb2xseSIsIndoZWVsRG9sbHkiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJjc3NMYXllclJlcXVlc3RzIiwic2V0SGl0cyIsInJlY3RTaXplIiwiY3JlYXRlUG9seSIsInNldEFubm90YXRpb25zIiwiYW5ub3MiLCJodG1scyIsInRhcmdldHMiLCJzdWJ0eXBlIiwiYVBvcyIsImFTeiIsIlBvbHlUYXJnZXQiLCJhbm5vQ2xiIiwiY3NzTGF5ZXIiLCJyZXNvbHZlQ3NzTGF5ZXJSZXF1ZXN0cyIsImZpbmRlciIsInJlbmRlckhpdHMiLCJ0ZXN0U3oiLCJ0ZXh0RGl2IiwiYmFzZU9mZnNldCIsImhpdCIsIlV0aWwiLCJmb250TmFtZSIsImF0YW4yIiwidmVydGljYWwiLCJmb250SGVpZ2h0IiwiZm9udEFzY2VudCIsImFzY2VudCIsImRlc2NlbnQiLCJ0ZXN0U3BhbiIsIml3aWR0aCIsInJlbGF0aXZlT2Zmc2V0IiwiY2FsY1ZpZXdwb3J0Iiwib2Zmc2V0WCIsImdldEFubm90YXRpb25zIiwiY2FudmFzQ29udGV4dCIsIm9uQ29udGludWUiLCJwcmV2UmVzdWx0cyIsIm5hdmlnYXRlIiwiZG9RdWVyeSIsInF1ZXJ5U3RhbXAiLCJjcm9zc09yaWdpbiIsImltYWdlRXJyb3IiLCJpbWciLCJ0aWxlc0hvcml6IiwidGlsZXNWZXJ0IiwibnVtVGlsZXMiLCJ0aWxlRGlzcER1cmF0aW9uIiwidGlsZXNIb3Jpem9udGFsIiwidGlsZXNWZXJ0aWNhbCIsIm51bWJlck9mVGlsZXMiLCJ0aWxlRGlzcGxheUR1cmF0aW9uIiwiY3VycmVudERpc3BsYXlUaW1lIiwiY3VycmVudFRpbGUiLCJtaWxsaVNlYyIsImN1cnJlbnRDb2x1bW4iLCJjdXJyZW50Um93IiwiVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyIiwiVGhyZWVFdmVudENvbnZlcnRlciIsIlRocmVlVG91Y2hFdmVudENvbnZlcnRlciIsImxhc3RUb3VjaGVzIiwiVG91Y2hFdmVudENvbnZlcnRlciIsInRodW1ibmFpbHNDbGIiLCJxdWV1ZSIsImhlYWRpbmciLCJ0aHVtYm5haWwiLCJkYXRhVGh1bWJuYWlsIiwic2V0TG9hZFF1ZXVlIiwic2V0SW1hZ2UiLCJnZXRBY3RpdmUiLCJzY3JvbGxUb3AiLCJidWlsdCIsIlRvdWNoQ29udmVydGVyIiwic2hvd01lc3NhZ2UiLCJ0ZXh0IiwiY2xhc3NQcm9wZXJ0eSIsImF0dHJpYnV0ZVByb3BlcnR5IiwiYXR0cmlidXRlTmFtZSIsInJlbW92ZUF0dHIiLCJoYW5kbGVMaW5rRXZlbnQiLCJoYW5kbGVJbnB1dEV2ZW50IiwiaGFuZGxlRm9ybUV2ZW50IiwiZ2V0VGltZSIsInBlbmRpbmciLCJsb2FkRmlsZXMiLCJmaWxlcyIsInRhc2tzIiwiZ2V0Um9vdFVybCIsImdldEN1cnJlbnRVcmwiLCJsYXN0SW5kZXhPZiIsInVybFJlc29sdmVyIiwicGFydHMiLCJwYXJ0Iiwib2JqVG9BdHRyc1N0ciIsImNoZWNrSWZyYW1lU2l6ZSIsIm9uUmVzaXplIiwiczAiLCJzMSIsImZpcmVMaW5rc09uTG9hZEV2ZW50IiwibGlua0xvYWRlZCIsImpMaW5rIiwiakxpbmtzIiwiaXNJT1MiLCJNU1N0cmVhbSIsImlzU2FmYXJpIiwiaW5pdFVybCIsInN0eWxlRGF0YSIsInRlbXBsYXRlTmFtZSIsInRleHRDc3MiLCJyMSIsIkpTT04iLCJwYXJzZSIsImxpbmtDb250cm9scyIsIndpZGdldENvbnRyb2xzIiwiaW5wdXRDb250cm9scyIsImZvcm1Db250cm9scyIsInRleHRDb250cm9scyIsInN0YXRlU2V0dGVycyIsInNldHRlciIsInNldExpbmtDb250cm9sU3RhdGUiLCJzZXRXaWRnZXRDb250cm9sU3RhdGUiLCJzZXRJbnB1dENvbnRyb2xTdGF0ZSIsInNldFRleHRDb250cm9sU3RhdGUiLCJzdG9wIiwiZ2V0U3R5bGVEYXRhIiwic2V0Q29udHJvbFN0YXRlIiwic3RhdGVIYW5kbGVycyIsInN0IiwibGlua1N0YXRlSGFuZGxlcnMiLCJ3aWRnZXRTdGF0ZUhhbmRsZXJzIiwiaW5wdXRTdGF0ZUhhbmRsZXJzIiwidGV4dFN0YXRlSGFuZGxlcnMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ1c2VIZWxwZXJzIiwiY2hlY2tVcGRhdGVGbGFnIiwicmVuZGVyQ2FsbGJhY2tzIiwiZGlhZyIsImdldERpYWciLCJjbG9jayIsIkNsb2NrIiwiUmF5Y2FzdGVyIiwiU2NlbmUiLCJjc3NTY2VuZSIsInJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsImFscGhhIiwicHJlY2lzaW9uIiwiZ2V0UHJlY2lzaW9uIiwiYW50aWFsaWFzIiwic2hhZG93TWFwIiwiUENGU29mdFNoYWRvd01hcCIsInNldFBpeGVsUmF0aW8iLCJjc3NSZW5kZXJlciIsIlRleHR1cmVMb2FkZXIiLCJhbWJpZW50TGlnaHQiLCJBbWJpZW50TGlnaHQiLCJsaWdodCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJzaGFkb3ciLCJmYXIiLCJtYXBTaXplIiwiU2hhZG93TWF0ZXJpYWwiLCJ0bXBWZWN0b3IiLCJBeGlzSGVscGVyIiwib25XaW5kb3dSZXNpemUiLCJhbmltYXRlIiwiZmlsdGVyRGF0YSIsInR5cGVzIiwiY29udGFpbnMiLCJzY3JlZW4iLCJzZXRFeHRyYUxpZ2h0aW5nIiwiaW50ZW5zaXR5IiwidXBkYXRlQ2FtZXJhIiwiYXNwZWN0IiwidXBkYXRlUmVuZGVyZXIiLCJsYXN0UmVzaXplIiwicmVzaXplU3RhbXAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkZWx0YVRpbWUiLCJnZXREZWx0YSIsImdldFBpeGVsIiwicmVhZFBpeGVscyIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwib25ZVFJlYWR5Iiwic2V0Q29uZmlnIiwiWVRDb25maWciLCJjdXJyZW50U2NyaXB0Iiwibm9uY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQSwyQ0FBMkMsY0FBYzs7UUFFekQ7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7UUFFQTtRQUNBOzs7Ozs7Ozs7OztBQ2hFQSxJQUFNQSxLQUFLQyxLQUFBLEdBQW9CQyxPQUFPQyxNQUEzQixHQUFtQ0MsUUFBUSxRQUFSLENBQTlDO0FBQUEsSUFDTUMsZUFBZUosS0FBQSxHQUF5QkMsT0FBT0ks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LHNDQUFzQztBQUMzRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDIiwiZmlsZSI6ImpzL2Rpc3QvM2RmbGlwYm9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDUxZGRmMzZmNTZiMmNiMmU3Mjc0IiwiY29uc3QgXyQgPSBHTE9CQUxfTElCUy5qUXVlcnk/IHdpbmRvdy5qUXVlcnk6IHJlcXVpcmUoJ2pxdWVyeScpLFxyXG4gICAgICBfaHRtbDJjYW52YXMgPSBHTE9CQUxfTElCUy5odG1sMmNhbnZhcz8gd2luZG93Lmh0bWwyY2FudmFzOiByZXF1aXJlKCdodG1sMmNhbnZhcycpLFxyXG4gICAgICBfVEhSRUUgPSBHTE9CQUxfTElCUy5USFJFRT8gd2luZG93LlRIUkVFOiByZXF1aXJlKCd0aHJlZScpLFxyXG4gICAgICBfUmVhY3QgPSBHTE9CQUxfTElCUy5SZWFjdD8gd2luZG93LlJlYWN0OiByZXF1aXJlKCdyZWFjdCcpLFxyXG4gICAgICBfUmVhY3RET00gPSBHTE9CQUxfTElCUy5SZWFjdD8gd2luZG93LlJlYWN0RE9NOiByZXF1aXJlKCdyZWFjdC1kb20nKSxcclxuICAgICAgX1BERkpTID0gR0xPQkFMX0xJQlMuUERGSlM/IHdpbmRvdy5wZGZqc0xpYjogcmVxdWlyZSgncGRmanMnKSxcclxuICAgICAgX3RyID0gKHMpPT4gKHdpbmRvdy5pYmVyZXphbnNreSB8fCB7fSkudHIgJiYgd2luZG93LmliZXJlemFuc2t5LnRyKHMpIHx8IHM7XHJcblxyXG5leHBvcnQge1xyXG4gIF8kIGFzICQsXHJcbiAgX2h0bWwyY2FudmFzIGFzIGh0bWwyY2FudmFzLFxyXG4gIF9USFJFRSBhcyBUSFJFRSxcclxuICBfUmVhY3QgYXMgUmVhY3QsXHJcbiAgX1JlYWN0RE9NIGFzIFJlYWN0RE9NLFxyXG4gIF9QREZKUyBhcyBQREZKUyxcclxuICBfdHIgYXMgdHJcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2xpYnMuanMiLCJjb25zdCBfJCA9IEdMT0JBTF9MSUJTLmpRdWVyeT8gd2luZG93LmpRdWVyeTogcmVxdWlyZSgnanF1ZXJ5JyksXHJcbiAgICAgIF9odG1sMmNhbnZhcyA9IEdMT0JBTF9MSUJTLmh0bWwyY2FudmFzPyB3aW5kb3cuaHRtbDJjYW52YXM6IHJlcXVpcmUoJ2h0bWwyY2FudmFzJyksXHJcbiAgICAgIF9USFJFRSA9IEdMT0JBTF9MSUJTLlRIUkVFPyB3aW5kb3cuVEhSRUU6IHJlcXVpcmUoJ3RocmVlJyksXHJcbiAgICAgIF9QREZKUyA9IEdMT0JBTF9MSUJTLlBERkpTPyB3aW5kb3cuUERGSlM6IHJlcXVpcmUoJ3BkZmpzJyksXHJcbiAgICAgIF90ciA9IChzKT0+ICh3aW5kb3cuaWJlcmV6YW5za3kgfHwge30pLnRyICYmIHdpbmRvdy5pYmVyZXphbnNreS50cihzKSB8fCBzO1xyXG5cclxuaWYod2luZG93LkZCM0RfTE9DQUxFKSB7XHJcbiAgd2luZG93LmliZXJlemFuc2t5ID0ge1xyXG4gICAgLi4ud2luZG93LmliZXJlemFuc2t5LFxyXG4gICAgdHI6IChzKT0+IChGQjNEX0xPQ0FMRS5kaWN0aW9uYXJ5IHx8IHt9KVtzXSB8fCBzXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICBfJCBhcyAkLFxyXG4gIF9odG1sMmNhbnZhcyBhcyBodG1sMmNhbnZhcyxcclxuICBfVEhSRUUgYXMgVEhSRUUsXHJcbiAgX1BERkpTIGFzIFBERkpTLFxyXG4gIF90ciBhcyB0clxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9saWJzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHN1bSA9IFtCYXNlTWF0aFV0aWxzLnN1bTEsIEJhc2VNYXRoVXRpbHMuc3VtMiwgQmFzZU1hdGhVdGlscy5zdW0zLCBCYXNlTWF0aFV0aWxzLnN1bTRdO1xyXG4gIHN0YXRpYyBlcHMgPSAxZS00O1xyXG5cclxuICBzdGF0aWMgc3VtMShrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdW0yKGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdLFxyXG4gICAgICBrYSphWzFdK2tiKmJbMV1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtMyhrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtNChrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl0sXHJcbiAgICAgIGthKmFbM10ra2IqYlszXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByazQoZHksIHQsIGR0LCB5LCBzdW09QmFzZU1hdGhVdGlscy5zdW1beS5sZW5ndGgtMV0pIHtcclxuICAgIGNvbnN0IGsxPWR5KHQseSksXHJcbiAgICAgICAgICBrMj1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsxKSksXHJcbiAgICAgICAgICBrMz1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsyKSksXHJcbiAgICAgICAgICBrND1keSh0K2R0LHN1bSgxLHksZHQsazMpKTtcclxuICAgIHJldHVybiBzdW0oMSx5LGR0LzYsc3VtKDEsc3VtKDEsazEsMixrMiksMSxzdW0oMixrMywxLGs0KSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgbGV0IHlpO1xyXG4gICAgaWYoeFswXT54WzFdKSB7XHJcbiAgICAgIHg9eC5yZXZlcnNlKCk7XHJcbiAgICAgIHk9eS5yZXZlcnNlKCk7XHJcbiAgICB9XHJcbiAgICBpZih4aTx4WzBdKSB7XHJcbiAgICAgIHlpPXlbMF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHhpPnhbMV0pIHtcclxuICAgICAgeWk9eVsxXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB5aT1CYXNlTWF0aFV0aWxzLmV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geWk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1NjYWxlKHNyY1csIHNyY0gsIGRzdFcsIGRzdEgpIHtcclxuICAgIHJldHVybiBkc3RXL3NyY1c7IC8vIE1hdGgubWluKGRzdFcvc3JjVywgZHN0SC9zcmNIKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bE0oYSwgYikge1xyXG4gICAgY29uc3Qgcj1bXTtcclxuICAgIGZvcihsZXQgaT0wO2k8YS5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHIucHVzaChbXSk7XHJcbiAgICAgIGZvcihsZXQgaj0wO2o8YlswXS5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgcltpXVtqXSA9IDA7XHJcbiAgICAgICAgZm9yKGxldCBrPTA7azxiLmxlbmd0aDsrK2spIHtcclxuICAgICAgICAgIHJbaV1bal0rPWFbaV1ba10qYltrXVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRyYW5zTShtKSB7XHJcbiAgICBjb25zdCByPVtdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxtLmxlbmd0aDsrK2kpIHtcclxuICAgICAgZm9yKGxldCBqPTA7ajxtWzBdLmxlbmd0aDsrK2opIHtcclxuICAgICAgICBpZighcltqXSkge1xyXG4gICAgICAgICAgcltqXT1bXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcltqXVtpXT1tW2ldW2pdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXQoZGF0YSkge1xyXG4gICAgbGV0IHM9MDtcclxuICAgIGZvcihsZXQgeCBvZiBkYXRhKSB7XHJcbiAgICAgIHMrPXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy9kYXRhLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXNwKGRhdGEpIHtcclxuICAgIGNvbnN0IE09QmFzZU1hdGhVdGlscy5tYXQoZGF0YSk7XHJcbiAgICBsZXQgcz0wO1xyXG4gICAgZm9yKGxldCB4IG9mIGRhdGEpIHtcclxuICAgICAgcys9KHgtTSkqKHgtTSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy9kYXRhLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVkaWN0MShkYXRhLCBudW0pIHtcclxuICAgIGNvbnN0IHI9W10sIGw9ZGF0YS5sZW5ndGgsIEQ9QmFzZU1hdGhVdGlscy5kaXNwKGRhdGEpO1xyXG4gICAgaWYoRDxsICYmIGw+MSkge1xyXG4gICAgICBjb25zdCBhbT1bXSwgYm09W107XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8bDsrK2kpIHtcclxuICAgICAgICBhbS5wdXNoKFtpLDFdKTtcclxuICAgICAgICBibS5wdXNoKFtkYXRhW2ldXSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdGE9QmFzZU1hdGhVdGlscy50cmFuc00oYW0pLCBhPUJhc2VNYXRoVXRpbHMubXVsTSh0YSxhbSksIGI9QmFzZU1hdGhVdGlscy5tdWxNKHRhLGJtKSxcclxuICAgICAgZD0oYVswXVswXSphWzFdWzFdLWFbMV1bMF0qYVswXVsxXSksXHJcbiAgICAgIHA9W1xyXG4gICAgICAgIC0oYVswXVsxXSpiWzFdWzBdLWJbMF1bMF0qYVsxXVsxXSkvZCxcclxuICAgICAgICAoYVswXVswXSpiWzFdWzBdLWFbMV1bMF0qYlswXVswXSkvZFxyXG4gICAgICBdO1xyXG4gICAgICBmb3IobGV0IGk9MDtpPG51bTsrK2kpIHtcclxuICAgICAgICBjb25zdCB2ID0gTWF0aC5yb3VuZChwWzBdKihpK2wpK3BbMV0pO1xyXG4gICAgICAgIGlmKHIuaW5kZXhPZih2KT09PS0xKSB7XHJcbiAgICAgICAgICByLnB1c2godik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVkaWN0KGRhdGEsIG51bSkge1xyXG4gICAgY29uc3Qgcj1bXSwgbD1kYXRhLmxlbmd0aDtcclxuICAgIGxldCBzZ25zPTA7XHJcbiAgICBmb3IobGV0IGk9MDtpPGwtMTsrK2kpIHtcclxuICAgICAgc2ducys9TWF0aC5zaWduKGRhdGFbaSsxXS1kYXRhW2ldKTtcclxuICAgIH1cclxuICAgIGlmKE1hdGguYWJzKHNnbnMpPD0obC0xKSUyKSB7XHJcbiAgICAgIHNnbnMgPSAtMTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzZ25zID0gTWF0aC5zaWduKHNnbnMpO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpPTAsIGN1cj1kYXRhW2wtMV07IGk8bnVtICYmIGN1cj4wOyArK2kpIHtcclxuICAgICAgY3VyKz1zZ25zO1xyXG4gICAgICByLnB1c2goY3VyKTtcclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFVuaXF1ZSgpIHtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoMWU5Kk1hdGgucmFuZG9tKCkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldFNwbGluZVBvaW50cyhzcGxpbmUsIHBzKSB7XHJcbiAgICBpZihzcGxpbmUucG9pbnRzLmxlbmd0aCE9PXBzLngubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybignc2V0U3BsaW5lUG9pbnRzOiBiYWQgcG9pbnRzJyk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzcGxpbmUucG9pbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHBzLnhbaV0sIHBzLnlbaV0sIHBzLno/IHBzLnpbaV06IDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hcGwyTChscywgbGVuLCBuLCBmKSB7XHJcbiAgICBjb25zdCBkTCA9IGxlbi8obi0xKTtcclxuICAgIGxldCBMPTA7XHJcbiAgICBmb3IobGV0IGk9MCwgZD1sc1swXTsgaTxscy5sZW5ndGgtMSAmJiBMPGxlbiswLjEqZEw7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICBmKGksIEwpO1xyXG4gICAgICAgIEwrPWRMO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihMPGxlbiswLjEqZEwpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdtYXBsMkw6IGxzIGlzIG5vdCBlbm91Z2h0Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGV0MihhLGIsYyxkKSB7XHJcbiAgICByZXR1cm4gYSpkLWIqYztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzb2x2ZTJMaW4oYTEsYjEsYTIsYjIpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCBkPUJhc2VNYXRoVXRpbHMuZGV0MihhMVswXSxhMVsxXSxhMlswXSxhMlsxXSk7XHJcbiAgICBpZihNYXRoLmFicyhkKT5CYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICBjb25zdCBkeD1CYXNlTWF0aFV0aWxzLmRldDIoYjEsYTFbMV0sYjIsYTJbMV0pLCBkeT1CYXNlTWF0aFV0aWxzLmRldDIoYTFbMF0sYjEsYTJbMF0sYjIpO1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgeDogZHgvZCxcclxuICAgICAgICB5OiBkeS9kXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzSW5zaWRlUG9seShwcywgcCkge1xyXG4gICAgbGV0IGRvbmUgPSBmYWxzZSwgY3Q7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChwLCBwc1tpXSk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICBjdD0xO1xyXG4gICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB3aGlsZSghZG9uZSkge1xyXG4gICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgY3QgPSAwO1xyXG4gICAgICBsZXQgbnAgPSB7eDogcC54K01hdGgucmFuZG9tKCktMC41LCB5OiBwLnkrTWF0aC5yYW5kb20oKS0wLjV9LCBybiA9IHt4OiBucC54LXAueCwgeTogbnAueS1wLnl9LCBhMT1bcm4ueSwgLXJuLnhdLCBiMT1wLngqcm4ueS1wLnkqcm4ueDtcclxuICAgICAgZm9yKGxldCBpPTA7IGk8cHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBwMD1wc1tpXSwgcDE9cHNbKGkrMSklcHMubGVuZ3RoXSwgbiA9IHt4OiBwMS54LXAwLngsIHk6IHAxLnktcDAueX0sIGEyPVtuLnksIC1uLnhdLCBiMj1wMC54Km4ueS1wMC55Km4ueCxcclxuICAgICAgICAgIGlwID0gQmFzZU1hdGhVdGlscy5zb2x2ZTJMaW4oYTEsYjEsYTIsYjIpO1xyXG4gICAgICAgIGlmKGlwKSB7XHJcbiAgICAgICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChpcCwgcDApPEJhc2VNYXRoVXRpbHMuZXBzIHx8IEJhc2VNYXRoVXRpbHMudjJkaXN0KGlwLCBwMSk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgZG9uZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXAueD5NYXRoLm1pbihwMC54LHAxLngpLUJhc2VNYXRoVXRpbHMuZXBzJiZpcC54PE1hdGgubWF4KHAwLngscDEueCkrQmFzZU1hdGhVdGlscy5lcHMgJiZcclxuICAgICAgICAgICAgICAgICAgaXAueT5NYXRoLm1pbihwMC55LHAxLnkpLUJhc2VNYXRoVXRpbHMuZXBzJiZpcC55PE1hdGgubWF4KHAwLnkscDEueSkrQmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgaWYoQmFzZU1hdGhVdGlscy52MmRpc3QoaXAsIHApPEJhc2VNYXRoVXRpbHMuZXBzKSB7XHJcbiAgICAgICAgICAgICAgY3Q9MTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBjb25zdCB0bj17eDogaXAueC1wLngsIHk6IGlwLnktcC55fTtcclxuICAgICAgICAgICAgICBjdCArPSB0bi54KnJuLngrdG4ueSpybi55PjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjdCUyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzSW5zaWRlQ29udlBvbHkocHMsIHApIHtcclxuICAgIGxldCBzZyA9IFswLCAwXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAwPXBzW2ldLCBwMT1wc1soaSsxKSVwcy5sZW5ndGhdLCBhPXt4OiBwMC54LXAueCwgeTogcDAueS1wLnl9LCBiPXt4OiBwMS54LXAueCwgeTogcDEueS1wLnl9O1xyXG4gICAgICArK3NnWyhhLngqYi55LWEueSpiLng8MCkrMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gfnNnLmluZGV4T2YocHMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2Mmxlbih2Mikge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh2Mi54KnYyLngrdjIueSp2Mi55KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2MmRpc3QodjIxLCB2MjIpIHtcclxuICAgIHJldHVybiBCYXNlTWF0aFV0aWxzLnYybGVuKHtcclxuICAgICAgeDogdjIyLngtdjIxLngsXHJcbiAgICAgIHk6IHYyMi55LXYyMS55XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wdXRlU3F1YXJlKHBzKSB7XHJcbiAgICBjb25zdCBhID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBhLnB1c2goQmFzZU1hdGhVdGlscy52MmRpc3QocHNbaV0sIHBzWyhpKzEpJXBzLmxlbmd0aF0pKTtcclxuICAgICAgcCArPSAwLjUqYVtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLnNxcnQocCoocC1hWzBdKSoocC1hWzFdKSoocC1hWzJdKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCkge1xyXG4gICAgY29uc3QgcyA9IEJhc2VNYXRoVXRpbHMuY29tcHV0ZVNxdWFyZSh0cmkpLCBjb2Vmcz1bXSwgbCA9IHRyaS5sZW5ndGg7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxsOyArK2kpIHtcclxuICAgICAgY29lZnNbaV0gPSBCYXNlTWF0aFV0aWxzLmNvbXB1dGVTcXVhcmUoW3AsIHRyaVsoaSsxKSVsXSwgdHJpWyhpKzIpJWxdXSkvcztcclxuICAgIH1cclxuICAgIHJldHVybiBjb2VmcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0Jhc2VNYXRoVXRpbHMuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBNT0JJTEVfRElBRyA9IDExO1xyXG5cclxuICBzdGF0aWMgbm9ybWFsaXplVXJsKHVybCkge1xyXG4gICAgZnVuY3Rpb24gc3BsaXQocykge1xyXG4gICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXFxcL2csICcvJykuc3BsaXQoJy8nKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJhc2UgPSBzcGxpdCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB1cmwgPSBzcGxpdCh1cmwpO1xyXG4gICAgaWYoYmFzZVsyXT09PXVybFsyXSkge1xyXG4gICAgICB1cmxbMF0gPSBiYXNlWzBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybC5qb2luKCcvJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgX2VzY2FwZUhUTUxjaGFycyA9IHtcclxuICAgICcmJzogJyZhbXA7JyxcclxuICAgICc8JzogJyZsdDsnLFxyXG4gICAgJz4nOiAnJmd0OydcclxuICB9O1xyXG4gIHN0YXRpYyBfZXNjYXBlSFRNTGNsYihjKSB7XHJcbiAgICByZXR1cm4gVXRpbHMuX2VzY2FwZUhUTUxjaGFyc1tjXSB8fCBjO1xyXG4gIH1cclxuICBzdGF0aWMgZXNjYXBlSFRNTChzKSB7XHJcbiAgICAgIHJldHVybiBzLnJlcGxhY2UoL1smPD5dL2csIFV0aWxzLl9lc2NhcGVIVE1MY2xiKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBleHRlbmRzKGRlciwgYmFzZSkge1xyXG4gICAgZm9yKGxldCBuYW1lIGluIGJhc2UpIHtcclxuICAgICAgaWYoIWRlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgIGRlcltuYW1lXSA9IGJhc2VbbmFtZV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0Q21wKGEsIGIpIHtcclxuICAgIHJldHVybiBhLWI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbG93ZXJCb3VuZChhLCB4LCBjbXApIHtcclxuICAgIGNtcCA9IGNtcCB8fCBVdGlscy5kZWZhdWx0Q21wO1xyXG4gICAgbGV0IGwgPSAwLCBoID0gYS5sZW5ndGgtMTtcclxuICAgIHdoaWxlKGgtbD4xKSB7XHJcbiAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsICsgaCkgLyAyKTtcclxuICAgICAgaWYoY21wKHgsIGFbbWlkXSk8MCkge1xyXG4gICAgICAgIGggPSBtaWQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbCA9IG1pZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNtcCh4LCBhW2hdKT49MD8gaDogbDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1V0aWxzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgaWYod2lkdGgpIHtcclxuICAgICAgYy53aWR0aCA9IHdpZHRoO1xyXG4gICAgfVxyXG4gICAgaWYoaGVpZ2h0KSB7XHJcbiAgICAgIGMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXh0cmFwb2xhdGVMaW5lYXIoeCx5LHhpKSB7XHJcbiAgICByZXR1cm4geVswXSsoeVsxXS15WzBdKS8oeFsxXS14WzBdKSooeGkteFswXSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW50ZXJwb2xhdGUwMSh5MSx5Mix0KSB7XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5leHRyYXBvbGF0ZUxpbmVhcihbMCwxXSxbeTEseTJdLHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldENvbG9yQnl0ZXMoY29sb3IpIHtcclxuICAgIHJldHVybiBbKGNvbG9yPj4xNikmMHhGRiwgKGNvbG9yPj44KSYweEZGLCBjb2xvciYweEZGXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnZlcnNlQ29sb3IoY29sb3IsIHQ9MSkge1xyXG4gICAgY29uc3QgYnM9R3JhcGhVdGlscy5nZXRDb2xvckJ5dGVzKGNvbG9yKSxcclxuICAgICAgICAgIGlicz1bMHhGRi1ic1swXSwweEZGLWJzWzFdLDB4RkYtYnNbMl1dLFxyXG4gICAgICAgICAgbmJzPVtNYXRoLnJvdW5kKEdyYXBoVXRpbHMuaW50ZXJwb2xhdGUwMShic1swXSxpYnNbMF0sdCkpLE1hdGgucm91bmQoR3JhcGhVdGlscy5pbnRlcnBvbGF0ZTAxKGJzWzFdLGlic1sxXSx0KSksTWF0aC5yb3VuZChHcmFwaFV0aWxzLmludGVycG9sYXRlMDEoYnNbMl0saWJzWzJdLHQpKV07XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5ieXRlczJDb2xvcihuYnMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbG9yMlJnYmEoY29sb3IsIGEpIHtcclxuICAgIHJldHVybiBHcmFwaFV0aWxzLmJ5dGVzMlJnYmEoR3JhcGhVdGlscy5nZXRDb2xvckJ5dGVzKGNvbG9yKSwgYSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnl0ZXMyUmdiYShicywgYSkge1xyXG4gICAgcmV0dXJuICdyZ2JhKCcrYnMuam9pbignLCcpKycsJythKycpJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBieXRlczJDb2xvcihicykge1xyXG4gICAgcmV0dXJuIGJzWzJdfChic1sxXTw8OCl8KGJzWzBdPDwxNilcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvR3JhcGhVdGlscy5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0aFV0aWxzIGV4dGVuZHMgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHYxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgc3RhdGljIHNwbGl0U3BsaW5lKHNwbGluZSwgTikge1xyXG4gICAgY29uc3QgbyA9IHtsZW46IDAsIGxzOiBbMF19LCBkbD0xL047XHJcbiAgICBmb3IobGV0IGk9MDsgaTw9TjsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkbCk7XHJcbiAgICAgIGlmKGkpIHtcclxuICAgICAgICBjb25zdCBkID0gTWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgby5sZW4gKz0gZDtcclxuICAgICAgICBvLmxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRMaW5lYXJJbmRlY2VzKHNwbGluZSwgbikge1xyXG4gICAgY29uc3QgZGVsID0gNTAwMCwgZERlbCA9IDEvZGVsO1xyXG4gICAgY29uc3QgbHM9WzBdO1xyXG4gICAgbGV0IGwgPSAwO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8PWRlbDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkRGVsKTtcclxuICAgICAgaWYoaSkge1xyXG4gICAgICAgIGNvbnN0IGQ9TWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgbCArPSBkO1xyXG4gICAgICAgIGxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICBscy5wdXNoKDFlNyk7XHJcblxyXG4gICAgY29uc3QgcmVzID0gW10sIGRsID0gbC8obi0xKTtcclxuICAgIGZvcihsZXQgaT0wLCBMPTAsIGQ9bHNbMF07IGk8bHMubGVuZ3RoLTE7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICByZXMucHVzaChpKmREZWwpO1xyXG4gICAgICAgIEwrPWRsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWZpbmVQb2x5KHBvbHksIG1heERsKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBvbHkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcDAgPSBwb2x5W2ldLCBwMSA9IHBvbHlbKGkrMSklcG9seS5sZW5ndGhdLCBsID0gQmFzZU1hdGhVdGlscy52MmRpc3QocDAsIHAxKSwgbiA9IE1hdGguY2VpbChsL21heERsKSwgZGwgPSBsL247XHJcbiAgICAgIHJlcy5wdXNoKHAwKTtcclxuICAgICAgZm9yKGxldCBqPTE7IGo8bjsgKytqKSB7XHJcbiAgICAgICAgcmVzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoXHJcbiAgICAgICAgICBwMC54K2oqZGwqKHAxLngtcDAueCkvbCxcclxuICAgICAgICAgIHAwLnkraipkbCoocDEueS1wMC55KS9sXHJcbiAgICAgICAgKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9NYXRoVXRpbHMuanMiLCJpbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VCYXNlIHtcclxuXHJcbiAgc3RhdGljIHJlbmRlckNhbnZhcyA9ICBHcmFwaFV0aWxzLmNyZWF0ZUNhbnZhcygpO1xyXG4gIHN0YXRpYyByZW5kZXJDYW52YXNDdHggPSBJbWFnZUJhc2UucmVuZGVyQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICB0aGlzLnJlbmRlclBhdXNlID0gZmFsc2U7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy53bmQgPSBjb250ZXh0LnduZDtcclxuICAgIHRoaXMuZG9jID0gY29udGV4dC5kb2M7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBjb250ZXh0LmVsZW1lbnQgfHwgY29udGV4dC5kb2MuYm9keTtcclxuICAgIHRoaXMuYyA9IGNvbnRleHQucmVuZGVyQ2FudmFzIHx8IEltYWdlQmFzZS5yZW5kZXJDYW52YXM7XHJcbiAgICB0aGlzLmN0eCA9IGNvbnRleHQucmVuZGVyQ2FudmFzQ3R4IHx8IEltYWdlQmFzZS5yZW5kZXJDYW52YXNDdHg7XHJcbiAgICB0aGlzLnJlc1cgPSB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLnJlc0ggPSB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICB9XHJcblxyXG4gIHNldFJlbmRlckNhbnZhcyhjLCBjdHgpIHtcclxuICAgIHRoaXMuYyA9IGM7XHJcbiAgICB0aGlzLmN0eCA9IGN0eDtcclxuICB9XHJcblxyXG4gIHNldFJlc29sdXRpb24ocmVzKSB7XHJcbiAgICBjb25zdCBrID0gcmVzLndpZHRoL3RoaXMucmVzVztcclxuICAgIHRoaXMucmVzVyA9IHJlcy53aWR0aDtcclxuICAgIHRoaXMucmVzSCA9IGsqdGhpcy5yZXNIOyAvLyByZXMuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICByZW5kZXJCbGFua1BhZ2UoKSB7XHJcbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYSh0aGlzLmNvbG9yLCAxKTtcclxuICAgIHRoaXMuY3R4LnJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIHNldFJlbmRlclBhdXNlKHJlbmRlclBhdXNlKSB7XHJcbiAgICB0aGlzLnJlbmRlclBhdXNlID0gcmVuZGVyUGF1c2U7XHJcbiAgICBpZighcmVuZGVyUGF1c2UgJiYgdGhpcy5jb250aW51ZVJlbmRlcikge1xyXG4gICAgICB0aGlzLmNvbnRpbnVlUmVuZGVyKCk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRpbnVlUmVuZGVyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FuY2VsUmVuZGVyKCkge1xyXG4gICAgaWYodGhpcy5yZW5kZXJUYXNrICYmIHRoaXMucmVuZGVyVGFzay5jYW5jZWwpIHtcclxuICAgICAgdGhpcy5yZW5kZXJUYXNrLmNhbmNlbCgpO1xyXG4gICAgICBkZWxldGUgdGhpcy5yZW5kZXJUYXNrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVySW1hZ2UoaW1hZ2UpIHtcclxuICAgIHRoaXMucHVzaEN0eCgpO1xyXG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgdGhpcy5wb3BDdHgoKTtcclxuICB9XHJcblxyXG4gIG5vcm1Ub0NvbnYocCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogcC54KnRoaXMuYy53aWR0aCxcclxuICAgICAgeTogKDEtcC55KSp0aGlzLmMuaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySGl0KHBvbHkpIHtcclxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMCwwLjQpJztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGxldCBwID0gdGhpcy5ub3JtVG9Db252KHBvbHlbMF0pO1xyXG4gICAgY3R4Lm1vdmVUbyhwLngsIHAueSk7XHJcbiAgICBmb3IobGV0IGk9MTsgaTxwb2x5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHAgPSB0aGlzLm5vcm1Ub0NvbnYocG9seVtpXSk7XHJcbiAgICAgIGN0eC5saW5lVG8ocC54LCBwLnkpO1xyXG4gICAgfVxyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIHB1c2hDdHgoKSB7XHJcbiAgICBpZihNYXRoLmFicyh0aGlzLnJlc1ctdGhpcy5jLndpZHRoKT49MSkge1xyXG4gICAgICB0aGlzLmMud2lkdGggPSBNYXRoLmNlaWwodGhpcy5yZXNXKTtcclxuICAgIH1cclxuICAgIGlmKE1hdGguYWJzKHRoaXMucmVzSC10aGlzLmMuaGVpZ2h0KT49MSkge1xyXG4gICAgICB0aGlzLmMuaGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMucmVzSCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmN0eC5zYXZlKCk7XHJcbiAgICB0aGlzLmN0eC5zY2FsZSh0aGlzLmMud2lkdGgvdGhpcy53aWR0aCwgdGhpcy5jLmhlaWdodC90aGlzLmhlaWdodCk7XHJcbiAgICByZXR1cm4gdGhpcy5jdHg7XHJcbiAgfVxyXG5cclxuICBwb3BDdHgoKSB7XHJcbiAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb3RGb3VuZFBhZ2UoKSB7XHJcbiAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gIH1cclxuXHJcbiAgZmluaXNoUmVuZGVyKGNhbmNlbGVkID0gZmFsc2UpIHtcclxuICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmMsIGNhbmNlbGVkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmlzaExvYWQoKSB7XHJcbiAgICBpZih0aGlzLm9uTG9hZCkge1xyXG4gICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNpbXVsYXRlZERvYygpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUJhc2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICAvLyB2aXJ0dWFsc1xyXG4gIC8vIGdldE9iamVjdChlLCBkYXRhKTtcclxuICAvLyBnZXRDYWxsYmFjayhvYmplY3QpO1xyXG4gIC8vIHRlc3Qob2JqZWN0MSwgb2JqZWN0MSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jKSB7XHJcbiAgICB0aGlzLnduZCA9IHduZDtcclxuICAgIHRoaXMuZG9jID0gZG9jO1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZSh2bCkge1xyXG4gICAgaWYoIXZsKSB7XHJcbiAgICAgIGlmKHRoaXMubUNhcE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUNhcE9iamVjdCwgJC5FdmVudCgnbW91c2V1cCcpLCAnbW91c2V1cCcpO1xyXG4gICAgICAgIHRoaXMubUNhcE9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLm1Ib3ZPYmplY3QpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1Ib3ZPYmplY3QsICQuRXZlbnQoJ21vdXNlb3V0JyksICdtb3VzZW91dCcpO1xyXG4gICAgICAgIHRoaXMubUhvdk9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5lbmFibGVkID0gdmw7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBub3RpZnkob2JqZWN0LCBlLCB0eXBlKSB7XHJcbiAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuZ2V0Q2FsbGJhY2sob2JqZWN0KTtcclxuICAgIGlmKGNhbGxiYWNrKSB7XHJcbiAgICAgIGNvbnN0IHByb3BzID0ge1xyXG4gICAgICAgIC4uLmUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICB2aWV3OiB0aGlzLnduZFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBqRSA9ICQuRXZlbnQodHlwZSwgcHJvcHMpO1xyXG4gICAgICBjYWxsYmFjayhqRSwgb2JqZWN0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnQoZSwgZGF0YSkge1xyXG4gICAgaWYoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xyXG5cclxuICAgIGlmKHRoaXMuZmlsdGVyKSB7XHJcbiAgICAgIGUgPSB0aGlzLmZpbHRlcih0aGlzLmVsZW1lbnQsIGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0KGUsIGRhdGEpLFxyXG4gICAgICBub3RpZnkgPSB+ZS50eXBlLmluZGV4T2YoJ3RvdWNoJyk/IHRoaXMuY29udmVydFRvdWNoKGUsIGRhdGEsIG9iamVjdCk6IHRoaXMuY29udmVydE1vdXNlKGUsIGRhdGEsIG9iamVjdCk7XHJcbiAgICBpZihub3RpZnkgJiYgb2JqZWN0KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5KG9iamVjdCwgZSwgZS50eXBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnRUb3VjaChlLCBkYXRhLCBvYmplY3QpIHtcclxuICAgIGxldCBub3RpZnkgPSB0cnVlO1xyXG4gICAgc3dpdGNoKGUudHlwZSkge1xyXG4gICAgICBjYXNlICd0b3VjaHN0YXJ0Jzoge1xyXG4gICAgICAgIGlmKHRoaXMudENhcE9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy50Q2FwT2JqZWN0LCBlLCAndG91Y2hlbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50Q2FwT2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3RvdWNoZW5kJzoge1xyXG4gICAgICAgIGlmKHRoaXMudENhcE9iamVjdCAmJiAhdGhpcy50ZXN0KHRoaXMudENhcE9iamVjdCwgb2JqZWN0KSkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy50Q2FwT2JqZWN0LCBlLCAndG91Y2hlbmQnKTtcclxuICAgICAgICAgIG5vdGlmeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKG9iamVjdCAmJiB0aGlzLnRlc3QodGhpcy50Q2FwT2JqZWN0LCBvYmplY3QpKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeShvYmplY3QsIGUsICd0b3VjaHRhcCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRDYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAndG91Y2h0YXAnOiB7XHJcbiAgICAgICAgbm90aWZ5ID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub3RpZnk7XHJcbiAgfVxyXG5cclxuICBjb252ZXJ0TW91c2UoZSwgZGF0YSwgb2JqZWN0KSB7XHJcbiAgICBpZihlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnNvdXJjZUNhcGFiaWxpdGllcyAmJiBlLm9yaWdpbmFsRXZlbnQuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IG5vdGlmeSA9IHRydWU7XHJcbiAgICBzd2l0Y2goZS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ21vdXNlZG93bic6IHtcclxuICAgICAgICBpZih0aGlzLm1DYXBPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUNhcE9iamVjdCwgZSwgJ21vdXNldXAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tQ2FwT2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNldXAnOiB7XHJcbiAgICAgICAgaWYodGhpcy5tQ2FwT2JqZWN0ICYmICF0aGlzLnRlc3QodGhpcy5tQ2FwT2JqZWN0LCBvYmplY3QpKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1DYXBPYmplY3QsIGUsICdtb3VzZXVwJyk7XHJcbiAgICAgICAgICBub3RpZnkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnY2xpY2snOiB7XHJcbiAgICAgICAgbm90aWZ5ID0gdGhpcy50ZXN0KHRoaXMubUNhcE9iamVjdCwgb2JqZWN0KTtcclxuICAgICAgICB0aGlzLm1DYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VlbnRlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlbW92ZSc6IHtcclxuICAgICAgICBpZighdGhpcy50ZXN0KHRoaXMubUhvdk9iamVjdCwgb2JqZWN0KSAmJiB0aGlzLm1Ib3ZPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUhvdk9iamVjdCwgZSwgJ21vdXNlb3V0Jyk7XHJcbiAgICAgICAgICB0aGlzLm1Ib3ZPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCF0aGlzLm1Ib3ZPYmplY3QgJiYgb2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeShvYmplY3QsIGUsICdtb3VzZW92ZXInKTtcclxuICAgICAgICAgIHRoaXMubUhvdk9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm90aWZ5ID0gZS50eXBlID09PSAnbW91c2Vtb3ZlJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWxlYXZlJzpcclxuICAgICAgY2FzZSAnbW91c2VvdXQnOiB7XHJcbiAgICAgICAgaWYodGhpcy5tSG92T2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1Ib3ZPYmplY3QsIGUsICdtb3VzZW91dCcpO1xyXG4gICAgICAgICAgdGhpcy5tSG92T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub3RpZnkgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vdGlmeTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0V2ZW50Q29udmVydGVyLmpzIiwiaW1wb3J0IENhY2hlIGZyb20gJy4vQ2FjaGUnO1xyXG5pbXBvcnQgQmxhbmtJbWFnZSBmcm9tICcuL0JsYW5rSW1hZ2UnO1xyXG5pbXBvcnQgU3RhdGljSW1hZ2UgZnJvbSAnLi9TdGF0aWNJbWFnZSc7XHJcbmltcG9ydCBQZGZJbWFnZSBmcm9tICcuL1BkZkltYWdlJztcclxuaW1wb3J0IEludGVyYWN0aXZlSW1hZ2UgZnJvbSAnLi9JbnRlcmFjdGl2ZUltYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlRmFjdG9yeSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhY2hlKSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlIHx8IG5ldyBDYWNoZSgpO1xyXG4gIH1cclxuXHJcbiAgYnVpbGQoaW5mbywgbj0wLCB3aWR0aFRleGVscz0yMTAsIGhlaWdodFRleGVscz0yOTcsIGNvbG9yPTB4RkZGRkZGLCBpbmplY3Rvcj11bmRlZmluZWQpIHtcclxuICAgIGxldCBpbWFnZTtcclxuICAgIHN3aXRjaChpbmZvLnR5cGUpIHtcclxuICAgICAgY2FzZSAnaHRtbCc6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBJbnRlcmFjdGl2ZUltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IsIGluZm8uc3JjLCB0aGlzLmNhY2hlLCBpbmplY3Rvcik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnaW1hZ2UnOiB7XHJcbiAgICAgICAgaW1hZ2UgPSBuZXcgU3RhdGljSW1hZ2UodGhpcy5jb250ZXh0LCB3aWR0aFRleGVscywgaGVpZ2h0VGV4ZWxzLCBjb2xvciwgaW5mby5zcmMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3BkZic6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBQZGZJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yLCBpbmZvLnNyYywgbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYmxhbmsnOlxyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgaW1hZ2UgPSBuZXcgQmxhbmtJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGltYWdlO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJpbXBvcnQge3Byb3BzIGFzICBib29rUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2snO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICdCYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG4gIGNvbnN0cnVjdG9yKG9uUmVhZHksIHN0eWxlKSB7XHJcbiAgICB0aGlzLm9uUmVhZHkgPSBvblJlYWR5O1xyXG4gICAgdGhpcy5kZWZhdWx0cyA9IGJvb2tQcm9wcyhzdHlsZSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG5cclxuICB9XHJcblxyXG4gIGNhbGNTaXplKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IHNjYWxlID0gQmFzZU1hdGhVdGlscy5jYWxjU2NhbGUod2lkdGgsIGhlaWdodCwgdGhpcy5kZWZhdWx0cy53aWR0aCwgdGhpcy5kZWZhdWx0cy5oZWlnaHQpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHNjYWxlKndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHNjYWxlKmhlaWdodFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGNUZXhlbHMod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3Qgc2hlZXQgPSB0aGlzLmRlZmF1bHRzLnNoZWV0LCBzY2FsZSA9IEJhc2VNYXRoVXRpbHMuY2FsY1NjYWxlKHdpZHRoLCBoZWlnaHQsIHNoZWV0LndpZHRoVGV4ZWxzLCBzaGVldC5oZWlnaHRUZXhlbHMpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGhUZXhlbHM6IHNjYWxlKndpZHRoLFxyXG4gICAgICBoZWlnaHRUZXhlbHM6IHNjYWxlKmhlaWdodFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGNQcm9wcyh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB0aGlzLnByb3BzID0ge1xyXG4gICAgICAuLi50aGlzLmRlZmF1bHRzLFxyXG4gICAgICBwYWdlczogdGhpcy5wYWdlcyxcclxuICAgICAgLi4udGhpcy5jYWxjU2l6ZSh3aWR0aCwgaGVpZ2h0KSxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLnNoZWV0LFxyXG4gICAgICAgIC4uLnRoaXMuY2FsY1RleGVscyh3aWR0aCwgaGVpZ2h0KVxyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLnRoaXMuZGVmYXVsdHMuY292ZXIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhZ2U6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLnBhZ2UsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjU2hlZXRzKHBhZ2VzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldHMgPSBNYXRoLmNlaWwoTWF0aC5tYXgoMCwgcGFnZXMtNCkvMik7XHJcbiAgfVxyXG5cclxuICBnZXRTaGVldHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldHM7XHJcbiAgfVxyXG5cclxuICBnZXRQcm9wcygpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3BzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZUNhbGxiYWNrKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYmluZHMucGFnZUNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgcmVhZHkoKSB7XHJcbiAgICBpZih0aGlzLm9uUmVhZHkpIHtcclxuICAgICAgdGhpcy5vblJlYWR5KHRoaXMuZ2V0UHJvcHMoKSwgdGhpcy5nZXRTaGVldHMoKSwgdGhpcy5nZXRQYWdlQ2FsbGJhY2soKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgc2hlZXRCbG9jayBmcm9tICcuLi9tb2RlbHMvc2hlZXRCbG9jayc7XHJcbmltcG9ydCBNYXRoVXRpbHMgZnJvbSAnTWF0aFV0aWxzJztcclxuaW1wb3J0IFRocmVlVXRpbHMgZnJvbSAnVGhyZWVVdGlscyc7XHJcbi8vIGltcG9ydCBUaHJlZU1hcmt1cCBmcm9tICcuL1RocmVlTWFya3VwJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoZWV0QmxvY2sge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHAsIGZpcnN0LCBsYXN0LCBhbmdsZT0wLCBzdGF0ZT0nY2xvc2VkJywgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsO1xyXG4gICAgdGhpcy5wID0ge1xyXG4gICAgICAuLi5wLFxyXG4gICAgICBmaXJzdCxcclxuICAgICAgbGFzdFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5nZXRQcm9wcygpO1xyXG5cclxuICAgIGNvbnN0IGxvYWRlZFBvaW50cyA9IHRoaXMubG9hZFBvaW50cygpO1xyXG4gICAgT2JqZWN0LmtleXMobG9hZGVkUG9pbnRzKS5tYXAoKGspPT4ge1xyXG4gICAgICB0aGlzW2tdID0gbG9hZGVkUG9pbnRzW2tdW3Byb3BzLnNoYXBlXSB8fCBsb2FkZWRQb2ludHNba11bMF07XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnBTcGxpbmUgPSBuZXcgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyhbXSk7XHJcbiAgICBmb3IobGV0IGk9MDsgaTx0aGlzLmludGVycG9sYXRpb25Qb2ludHMueFswXS5sZW5ndGg7ICsraSkge1xyXG4gICAgXHR0aGlzLnBTcGxpbmUucG9pbnRzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pU3BsaW5lID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8c2hlZXRCbG9jay5yZXNYOyArK2kpIHtcclxuICAgIFx0dGhpcy5pU3BsaW5lLnBvaW50cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYVNwbGluZXMgPSBbXTtcclxuXHJcbiAgICAvL3RoaXMudGhyZWUgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gc2hlZXRCbG9jay5nZW9tZXRyeS5jbG9uZSgpO1xyXG5cclxuICAgIHRoaXMucC5zaWRlRmFjZXMgPSBbe1xyXG4gICAgICAgIGZpcnN0OiAwLFxyXG4gICAgICAgIGxhc3Q6IHNoZWV0QmxvY2suZmFjZXNbMF1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGZpcnN0OiBzaGVldEJsb2NrLmZhY2VzWzBdLFxyXG4gICAgICAgIGxhc3Q6IHNoZWV0QmxvY2suZmFjZXNbMV1cclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoKTtcclxuICAgIHRoaXMuc2lkZVRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcclxuICAgIHRoaXMuc2lkZVRleHR1cmUucmVwZWF0LnNldCgwLCBsYXN0LWZpcnN0KTtcclxuICAgIHRoaXMuc2lkZVRleHR1cmUuaW1hZ2UgPSBwcm9wcy5zaWRlVGV4dHVyZTtcclxuICAgIHRoaXMuc2lkZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMubWF0ZXJpYWxzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7bWFwOiB0aGlzLnNpZGVUZXh0dXJlfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHttYXA6IHRoaXMuc2lkZVRleHR1cmV9KSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSwvL3tvcGFjaXR5OiAwLCB0cmFuc3BhcmVudDogdHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pXHJcbiAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMF0sIDIqZmlyc3QpO1xyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMV0sIDIqbGFzdC0xKTtcclxuXHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFscyk7XHJcbiAgICB0aGlzLm1lc2guY2FzdFNoYWRvdyA9IHRydWU7XHJcbiAgICB0aGlzLm1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XHJcbiAgICAvLyB0aGlzLm1lc2guZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcblxyXG4gICAgLy90aGlzLnRocmVlLmFkZCh0aGlzLm1lc2gpO1xyXG4gICAgdGhpcy50aHJlZSA9IHRoaXMubWVzaDtcclxuICAgIHRoaXMudGhyZWUudXNlckRhdGEuc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5tYXJrZXJzID0gW107XHJcbiAgICBpZih0aGlzLnAubWFya2VyLnVzZSkge1xyXG4gICAgICBjb25zdCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoO1xyXG4gICAgICBsZXQgaXM7XHJcbiAgICAgIC8vIGlzID0gWzAsIHNoZWV0QmxvY2sucmVzWC0xLCAoc2hlZXRCbG9jay5yZXNaLTEpKnNoZWV0QmxvY2sucmVzWCwgc2hlZXRCbG9jay5yZXNaKnNoZWV0QmxvY2sucmVzWC0xXTtcclxuICAgICAgaXMgPSBBcnJheS5hcHBseSgwLCBBcnJheShsKSkubWFwKChfLCBpKT0+IGkpO1xyXG5cclxuICAgICAgZm9yKGxldCBpIG9mIGlzKSB7XHJcbiAgICAgICAgY29uc3QgbWFya2VyID0gVGhyZWVVdGlscy5jcmVhdGVNYXJrZXIodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpXSwgaTxsLzI/MHhGRjAwMDA6MHgwMEZGMDAsIHRoaXMucC5tYXJrZXIuc2l6ZSk7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgbWFya2VyLFxyXG4gICAgICAgICAgdmVydGV4OiBpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50aHJlZS5hZGQobWFya2VyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29ybmVyID0ge1xyXG4gICAgICB1c2U6IHRydWUsXHJcbiAgICAgIGhlaWdodDogMCxcclxuICAgICAgbWF4RGlzdGFuY2U6IDAsXHJcbiAgICAgIHBvaW50czogW10sXHJcbiAgICAgIE9aOiBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMSksXHJcbiAgICAgIGF4aXM6IG5ldyBUSFJFRS5WZWN0b3IzKClcclxuICAgIH07XHJcbiAgICB0aGlzLnNldCgwLCAnY2xvc2VkJywgaGVpZ2h0LCBmaXJzdCwgbGFzdCk7IC8vIGNhbGN1bGF0ZSBjb3JuZXIgcG9pbnRzXHJcblxyXG4gICAgdGhpcy5zZXQoYW5nbGUsIHN0YXRlLCBoZWlnaHQsIGZpcnN0LCBsYXN0KTsgLy8gaW5pdCBwb3NpdGlvblxyXG5cclxuICAgIC8vIGlmKCFTaGVldEJsb2NrLm1hcmt1cCkge1xyXG4gICAgLy8gICBTaGVldEJsb2NrLm1hcmt1cD10cnVlO1xyXG4gICAgLy8gICB0aGlzLm1hcmt1cCA9IG5ldyBUaHJlZU1hcmt1cCh0aGlzLCAwLCBbe1xyXG4gICAgLy8gICAgIHg6IDAsXHJcbiAgICAvLyAgICAgeTogMCxcclxuICAgIC8vICAgfSwge1xyXG4gICAgLy8gICAgIHg6IDAuNSxcclxuICAgIC8vICAgICB5OiAxXHJcbiAgICAvLyAgIH0sIHtcclxuICAgIC8vICAgICB4OiAxLFxyXG4gICAgLy8gICAgIHk6IDBcclxuICAgIC8vICAgfV0ubWFwKChwKT0+bmV3IFRIUkVFLlZlY3RvcjIocC54LCBwLnkpKSwge30pO1xyXG4gICAgLy8gfVxyXG5cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXRlcmlhbHMpIHtcclxuICAgICAgaWYobS5tYXApIHtcclxuICAgICAgICBtLm1hcCA9IG51bGw7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgbS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5tYXRlcmlhbHM7XHJcbiAgICB0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLmxhc3QtdGhpcy5wLmZpcnN0O1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi50aGlzLnAucGFnZSxcclxuICAgICAgd2lkdGg6IHRoaXMucC5wYWdlLndpZHRoLSh0aGlzLnJlZHVjZWRXaWR0aD8gMWUtMyp0aGlzLnAucGFnZS53aWR0aDogMCksXHJcbiAgICAgIHNoZWV0czogdGhpcy5wLnNoZWV0c1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlZHVjZVdpZHRoKHJlZHVjZWRXaWR0aCkge1xyXG4gICAgdGhpcy5yZWR1Y2VkV2lkdGggPSByZWR1Y2VkV2lkdGg7XHJcbiAgICB0aGlzLnNldCh0aGlzLmFuZ2xlKTtcclxuICB9XHJcblxyXG4gIGdldFRvcENlcm5lcnMoKSB7XHJcbiAgICBjb25zdCBvZmYgPSAhKHRoaXMuYW5nbGU+TWF0aC5QSS8yKT8gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgvMjogMDtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNYLTErb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWyhzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTErb2ZmXVxyXG4gICAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wU2l6ZSgpIHtcclxuICAgIGNvbnN0IHZzID0gdGhpcy5nZXRUb3BDZXJuZXJzKCk7XHJcbiAgICBjb25zdCB3MCA9IG5ldyBUSFJFRS5WZWN0b3IzKCksIHcxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHcwLmNvcHkodnNbMF0pO1xyXG4gICAgdGhpcy50aHJlZS5sb2NhbFRvV29ybGQodzApO1xyXG4gICAgdzEuY29weSh2c1sxXSk7XHJcbiAgICB0aGlzLnRocmVlLmxvY2FsVG9Xb3JsZCh3MSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogTWF0aC5hYnModzEueC13MC54KSxcclxuICAgICAgaGVpZ2h0OiB2c1swXS5kaXN0YW5jZVRvKHZzWzJdKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFRvcFdvcmxkUm90YXRpb24ocSkge1xyXG4gICAgcS54ID0gLU1hdGguUEkvMjtcclxuICAgIHJldHVybiBxO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wV29ybGRQb3NpdGlvbih2KSB7XHJcbiAgICBjb25zdCB2cyA9IHRoaXMuZ2V0VG9wQ2VybmVycygpO1xyXG4gICAgdi5zZXQoMCwgLTEwMCwgMCk7XHJcbiAgICBjb25zdCB3ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIGZvcihsZXQgdmkgb2YgdnMpIHtcclxuICAgICAgdy5jb3B5KHZpKTtcclxuICAgICAgdGhpcy50aHJlZS5sb2NhbFRvV29ybGQodyk7XHJcbiAgICAgIHYueCArPSAwLjI1KncueDtcclxuICAgICAgdi55ID0gTWF0aC5tYXgody55LCB3LnkpO1xyXG4gICAgICB2LnogKz0gMC4yNSp3Lno7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdjtcclxuICB9XHJcblxyXG4gIGdldEludGVycG9sYXRpb25Qb2ludHMoaW5kcywgbW9kKSB7XHJcbiAgICBjb25zdCBwcyA9IHt4OiBbXSwgeTogW119LCBLID0gdGhpcy5nZXRQcm9wcygpLndhdmU7XHJcbiAgICBmb3IobGV0IGkgb2YgaW5kcykge1xyXG4gICAgICBwcy54LnB1c2goWy4uLnRoaXMuaW50ZXJwb2xhdGlvblBvaW50cy54W2ldXSk7XHJcbiAgICAgIHBzLnkucHVzaCh+bW9kLmluZGV4T2YoaSk/IHRoaXMuaW50ZXJwb2xhdGlvblBvaW50cy55W2ldLm1hcCgobik9PiBLKm4pOiBbLi4udGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnlbaV1dKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcztcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgc3RhdGU9dGhpcy5zdGF0ZSwgaGVpZ2h0PXRoaXMuY29ybmVyLmhlaWdodCwgZmlyc3Q9dGhpcy5wLmZpcnN0LCBsYXN0PXRoaXMucC5sYXN0LCBmbGlwRGlyZWN0aW9uPSdyaWdodCcpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIGxldCBjbG9zZWRBbmdsZSwgYmluZGVyVHVybjtcclxuICAgIGlmKHR5cGVvZiBhbmdsZT09PSdvYmplY3QnKSB7XHJcbiAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZS5vcGVuZWRBbmdsZTtcclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZS5jbG9zZWRBbmdsZTtcclxuICAgICAgYmluZGVyVHVybiA9IGFuZ2xlLmJpbmRlclR1cm4+UEkvMj9QSS1hbmdsZS5iaW5kZXJUdXJuOmFuZ2xlLmJpbmRlclR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29ybmVyLmhlaWdodCA9IGhlaWdodDtcclxuICAgIGlmKHRoaXMucC5maXJzdCE9PWZpcnN0IHx8IHRoaXMucC5sYXN0IT09bGFzdCkge1xyXG4gICAgICB0aGlzLnNpZGVUZXh0dXJlLnJlcGVhdC5zZXQoMCwgbGFzdC1maXJzdCk7XHJcbiAgICAgIHRoaXMuc2lkZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICBpZih0aGlzLnAuZmlyc3QhPT1maXJzdCkge1xyXG4gICAgICAgIHRoaXMucC5zZXRUZXh0dXJlKHRoaXMubWF0ZXJpYWxzWzBdLCAyKmZpcnN0KTtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLnAubGFzdCE9PWxhc3QpIHtcclxuICAgICAgICB0aGlzLnAuc2V0VGV4dHVyZSh0aGlzLm1hdGVyaWFsc1sxXSwgMipsYXN0LTEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnAuZmlyc3QgPSBmaXJzdDtcclxuICAgIHRoaXMucC5sYXN0ID0gbGFzdDtcclxuICAgIGxldCBwb2ludHM7XHJcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuICAgIGlmKHRoaXMuc3RhdGUgPT09ICdjbG9zZWQnKSB7XHJcbiAgICAgIHBvaW50cyA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLCB0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5zdGF0ZSA9PT0gJ29wZW5lZCcpIHtcclxuICAgICAgaWYoY2xvc2VkQW5nbGUhPT11bmRlZmluZWQgJiYgTWF0aC5hYnMoY2xvc2VkQW5nbGUtUEkvMik+MWUtMikge1xyXG4gICAgICAgIHBvaW50cyA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLmZsYXRJbnRlcnBvbGF0aW9uSW5kZWNlcywgW10pO1xyXG4gICAgICAgIGNvbnN0IHBzID0gdGhpcy5nZXRQb2ludHNBdEFuZ2xlKHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLCB0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzKSwgY2xvc2VkQW5nbGU+UEkvMj9QSS1jbG9zZWRBbmdsZTpjbG9zZWRBbmdsZSk7XHJcbiAgICAgICAgcG9pbnRzLnggPSBbcHMueCwuLi5wb2ludHMueF07XHJcbiAgICAgICAgcG9pbnRzLnkgPSBbcHMueSwuLi5wb2ludHMueV07XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocHMpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHBvaW50cyA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLm9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzW2ZsaXBEaXJlY3Rpb249PT0ncmlnaHQnPyAodGhpcy5hbmdsZT5QSS8yPydsZWZ0JzoncmlnaHQnKTogKHRoaXMuYW5nbGU8UEkvMj8nbGVmdCc6J3JpZ2h0JyldLCB0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGhsLCBociwgb2Zmc2V0ID0gMC41KnByb3BzLnNoZWV0cypwcm9wcy5kZXB0aDtcclxuICAgIGlmKHRoaXMuc3RhdGU9PT0nY2xvc2VkJykge1xyXG4gICAgICBvZmZzZXQgLT0gN2UtNip0aGlzLnAuc2NhbGU7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgIGhsID0gKHByb3BzLnNoZWV0cy1maXJzdCkqcHJvcHMuZGVwdGg7XHJcbiAgICAgIGhyID0gKHByb3BzLnNoZWV0cy1sYXN0KSpwcm9wcy5kZXB0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBobCA9IGZpcnN0KnByb3BzLmRlcHRoO1xyXG4gICAgICBociA9IGxhc3QqcHJvcHMuZGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZERlcHRoID0gMC4xKnByb3BzLmRlcHRoO1xyXG4gICAgaWYoaGw+aHIpIHtcclxuICAgICAgaHItPWREZXB0aDtcclxuICAgICAgaGwrPWREZXB0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBocis9ZERlcHRoO1xyXG4gICAgICBobC09ZERlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluQW5nbGUgPSB0aGlzLmFuZ2xlPlBJLzI/UEktdGhpcy5hbmdsZTp0aGlzLmFuZ2xlLCBoQW5nbGUgPSB0aGlzLnN0YXRlID09PSAnY2xvc2VkJz8gaW5BbmdsZTogKGJpbmRlclR1cm49PT11bmRlZmluZWQ/IFBJLzI6IGJpbmRlclR1cm4pO1xyXG4gICAgY29uc3QgW2xlZnQsIHJpZ2h0XSA9IHRoaXMuZ2V0UG9pbnRzQXRBbmdsZUFuZEhzKHBvaW50cywgaW5BbmdsZSwgaEFuZ2xlLCBbaGwvcHJvcHMud2lkdGgsIGhyL3Byb3BzLndpZHRoXSk7XHJcbiAgICBpZih0aGlzLmFuZ2xlPlBJLzIpIHtcclxuICAgICAgdGhpcy5pbnZlcnNlKGxlZnQpO1xyXG4gICAgICB0aGlzLmludmVyc2UocmlnaHQpO1xyXG4gICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQb2ludHMobGVmdCwgcmlnaHQsIG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICBzZXRQb2ludHMobGVmdCwgcmlnaHQsIG9mZnNldCkge1xyXG4gICAgY29uc3QgcCA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuICAgIGxldCBpID0gMDtcclxuXHJcbiAgICBjb25zdCB5cyA9IFtyaWdodCwgbGVmdF07XHJcbiAgICBmb3IobGV0IHkgPSAwOyB5PHNoZWV0QmxvY2sucmVzWTsgKyt5KSB7XHJcbiAgICAgIGZvcihsZXQgeiA9IDA7IHo8c2hlZXRCbG9jay5yZXNaOyArK3opIHtcclxuICAgICAgICBmb3IobGV0IHggPSAwOyB4PHNoZWV0QmxvY2sucmVzWDsgKyt4KSB7XHJcbiAgICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2krK10uc2V0KFxyXG4gICAgICAgICAgICB5c1t5XS54W3hdKnAud2lkdGgrb2Zmc2V0LFxyXG4gICAgICAgICAgICB5c1t5XS55W3hdKnAud2lkdGgsXHJcbiAgICAgICAgICAgIHoqcC5oZWlnaHQvKHNoZWV0QmxvY2sucmVzWi0xKS0wLjUqcC5oZWlnaHRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihpIT09dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdzZXRQb2ludHM6IGJhZCBtYXBwaW5nIScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMuY29ybmVyLnVzZSAmJiAhdGhpcy5jb3JuZXIucG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBwbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLCBub3JtYWwgPSBwbGFuZS5ub3JtYWwsIHBsYW5lT2Zmc2V0ID0gKDEtdGhpcy5nZXRQcm9wcygpLmZsZXhpYmxlQ29ybmVyKSpNYXRoLm1pbihwLndpZHRoLCBwLmhlaWdodCksIHByb2ogPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgICBwbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChuZXcgVEhSRUUuVmVjdG9yMygtMSwwLC0xKS5ub3JtYWxpemUoKSwgbmV3IFRIUkVFLlZlY3RvcjMocGxhbmVPZmZzZXQrb2Zmc2V0LCAwLCAwLjUqcC5oZWlnaHQpKTtcclxuICAgICAgZm9yKGxldCBpPTAsIGw9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7aTxsOysraSkge1xyXG4gICAgICAgIHBsYW5lLnByb2plY3RQb2ludCh0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldLCBwcm9qKTtcclxuICAgICAgICBwcm9qLnN1Yih0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldKTtcclxuICAgICAgICBpZihwcm9qLngqbm9ybWFsLngrcHJvai55Km5vcm1hbC55K3Byb2oueipub3JtYWwuej4wKSB7XHJcbiAgICAgICAgICBjb25zdCBkID0gcHJvai5sZW5ndGgoKS9wbGFuZU9mZnNldDtcclxuICAgICAgICAgIHRoaXMuY29ybmVyLm1heERpc3RhbmNlID0gTWF0aC5tYXgodGhpcy5jb3JuZXIubWF4RGlzdGFuY2UsIGQpO1xyXG4gICAgICAgICAgdGhpcy5jb3JuZXIucG9pbnRzLnB1c2goe3ZlcnRleDogaSwgZGlzdGFuY2U6IGR9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLmNvcm5lci51c2UgJiYgTWF0aC5hYnModGhpcy5jb3JuZXIuaGVpZ2h0KT4xZS0zKSB7XHJcbiAgICAgIGNvbnN0IGQyQW5nbGUgPSAoZCk9PiBwLmNvcm5lckRldmlhdGlvbip0aGlzLmNvcm5lci5oZWlnaHQvKDErTWF0aC5leHAoLXAuYmVuZGluZyooZC0wLjUqdGhpcy5jb3JuZXIubWF4RGlzdGFuY2UpKSk7XHJcbiAgICAgIHRoaXMuY29ybmVyLmF4aXMuc2V0KC0xLDAsMSkubm9ybWFsaXplKCk7XHJcbiAgICAgIHRoaXMuY29ybmVyLmF4aXMuYXBwbHlBeGlzQW5nbGUodGhpcy5jb3JuZXIuT1osIHRoaXMuYW5nbGUpO1xyXG4gICAgICBmb3IobGV0IHBvaW50IG9mIHRoaXMuY29ybmVyLnBvaW50cykge1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbcG9pbnQudmVydGV4XS5hcHBseUF4aXNBbmdsZSh0aGlzLmNvcm5lci5heGlzLCBkMkFuZ2xlKHBvaW50LmRpc3RhbmNlKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQgbSBvZiB0aGlzLm1hcmtlcnMpIHtcclxuICAgICAgbS5tYXJrZXIucG9zaXRpb24uY29weSh0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW20udmVydGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4gICAgLy90aGlzLmdlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuICAgIC8vdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBpZih0aGlzLm1hcmt1cCkge1xyXG4gICAgICB0aGlzLm1hcmt1cC5jb21wdXRlVmVydGljZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGludmVyc2UocHMpIHtcclxuICAgIGZvcihsZXQgaSA9IDA7aTxwcy54Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHBzLnhbaV09LXBzLnhbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEhzKHBzLCBhbmdsZSwgaHMpIHtcclxuICAgIGNvbnN0IE4gPSAxMDAwO1xyXG4gICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLnBTcGxpbmUsIHBzKTtcclxuICAgIGxldCBibC8qID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMucFNwbGluZSwgTikqLywgcj1bXTtcclxuICAgIHtcclxuICAgICAgY29uc3QgcDEgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KChOLTEpL04pfSwgcDIgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KDEpfSxcclxuICAgICAgICBkcCA9IHt4OiBwMi54LXAxLngsIHk6IHAyLnktcDEueX0sIGxuID0gTWF0aC5zcXJ0KGRwLngqZHAueCtkcC55KmRwLnkpLFxyXG4gICAgICAgIHNwID0gdGhpcy5wU3BsaW5lLnBvaW50c1t0aGlzLnBTcGxpbmUucG9pbnRzLmxlbmd0aC0xXTtcclxuICAgICAgc3Auc2V0KHNwLngrMC4yKmRwLngvbG4sIHNwLnkrMC4yKmRwLnkvbG4sIDApO1xyXG4gICAgICBibCA9IE1hdGhVdGlscy5zcGxpdFNwbGluZSh0aGlzLnBTcGxpbmUsIE4pO1xyXG4gICAgfVxyXG4gICAgYmwubHMucHVzaCgxZTcpO1xyXG4gICAgTWF0aFV0aWxzLm1hcGwyTChibC5scywgYmwubGVuLCBzaGVldEJsb2NrLnJlc1gsIChpKT0+IHtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8aHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZighaSkge1xyXG4gICAgICAgICAgcltqXSA9IHt4OiBbLWhzW2pdKk1hdGguc2luKGFuZ2xlKV0sIHk6IFtoc1tqXSpNYXRoLmNvcyhhbmdsZSldfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBwMCA9IHsuLi50aGlzLnBTcGxpbmUuZ2V0UG9pbnQoKGktMSkvTil9LFxyXG4gICAgICAgICAgICAgICAgcDEgPSB0aGlzLnBTcGxpbmUuZ2V0UG9pbnQoaS9OKSxcclxuICAgICAgICAgICAgICAgIHg9LShwMS55LXAwLnkpLCB5PShwMS54LXAwLngpLCBsPU1hdGguc3FydCh4KngreSp5KTtcclxuICAgICAgICAgIHJbal0ueC5wdXNoKHAxLngreC9sKmhzW2pdKTtcclxuICAgICAgICAgIHJbal0ueS5wdXNoKHAxLnkreS9sKmhzW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG5wcz1bXTtcclxuICAgIGZvcihsZXQgaj0wOyBqPGhzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIG5wc1tqXT17eDpbXSx5OltdfTtcclxuICAgICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLmlTcGxpbmUsIHJbal0pO1xyXG4gICAgICBjb25zdCBsID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMuaVNwbGluZSwgTik7XHJcbiAgICAgIGwubHMucHVzaCgxZTcpO1xyXG4gICAgICBNYXRoVXRpbHMubWFwbDJMKGwubHMsIDEsIHNoZWV0QmxvY2sucmVzWCwgKGkpPT4ge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmlTcGxpbmUuZ2V0UG9pbnQoaS9OKTtcclxuICAgICAgICBucHNbal0ueC5wdXNoKHAueCk7XHJcbiAgICAgICAgbnBzW2pdLnkucHVzaChwLnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBucHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEFuZ2xlQW5kSHMocG9pbnRzLCBhbmdsZSwgaEFuZ2xlLCBocykge1xyXG4gICAgY29uc3QgcHMgPSB0aGlzLmdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSk7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludHNBdEhzKHBzLCBoQW5nbGUsIGhzKTtcclxuICB9XHJcblxyXG4gIGdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSkge1xyXG4gICAgY29uc3QgcHM9e3g6IFtdLCB5OltdfSwgYW5nbGVzPVtdO1xyXG4gICAgYW5nbGUvPU1hdGguUEkvMjtcclxuICAgIGZvcihsZXQgaiA9IDA7IGo8cG9pbnRzLngubGVuZ3RoOyArK2opIHtcclxuICAgICAgYW5nbGVzLnB1c2goai8ocG9pbnRzLngubGVuZ3RoLTEpKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaSA9IDA7IGk8cG9pbnRzLnhbMF0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgeHBzID0gW10sIHlwcyA9IFtdO1xyXG4gICAgICBmb3IobGV0IGogPSAwOyBqPHBvaW50cy54Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgeHBzLnB1c2gocG9pbnRzLnhbal1baV0pO1xyXG4gICAgICAgIHlwcy5wdXNoKHBvaW50cy55W2pdW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBwcy54LnB1c2godGhpcy5pbnRlcnBvbGF0ZShhbmdsZXMseHBzLGFuZ2xlKSk7XHJcbiAgICAgIHBzLnkucHVzaCh0aGlzLmludGVycG9sYXRlKGFuZ2xlcyx5cHMsYW5nbGUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcztcclxuICB9XHJcblxyXG4gIGludGVycG9sYXRlKHgseSx4aSkge1xyXG4gICAgaWYoIXRoaXMuYVNwbGluZXNbeC5sZW5ndGhdKSB7XHJcbiAgICAgIHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgICBjb25zdCBwcyA9IHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdLnBvaW50cztcclxuICAgICAgZm9yKGxldCBpPTA7aTx4Lmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBwcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzcGxpbmUgPSB0aGlzLmFTcGxpbmVzW3gubGVuZ3RoXTtcclxuICAgIGZvcihsZXQgaT0wO2k8eC5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHhbaV0sIHlbaV0sIDApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNwbGluZS5nZXRQb2ludChNYXRoLm1pbigxLCBNYXRoLm1heCh4aSwgMCkpKS55O1xyXG4gIH1cclxuXHJcbiAgbG9hZFBvaW50cygpIHtcclxuICAgIGNvbnN0IHg9W10seT1bXTtcclxuICAgIGZvcihsZXQgciBvZiBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSkge1xyXG4gICAgICB4LnB1c2gocipNYXRoLmNvcygwLjkqTWF0aC5QSS80KSk7XHJcbiAgICAgIHkucHVzaChyKk1hdGguc2luKDAuOSpNYXRoLlBJLzQpKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgbGVmdDogWzIsMyw0XSxcclxuICAgICAgICByaWdodDogWzIsMyw0XVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgbGVmdDogWzIsNiw1XSxcclxuICAgICAgICByaWdodDogWzIsMyw0XVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgbGVmdDogWzIsMyw0XSxcclxuICAgICAgICByaWdodDogWzIsMyw0XVxyXG4gICAgICB9XHJcbiAgICBdLFxyXG4gICAgY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMgPSBbXHJcbiAgICAgIFswLDEsMl0sXHJcbiAgICAgIFswLDEsMl0sXHJcbiAgICAgIFswLDEsMl1cclxuICAgIF0sXHJcbiAgICBmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMgPSBbXHJcbiAgICAgIFs1LDRdLFxyXG4gICAgICBbOCw3XSxcclxuICAgICAgWzUsNF1cclxuICAgIF0sXHJcbiAgICBpbnRlcnBvbGF0aW9uUG9pbnRzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yNTAwLDAuNTAwMCwwLjc1MDAsMS4wMDAwXSxcclxuICAgICAgICAgIFswLDAuMjQ4MiwwLjQ5OTcsMC43NTAwLDEuMDAwMF0sXHJcbiAgICAgICAgICBbMCwwLjI0MjgsMC40OTg5LDAuNzUwMCwxLjAwMDBdLFxyXG4gICAgICAgICAgWzAsMC4xMjUwLDAuMzIxNCwwLjU2NjAsMC44MTkyXSxcclxuICAgICAgICAgIC8vIFswLDAuMTI1MCwwLjMyMTQsMC41NzQ1LDAuODY2MF0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSxcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgWzAsMC4wMzAwLDAuMDE2NiwwLjAwMzMsMC4wMDAxXSxcclxuICAgICAgICAgIFswLDAuMDU5NiwwLjAzMzEsMC4wMDY1LDAuMDAwMl0sXHJcbiAgICAgICAgICBbMCwwLjIxNjUsMC4zODMwLDAuNDkyMCwwLjU3MzZdLFxyXG4gICAgICAgICAgLy8gWzAsMC4yMTY1LDAuMzgzMCwwLjQ4MjEsMC41MDAwXSxcclxuICAgICAgICAgIFswLDAuMjUwMCwwLjUwMDAsMC43NTAwLDEuMDAwMF0sXHJcbiAgICAgICAgICB5XHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yNTAwLDAuNTAwMCwwLjc1MDAsMS4wMDAwXSwvL2Nsb3NlZFxyXG4gICAgICAgICAgWzAsMC4yNDgyLDAuNDk5NywwLjc1MDAsMS4wMDAwXSxcclxuICAgICAgICAgIFswLDAuMjQyOCwwLjQ5ODksMC43NTAwLDEuMDAwMF0sXHJcbiAgICAgICAgICBbMCwwLjEyNTAsMC4zMjE0LDAuNTU3NCwwLjgxOTJdLC8vcmlnaHRcclxuICAgICAgICAgIFswLC0wLjA0MzQsMC4wMDAwLDAuMTMwMiwwLjM0MjBdLFxyXG4gICAgICAgICAgWzAsMC4wNDM0LC0wLjAwMDAsLTAuMTMwMiwtMC4zNDIwXSwvL2xlZnRcclxuICAgICAgICAgIFswLDAuMTcwNSwwLjM0MTAsMC40ODIxLDAuNTczNl0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSwvL2ZsYXRcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLC8vY2xvc2VkXHJcbiAgICAgICAgICBbMCwwLjAzMDAsMC4wMTY2LDAuMDAzMywwLjAwMDFdLFxyXG4gICAgICAgICAgWzAsMC4wNTk2LDAuMDMzMSwwLjAwNjUsMC4wMDAyXSxcclxuICAgICAgICAgIFswLDAuMjE2NSwwLjM4MzAsMC41MDE4LDAuNTczNl0sLy9yaWdodFxyXG4gICAgICAgICAgWzAsMC4yNDYyLDAuNTAwMCwwLjczODYsMC45Mzk3XSxcclxuICAgICAgICAgIFswLDAuMjQ2MiwwLjUwMDAsMC43Mzg2LDAuOTM5N10sLy9sZWZ0XHJcbiAgICAgICAgICBbMCwwLjE4MjgsMC4zNjU3LDAuNTc0NSwwLjgxOTJdLFxyXG4gICAgICAgICAgWzAsMC4yNTAwLDAuNTAwMCwwLjc1MDAsMS4wMDAwXSwvL2ZsYXRcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIE9sZCBpbnRlcnBvbGF0aW9uIHBvaW50c1xyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI4NiwwLjYzMiwwLjgxNSwwLjk5N10sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNzksMC42MjMsMC44MDYsMC45ODhdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTI2LDAuNDExLDAuNTkzLDAuNzc0XSxcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgeFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4wMzAsMC4wMTAsMC4wMDIsMC4wMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDYwLDAuMDE3LDAuMDA0LDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI1OSwwLjQ0MCwwLjQ0NiwwLjQyOV0sXHJcbiAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSxcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW50ZXJwb2xhdGlvblBvaW50cyxcclxuICAgICAgb3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsXHJcbiAgICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXNcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIlxyXG5leHBvcnQgZnVuY3Rpb24gcHJvcHMoc3R5bGUgPSAndm9sdW1lJykge1xyXG4gIC8vIGNvbnN0IHByb3BzID0ge1xyXG4gIC8vICAgaGVpZ2h0LFxyXG4gIC8vICAgd2lkdGgsXHJcbiAgLy8gICBncmF2aXR5LFxyXG4gIC8vICAgaW5qZWN0b3IsXHJcbiAgLy8gICBjYWNoZWRQYWdlcyxcclxuICAvLyAgIHJlbmRlckluYWN0aXZlUGFnZXMsXHJcbiAgLy8gICByZW5kZXJXaGlsZUZsaXBwaW5nLFxyXG4gIC8vICAgcGFnZXNGb3JQcmVkaWN0aW5nLFxyXG4gIC8vICAgcHJlbG9hZFBhZ2VzLFxyXG4gIC8vICAgc2hlZXQ6IHtcclxuICAvLyAgICAgc3RhcnRWZWxvY2l0eSxcclxuICAvLyAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gIC8vICAgICBmbGV4aWJpbGl0eSxcclxuICAvLyAgICAgZmxleGlibGVDb3JuZXIsXHJcbiAgLy8gICAgIGJlbmRpbmcsXHJcbiAgLy8gICAgIHdhdmUsXHJcbiAgLy8gICAgIHNoYXBlLFxyXG4gIC8vICAgICB3aWR0aFRleGVscyxcclxuICAvLyAgICAgaGVpZ2h0VGV4ZWxzLFxyXG4gIC8vICAgICBjb2xvcixcclxuICAvLyAgICAgc2lkZVRleHR1cmVcclxuICAvLyAgIH0sXHJcbiAgLy8gICBjb3Zlcjoge1xyXG4gIC8vICAgICAuLi5zaGVldCxcclxuICAvLyAgICAgcGFkZGluZyxcclxuICAvLyAgICAgYmluZGVyVGV4dHVyZSxcclxuICAvLyAgICAgZGVwdGgsXHJcbiAgLy8gICAgIG1hc3NcclxuICAvLyAgIH0sXHJcbiAgLy8gICBwYWdlOiB7XHJcbiAgLy8gICAgIC4uLnNoZWV0LFxyXG4gIC8vICAgICBkZXB0aCxcclxuICAvLyAgICAgbWFzc1xyXG4gIC8vICAgfVxyXG4gIC8vIH07XHJcblxyXG4gIGNvbnN0IGRlZiA9IHtcclxuICAgIGhlaWdodDogMC4yOTcsXHJcbiAgICB3aWR0aDogMC4yMSxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJycsXHJcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICcnLFxyXG4gICAgYmFja2dyb3VuZFN0eWxlOiAnJyxcclxuICAgIGhpZ2hsaWdodExpbmtzOiB0cnVlLFxyXG4gICAgbGlnaHRpbmc6ICdtaXhlZCcsXHJcbiAgICBncmF2aXR5OiAxLFxyXG4gICAgY2FjaGVkUGFnZXM6IDUwLFxyXG4gICAgcmVuZGVySW5hY3RpdmVQYWdlczogdHJ1ZSxcclxuICAgIHJlbmRlckluYWN0aXZlUGFnZXNPbk1vYmlsZTogdHJ1ZSxcclxuICAgIHJlbmRlcldoaWxlRmxpcHBpbmc6IGZhbHNlLFxyXG4gICAgcGFnZXNGb3JQcmVkaWN0aW5nOiA1LFxyXG4gICAgcHJlbG9hZFBhZ2VzOiA1LFxyXG4gICAgYXV0b1BsYXlEdXJhdGlvbjogNTAwMCxcclxuICAgIHJ0bDogZmFsc2UsXHJcbiAgICBpbnRlcmFjdGl2ZUNvcm5lcnM6IHRydWUsXHJcbiAgICBtYXhEZXB0aDogMC4wMDgsXHJcbiAgICBzaGVldDoge1xyXG4gICAgICBzdGFydFZlbG9jaXR5OiAxLjIsXHJcbiAgICAgIGNvcm5lckRldmlhdGlvbjogMC4xNSxcclxuICAgICAgZmxleGliaWxpdHk6IDEwLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogMC41LFxyXG4gICAgICBiZW5kaW5nOiAxMSxcclxuICAgICAgd2F2ZTogMC4zLFxyXG4gICAgICBzaGFwZTogMCxcclxuICAgICAgd2lkdGhUZXhlbHM6IDE5MjAsXHJcbiAgICAgIGhlaWdodFRleGVsczogMTA4MCxcclxuICAgICAgY29sb3I6IDB4RkZGRkZGLFxyXG4gICAgICBzaWRlOiAnY29sb3InXHJcbiAgICB9LFxyXG4gICAgY292ZXI6IHtcclxuICAgICAgc2lkZTogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgYmluZGVyVGV4dHVyZTogJycsXHJcbiAgICAgIGRlcHRoOiAwLjAwMDMsXHJcbiAgICAgIHBhZGRpbmc6IDAsXHJcbiAgICAgIG1hc3M6IDAuMDAxXHJcbiAgICB9LFxyXG4gICAgcGFnZToge1xyXG4gICAgICBkZXB0aDogMC4wMDAxLFxyXG4gICAgICBtYXNzOiAwLjAwMVxyXG4gICAgfSxcclxuICAgIGNzc0xheWVyUHJvcHM6IHtcclxuICAgICAgd2lkdGg6IDEwMjRcclxuICAgIH1cclxuICB9LFxyXG4gIHN0eWxlcyA9IHtcclxuICAgIHZvbHVtZTogZGVmLFxyXG4gICAgZmxhdDoge1xyXG4gICAgICAuLi5kZWYsXHJcbiAgICAgIGxpZ2h0aW5nOiAnYW1iaWVudCcsXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4uZGVmLnNoZWV0LFxyXG4gICAgICAgIHdhdmU6IDAuMDUsXHJcbiAgICAgICAgc2lkZTogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICBzaGFwZTogMVxyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLmRlZi5jb3ZlcixcclxuICAgICAgICBkZXB0aDogMC4wMDAwMlxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZGVmLnBhZ2UsXHJcbiAgICAgICAgZGVwdGg6IDAuMDAwMDFcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICd2b2x1bWUtcGFkZGluZ3MnOiB7XHJcbiAgICAgIC4uLmRlZixcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi5kZWYuY292ZXIsXHJcbiAgICAgICAgcGFkZGluZzogMC4wMDI1XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIHN0eWxlc1sndm9sdW1lLXVucm9sbGluZyddID0ge1xyXG4gICAgLi4uc3R5bGVzLnZvbHVtZSxcclxuICAgIHNoZWV0OiB7XHJcbiAgICAgIC4uLnN0eWxlcy52b2x1bWUuc2hlZXQsXHJcbiAgICAgIHNoYXBlOiAxXHJcbiAgICB9XHJcbiAgfTtcclxuICBzdHlsZXNbJ3ZvbHVtZS1wYWRkaW5ncy11bnJvbGxpbmcnXSA9IHtcclxuICAgIC4uLnN0eWxlc1sndm9sdW1lLXBhZGRpbmdzJ10sXHJcbiAgICBzaGVldDoge1xyXG4gICAgICAuLi5zdHlsZXNbJ3ZvbHVtZS1wYWRkaW5ncyddLnNoZWV0LFxyXG4gICAgICBzaGFwZTogMVxyXG4gICAgfVxyXG4gIH07XHJcbiAgcmV0dXJuIHN0eWxlc1tzdHlsZV0gfHwgZGVmO1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9wcm9wcy9ib29rLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5USFJFRS5DU1MzRE9iamVjdCA9IGNsYXNzIENTUzNET2JqZWN0IGV4dGVuZHMgVEhSRUUuT2JqZWN0M0Qge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ9dW5kZWZpbmVkKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGlmKGVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5zZXQoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICBcdHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblxyXG4gIFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgXHRcdGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xyXG4gIFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XHJcbiAgXHRcdH1cclxuICBcdH0pO1xyXG4gIH1cclxufTtcclxuXHJcblRIUkVFLkNTUzNEU3ByaXRlID0gY2xhc3MgQ1NTM0RTcHJpdGUgZXh0ZW5kcyBUSFJFRS5DU1MzRE9iamVjdCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xyXG4gICAgc3VwZXIoZWxlbWVudCk7XHJcbiAgfVxyXG59O1xyXG5cclxuVEhSRUUuQ1NTM0RSZW5kZXJlciA9IGNsYXNzIENTUzNEUmVuZGVyZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICBcdHZhciBfd2lkdGgsIF9oZWlnaHQ7XHJcbiAgXHR2YXIgX3dpZHRoSGFsZiwgX2hlaWdodEhhbGY7XHJcblxyXG4gIFx0dmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XHJcblxyXG4gIFx0dmFyIGNhY2hlID0ge1xyXG4gIFx0XHRjYW1lcmE6IHsgZm92OiAwLCBzdHlsZTogJycgfSxcclxuICBcdFx0b2JqZWN0czoge31cclxuICBcdH07XHJcblxyXG4gIFx0dmFyIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2Jyk7XHJcbiAgXHRkb21FbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gIFx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudDtcclxuXHJcbiAgXHR2YXIgY2FtZXJhRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKTtcclxuXHJcbiAgXHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcclxuICBcdGNhbWVyYUVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xyXG4gIFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XHJcblxyXG4gIFx0ZG9tRWxlbWVudC5hcHBlbmRDaGlsZCggY2FtZXJhRWxlbWVudCk7XHJcblxyXG4gIFx0dmFyIGlzSUUgPSAxOy8vL1RyaWRlbnQvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbiAgXHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgXHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHRyZXR1cm4ge1xyXG4gIFx0XHRcdHdpZHRoOiBfd2lkdGgsXHJcbiAgXHRcdFx0aGVpZ2h0OiBfaGVpZ2h0XHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcblxyXG4gIFx0XHRfd2lkdGggPSB3aWR0aDtcclxuICBcdFx0X2hlaWdodCA9IGhlaWdodDtcclxuICBcdFx0X3dpZHRoSGFsZiA9IF93aWR0aCAvIDI7XHJcbiAgXHRcdF9oZWlnaHRIYWxmID0gX2hlaWdodCAvIDI7XHJcblxyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHRmdW5jdGlvbiBlcHNpbG9uKCB2YWx1ZSkge1xyXG4gICAgICBsZXQgcjtcclxuICAgICAgLy9yPU1hdGguYWJzKCB2YWx1ZSkgPCAxZS02ID8gMCA6IHZhbHVlO1xyXG4gICAgICByPU1hdGgucm91bmQoKHZhbHVlICsgTnVtYmVyLkVQU0lMT04pICogMWU1KSAvIDFlNTtcclxuICBcdFx0cmV0dXJuIHI7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldENhbWVyYUNTU01hdHJpeCggbWF0cml4KSB7XHJcblxyXG4gIFx0XHR2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XHJcbiAgXHRcdHJldHVybiAnbWF0cml4M2QoJyArIFtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMCBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAyIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAzIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA0IF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDUgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDYgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDcgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDggXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgOSBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDExIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxMyBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTQgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE1IF0pXHJcbiAgICAgIF0uam9pbignLCcpICsnKSc7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpIHtcclxuXHJcbiAgXHRcdHZhciBlbGVtZW50cyA9IG1hdHJpeC5lbGVtZW50cztcclxuICBcdFx0dmFyIG1hdHJpeDNkID0gJ21hdHJpeDNkKCcgKyBbXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDAgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDIgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDMgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNCBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDYgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNyBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOCBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOSBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDExIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTMgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxNSBdKVxyXG4gIFx0XHRdLmpvaW4oJywnKSArJyknO1xyXG5cclxuICBcdFx0aWYoaXNJRSkge1xyXG5cclxuICBcdFx0XHRyZXR1cm4gJ3RyYW5zbGF0ZSgtNTAlLC01MCUpJyArXHJcbiAgXHRcdFx0XHQndHJhbnNsYXRlKCcgKyBfd2lkdGhIYWxmICsgJ3B4LCcgKyBfaGVpZ2h0SGFsZiArICdweCknICtcclxuICBcdFx0XHRcdGNhbWVyYUNTU01hdHJpeCArXHJcbiAgXHRcdFx0XHRtYXRyaXgzZDtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHJldHVybiAndHJhbnNsYXRlKC01MCUsLTUwJSknICsgbWF0cml4M2Q7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCkge1xyXG5cclxuICBcdFx0aWYob2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuQ1NTM0RPYmplY3QpIHtcclxuXHJcbiAgXHRcdFx0dmFyIHN0eWxlO1xyXG5cclxuICBcdFx0XHRpZihvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5DU1MzRFNwcml0ZSkge1xyXG4gIFx0XHRcdFx0bWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpO1xyXG4gIFx0XHRcdFx0bWF0cml4LnRyYW5zcG9zZSgpO1xyXG4gIFx0XHRcdFx0bWF0cml4LmNvcHlQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkKTtcclxuICBcdFx0XHRcdG1hdHJpeC5zY2FsZSggb2JqZWN0LnNjYWxlKTtcclxuXHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDMgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDcgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDExIF0gPSAwO1xyXG4gIFx0XHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxNSBdID0gMTtcclxuXHJcbiAgXHRcdFx0XHRzdHlsZSA9IGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpO1xyXG5cclxuICBcdFx0XHR9IGVsc2Uge1xyXG5cclxuICBcdFx0XHRcdHN0eWxlID0gZ2V0T2JqZWN0Q1NTTWF0cml4KCBvYmplY3QubWF0cml4V29ybGQsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRcdH1cclxuXHJcbiAgXHRcdFx0dmFyIGVsZW1lbnQgPSBvYmplY3QuZWxlbWVudDtcclxuICBcdFx0XHR2YXIgY2FjaGVkU3R5bGUgPSBjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXSAmJiBjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXS5zdHlsZTtcclxuXHJcbiAgXHRcdFx0aWYoY2FjaGVkU3R5bGUgPT09IHVuZGVmaW5lZCB8fCBjYWNoZWRTdHlsZSAhPT0gc3R5bGUpIHtcclxuICBcdFx0XHRcdGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0XHRlbGVtZW50LnN0eWxlLk1velRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gIFx0XHRcdFx0ZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuXHJcbiAgXHRcdFx0XHRjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXSA9IHsgc3R5bGU6IHN0eWxlIH07XHJcbiAgXHRcdFx0XHRpZihpc0lFKSB7XHJcbiAgXHRcdFx0XHRcdGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdLmRpc3RhbmNlVG9DYW1lcmFTcXVhcmVkID0gZ2V0RGlzdGFuY2VUb1NxdWFyZWQoIGNhbWVyYSwgb2JqZWN0KTtcclxuICBcdFx0XHRcdH1cclxuICBcdFx0XHR9XHJcblxyXG4gIFx0XHRcdGlmKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY2FtZXJhRWxlbWVudCkge1xyXG4gIFx0XHRcdFx0Y2FtZXJhRWxlbWVudC5hcHBlbmRDaGlsZCggZWxlbWVudCk7XHJcbiAgXHRcdFx0fVxyXG4gIFx0XHR9XHJcblxyXG4gIFx0XHRmb3IodmFyIGkgPSAwLCBsID0gb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKyspIHtcclxuXHJcbiAgXHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBjYW1lcmFDU1NNYXRyaXgpO1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdH1cclxuXHJcbiAgXHR2YXIgZ2V0RGlzdGFuY2VUb1NxdWFyZWQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHR2YXIgYSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHZhciBiID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbihvYmplY3QxLCBvYmplY3QyKSB7XHJcblxyXG4gIFx0XHRcdGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QxLm1hdHJpeFdvcmxkKTtcclxuICBcdFx0XHRiLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Mi5tYXRyaXhXb3JsZCk7XHJcblxyXG4gIFx0XHRcdHJldHVybiBhLmRpc3RhbmNlVG9TcXVhcmVkKCBiKTtcclxuXHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fSgpO1xyXG5cclxuICBcdGZ1bmN0aW9uIHpPcmRlciggc2NlbmUpIHtcclxuXHJcbiAgXHRcdHZhciBvcmRlciA9IE9iamVjdC5rZXlzKCBjYWNoZS5vYmplY3RzKS5zb3J0KCBmdW5jdGlvbihhLCBiKSB7XHJcblxyXG4gIFx0XHRcdHJldHVybiBjYWNoZS5vYmplY3RzWyBhIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQgLSBjYWNoZS5vYmplY3RzWyBiIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQ7XHJcblxyXG4gIFx0XHR9KTtcclxuICBcdFx0dmFyIHpNYXggPSBvcmRlci5sZW5ndGg7XHJcblxyXG4gIFx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24ob2JqZWN0KSB7XHJcblxyXG4gIFx0XHRcdHZhciBpbmRleCA9IG9yZGVyLmluZGV4T2YoIG9iamVjdC5pZCArICcnKTtcclxuXHJcbiAgXHRcdFx0aWYoaW5kZXggIT09IC0gMSkge1xyXG5cclxuICBcdFx0XHRcdG9iamVjdC5lbGVtZW50LnN0eWxlLnpJbmRleCA9IHpNYXggLSBpbmRleDtcclxuXHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0fSk7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24oc2NlbmUsIGNhbWVyYSkge1xyXG5cclxuICBcdFx0dmFyIGZvdiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF0gKiBfaGVpZ2h0SGFsZjtcclxuXHJcbiAgXHRcdGlmKGNhY2hlLmNhbWVyYS5mb3YgIT09IGZvdikge1xyXG5cclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLldlYmtpdFBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLk1velBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLnBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuXHJcbiAgXHRcdFx0Y2FjaGUuY2FtZXJhLmZvdiA9IGZvdjtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG4gIFx0XHRpZihjYW1lcmEucGFyZW50ID09PSBudWxsKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcbiAgXHRcdHZhciBjYW1lcmFDU1NNYXRyaXggPSAndHJhbnNsYXRlWignICsgZm92ICsgJ3B4KScgK1xyXG4gIFx0XHRcdGdldENhbWVyYUNTU01hdHJpeCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG4gIFx0XHR2YXIgc3R5bGUgPSBjYW1lcmFDU1NNYXRyaXggK1xyXG4gIFx0XHRcdCd0cmFuc2xhdGUoJyArIF93aWR0aEhhbGYgKyAncHgsJyArIF9oZWlnaHRIYWxmICsgJ3B4KSc7XHJcblxyXG4gIFx0XHRpZihjYWNoZS5jYW1lcmEuc3R5bGUgIT09IHN0eWxlICYmICEgaXNJRSkge1xyXG5cclxuICBcdFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gIFx0XHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuXHJcbiAgXHRcdFx0Y2FjaGUuY2FtZXJhLnN0eWxlID0gc3R5bGU7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0XHRyZW5kZXJPYmplY3QoIHNjZW5lLCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRpZihpc0lFKSB7XHJcblxyXG4gIFx0XHRcdC8vIElFMTAgYW5kIDExIGRvZXMgbm90IHN1cHBvcnQgJ3ByZXNlcnZlLTNkJy5cclxuICBcdFx0XHQvLyBUaHVzLCB6LW9yZGVyIGluIDNEIHdpbGwgbm90IHdvcmsuXHJcbiAgXHRcdFx0Ly8gV2UgaGF2ZSB0byBjYWxjIHotb3JkZXIgbWFudWFsbHkgYW5kIHNldCBDU1Mgei1pbmRleCBmb3IgSUUuXHJcbiAgXHRcdFx0Ly8gRllJOiB6LWluZGV4IGNhbid0IGhhbmRsZSBvYmplY3QgaW50ZXJzZWN0aW9uXHJcbiAgXHRcdFx0ek9yZGVyKCBzY2VuZSk7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0fTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUSFJFRS5DU1MzRFJlbmRlcmVyO1xyXG5cclxuY29uc3QgX0NTUzNET2JqZWN0ID0gVEhSRUUuQ1NTM0RPYmplY3QsIF9DU1MzRFNwcml0ZSA9IFRIUkVFLkNTUzNEU3ByaXRlO1xyXG5leHBvcnQge1xyXG4gIF9DU1MzRE9iamVjdCBhcyBDU1MzRE9iamVjdCxcclxuICBfQ1NTM0RTcHJpdGUgYXMgQ1NTM0RTcHJpdGVcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTM0RSZW5kZXJlci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge0NTUzNET2JqZWN0fSBmcm9tICcuL0NTUzNEUmVuZGVyZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1NTTGF5ZXIgZXh0ZW5kcyBDU1MzRE9iamVjdCB7XHJcblxyXG4gIHN0YXRpYyBkZWxheTtcclxuICBzdGF0aWMgc3R5bGU7XHJcbiAgc3RhdGljIGluaXQoZG9jLCBkZWxheT0xNTApIHtcclxuICAgIENTU0xheWVyLmRlbGF5ID0gZGVsYXk7XHJcbiAgICBDU1NMYXllci5zdHlsZSA9ICQoYDxzdHlsZSB0eXBlPXRleHQvY3NzPlxyXG4gICAgICAuY3NzLWxheWVyIHtcclxuICAgIFx0XHRvcGFjaXR5OiAxO1xyXG4gICAgXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgJHtkZWxheX1tcyBlYXNlLW91dDtcclxuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBcdH1cclxuICAgIFx0LmNzcy1sYXllci5oaWRkZW4ge1xyXG4gICAgXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgJHtkZWxheX1tcyBlYXNlLWluLCB2aXNpYmlsaXR5ICR7ZGVsYXl9bXMgc3RlcC1lbmQ7XHJcbiAgICBcdFx0b3BhY2l0eTogMDtcclxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgICAgLmZiM2QtYmxvY2sge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgfVxyXG4gICAgICAuZmIzZC1hdWRpbyBhdWRpbywgLmZiM2QtbGluayBhLCAuZmIzZC1pZnJhbWUgaWZyYW1lLCAuZmIzZC12aWRlbyB2aWRlbywgLmZiM2QteW91dHViZSAueW91dHViZSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgfVxyXG4gICAgICAuZmIzZC1pbWFnZSB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgIC5mYjNkLWxpbmsgYSB7XHJcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwwLC4xKTtcclxuICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbjtcclxuICAgICAgfVxyXG4gICAgICAuZmIzZC1saW5rIGE6aG92ZXIge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwwLC4yKTtcclxuICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1vdXQ7XHJcbiAgICAgIH1cclxuICAgICAgLmZiM2QtaWZyYW1lIGlmcmFtZSB7XHJcbiAgICAgICAgYm9yZGVyOiAwO1xyXG4gICAgICB9XHJcbiAgICAgIC5mYjNkLWltYWdlIGltZyB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+YC5mYjNkUUZpbHRlcigpKS5hcHBlbmRUbyhkb2MuaGVhZCk7XHJcbiAgfVxyXG4gIHN0YXRpYyBkaXNwb3NlKCkge1xyXG4gICAgQ1NTTGF5ZXIuc3R5bGUucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBwcm9wcykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIHRoaXMuakNvbnRhaW5lciA9ICQoJzxkaXYgY2xhc3M9XCJoaWRkZW4gY3NzLWxheWVyXCI+PC9kaXY+Jyk7XHJcbiAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICB0aGlzLnNldERhdGEoKTtcclxuICAgIHRoaXMuc2V0KHRoaXMuakNvbnRhaW5lclswXSk7XHJcbiAgfVxyXG5cclxuICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IHdpZHRoUHhzID0gdGhpcy5wcm9wcy53aWR0aCwgaGVpZ2h0UHhzID0gaGVpZ2h0L3dpZHRoKndpZHRoUHhzO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyLndpZHRoKHdpZHRoUHhzKS5oZWlnaHQoaGVpZ2h0UHhzKTtcclxuICBcdHRoaXMuc2NhbGUueCA9IDEvKHdpZHRoUHhzL3dpZHRoKTtcclxuICBcdHRoaXMuc2NhbGUueSA9IDEvKHdpZHRoUHhzL3dpZHRoKTtcclxuICB9XHJcblxyXG4gIGNhbGxJbnRlcm5hbChuYW1lKSB7XHJcbiAgICBpZih0aGlzLm9iamVjdCAmJiB0aGlzLm9iamVjdFtuYW1lXSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0W25hbWVdKCk7XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNsZWFySW50ZXJuYWxzKCk7XHJcbiAgfVxyXG5cclxuICBjbGVhckludGVybmFscygpIHtcclxuICAgIHRoaXMuY2FsbEludGVybmFsKCdkaXNwb3NlJyk7XHJcbiAgICAhdGhpcy5jc3MgfHwgdGhpcy5jc3MucmVtb3ZlKCk7XHJcbiAgICAhdGhpcy5odG1sIHx8IHRoaXMuaHRtbC5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIHNldERhdGEoY3NzPScnLCBodG1sPScnLCBqcz0nJykge1xyXG4gICAgdGhpcy5jbGVhckludGVybmFscygpO1xyXG5cclxuICAgIHRoaXMuY3NzID0gJChgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiR7Y3NzfTwvc3R5bGU+YCkuYXBwZW5kVG8odGhpcy5qQ29udGFpbmVyKTtcclxuICAgIHRoaXMuaHRtbCA9ICQoaHRtbCkuYXBwZW5kVG8odGhpcy5qQ29udGFpbmVyKTtcclxuICAgIGNvbnN0IGluaXQgPSBldmFsKGpzKTtcclxuICAgIGlmKGluaXQpIHtcclxuICAgICAgdGhpcy5vYmplY3QgPSBpbml0KHRoaXMuakNvbnRhaW5lciwgdGhpcy5wcm9wcykgfHwge307XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwZW5kZWRDYWxsKGNsYikge1xyXG4gICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgaWYodGltZXN0YW1wPT09dGhpcy50aW1lc3RhbXApIHtcclxuICAgICAgICBjbGIoKTtcclxuICAgICAgfVxyXG4gICAgfSwgQ1NTTGF5ZXIuZGVsYXkqLjUpO1xyXG4gIH1cclxuXHJcbiAgaXNIaWRkZW4oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLmhhc0NsYXNzKCdoaWRkZW4nKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYoIXRoaXMuaXNIaWRkZW4oKSkge1xyXG4gICAgICB0aGlzLmpDb250YWluZXIuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnaGlkZScpO1xyXG4gICAgICByZXMgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wZW5kZWRDYWxsKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5jYWxsSW50ZXJuYWwoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGlmKHRoaXMuaXNIaWRkZW4oKSkge1xyXG4gICAgICB0aGlzLmpDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnc2hvdycpO1xyXG4gICAgICByZXMgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wZW5kZWRDYWxsKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5jYWxsSW50ZXJuYWwoJ3Nob3duJyk7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0NTU0xheWVyLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FjaGUge1xyXG5cclxuICBjb25zdHJ1Y3RvcihtYXhTaXplPUluZmluaXR5LCBzaXplb2Y9Q2FjaGUuY291bnRTaXplb2YpIHtcclxuICAgIHRoaXMub3MgPSBuZXcgTWFwKCk7XHJcbiAgICB0aGlzLnNpemVvZiA9IHNpemVvZjtcclxuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7XHJcbiAgICB0aGlzLnNpemUgPSAwO1xyXG4gIH1cclxuXHJcbiAgZm9yRWFjaChjbGIpIHtcclxuICAgIHRoaXMub3MuZm9yRWFjaCgodiwgayk9PiBjbGIoW2ssdl0pKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb3VudFNpemVvZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIDE7XHJcbiAgfVxyXG5cclxuICByZW1vdmUoaykge1xyXG4gICAgbGV0IHJlcyA9IGZhbHNlO1xyXG4gICAgY29uc3QgdiA9IHRoaXMub3MuZ2V0KGspO1xyXG4gICAgaWYoIXYubG9ja2VkIHx8ICF2LmxvY2tlZChrKSkge1xyXG4gICAgICB0aGlzLnNpemUgLT0gdGhpcy5zaXplb2Yodik7XHJcbiAgICAgIGlmKHYuZGlzcG9zZSkge1xyXG4gICAgICAgIHYuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3MuZGVsZXRlKGspO1xyXG4gICAgICByZXMgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGZyZWVTcGFjZSgpIHtcclxuICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHRoaXMub3MpIHtcclxuICAgICAgYXJyLnB1c2goe3RpbWVzdGFtcDogcFsxXS50aW1lc3RhbXAsIGtleTogcFswXX0pO1xyXG4gICAgfVxyXG4gICAgYXJyLnNvcnQoKGEsIGIpPT4gYS50aW1lc3RhbXAtYi50aW1lc3RhbXApO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8YXJyLmxlbmd0aCAmJiB0aGlzLnNpemU+Myp0aGlzLm1heFNpemUvNDsgKytpKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlKGFycltpXS5rZXkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHRoaXMub3MpIHtcclxuICAgICAgYXJyLnB1c2goe3Y6IHBbMV0sIGs6IHBbMF19KTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgbyBvZiBhcnIpIHtcclxuICAgICAgaWYoby52LmRpc3Bvc2UpIHtcclxuICAgICAgICBvLnYuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3MuZGVsZXRlKG8uayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVjdXJzaW9uU2l6ZW9mKHZhbHVlKSB7XHJcbiAgICBsZXQgc2l6ZSA9IDA7XHJcbiAgICBpZih2YWx1ZSkge1xyXG4gICAgICArK3NpemU7XHJcbiAgICAgIGNvbnN0IGxlbiA9IHZhbHVlLmxlbmd0aDtcclxuICAgICAgaWYobGVuPT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcCBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgaWYodmFsdWUuaGFzT3duUHJvcGVydHkocCkpIHtcclxuICAgICAgICAgICAgc2l6ZSs9Q2FjaGUucmVjdXJzaW9uU2l6ZW9mKHZhbHVlW3BdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2l6ZSs9bGVuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGltZXN0YW1wKCkge1xyXG4gICAgcmV0dXJuIERhdGUubm93KCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZ2V0KGtleSkge1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLm9zLmdldChrZXkpO1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgdmFsdWUudGltZXN0YW1wID0gdGhpcy5nZXRUaW1lc3RhbXAoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHB1dChrZXksIHZhbHVlKSB7XHJcbiAgICB2YWx1ZS50aW1lc3RhbXAgPSB0aGlzLmdldFRpbWVzdGFtcCgpO1xyXG4gICAgdGhpcy5vcy5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICB0aGlzLnNpemUrPXRoaXMuc2l6ZW9mKHZhbHVlKTtcclxuICAgIGlmKHRoaXMuc2l6ZT50aGlzLm1heFNpemUpIHtcclxuICAgICAgdGhpcy5mcmVlU3BhY2UoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZXIgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG5cclxuICBoYW5kbGVEZWZhdWx0KGlkLCBlLCBkYXRhKSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKGlkKyctJytlLnR5cGUrJy0nK2RhdGEpO1xyXG4gIH1cclxuXHJcbiAgZGlzcGF0Y2hBc3luYyhlKSB7XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy5kaXNwYXRjaEV2ZW50KGUpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsImltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbUV2ZW50Q29udmVydGVyIGV4dGVuZHMgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICAvLyBjdXN0b21cclxuICAvLyB0ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpO1xyXG4gIC8vIGN1c3RvbS5vYmplY3RcclxuICAvLyB0ZXN0KG9iamVjdCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBjdXN0b21UZXN0PSgpPT4gZmFsc2UsIGVEb2MpIHtcclxuICAgIHN1cGVyKHduZCwgZG9jKTtcclxuXHJcbiAgICB0aGlzLmVEb2MgPSBlRG9jO1xyXG4gICAgdGhpcy5jdXN0b21UZXN0ID0gY3VzdG9tVGVzdDtcclxuICAgIHRoaXMuY3VzdG9tcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgdGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MSAmJiBvYmplY3QyPyB0aGlzLmN1c3RvbVRlc3Qob2JqZWN0MSwgb2JqZWN0Mik6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0LnRhcmdldC5jYWxsYmFjaztcclxuICB9XHJcblxyXG4gIGFkZEN1c3RvbShjdXN0b20pIHtcclxuICAgIHRoaXMuY3VzdG9tcy5wdXNoKGN1c3RvbSk7XHJcbiAgfVxyXG5cclxuICBnZXRPYmplY3QoZSwgZGF0YSkge1xyXG4gICAgbGV0IG9iamVjdDtcclxuICAgIGlmKGRhdGEuZG9jPT09dGhpcy5lRG9jKSB7XHJcbiAgICAgIGZvcihsZXQgY3VzdG9tIG9mIHRoaXMuY3VzdG9tcykge1xyXG4gICAgICAgIG9iamVjdCA9IGN1c3RvbS50ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpO1xyXG4gICAgICAgIGlmKG9iamVjdCkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ3VzdG9tRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaW5kZXIge1xyXG5cclxuICBzdGF0aWMgREVMSU1JVEVSID0gJyAnO1xyXG5cclxuICBzdGF0aWMgaXNEZWxpbWV0cihzKSB7XHJcbiAgICByZXR1cm4gcz09PUZpbmRlci5ERUxJTUlURVI7XHJcbiAgfVxyXG5cclxuICBtZXJnZSgpIHtcclxuICAgIGNvbnN0IGFzID0gW10sIG1hcCA9IFtdLCBzdHJzID0gdGhpcy5zdHJzO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8c3Rycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZihzdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgIG1hcC5wdXNoKHtcclxuICAgICAgICAgIGJhc2U6IGksXHJcbiAgICAgICAgICBvZmZzZXQ6IHBcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcy5wdXNoKHN0cnNbaV0pO1xyXG4gICAgICAgIHAgKz0gc3Ryc1tpXS5sZW5ndGg7XHJcbiAgICAgICAgaWYoaTxzdHJzLmxlbmd0aC0xICYmICFGaW5kZXIuaXNEZWxpbWV0cihzdHJzW2ldLmNoYXJBdChzdHJzW2ldLmxlbmd0aC0xKSkgJiYgIUZpbmRlci5pc0RlbGltZXRyKHN0cnNbaSsxXS5jaGFyQXQoMCkpKSB7XHJcbiAgICAgICAgICBhcy5wdXNoKEZpbmRlci5ERUxJTUlURVIpO1xyXG4gICAgICAgICAgKytwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5tYXAgPSBtYXA7XHJcbiAgICB0aGlzLnN0ciA9IGFzLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgYWRkSGl0cyhwKSB7XHJcbiAgICBjb25zdCBpbmZvID0gdGhpcy5tYXBbVXRpbHMubG93ZXJCb3VuZCh0aGlzLm1hcCwge29mZnNldDogcH0sIChhLCBiKT0+IGEub2Zmc2V0LWIub2Zmc2V0KV07XHJcbiAgICBsZXQgY2hhcnMgPSB0aGlzLnBhdHRlcm4ubGVuZ3RoLCBpID0gaW5mby5iYXNlO1xyXG4gICAgcCAtPSBpbmZvLm9mZnNldDtcclxuICAgIHdoaWxlKGNoYXJzKSB7XHJcbiAgICAgIGlmKHRoaXMuc3Ryc1tpXS5sZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBkZWxpbWV0ZXIgPSBpPHRoaXMuc3Rycy5sZW5ndGgtMSAmJiAhRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJzW2ldLmNoYXJBdCh0aGlzLnN0cnNbaV0ubGVuZ3RoLTEpKSAmJiAhRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJzW2krMV0uY2hhckF0KDApKSxcclxuICAgICAgICAgICAgICBsZW5ndGggPSBNYXRoLm1pbih0aGlzLnN0cnNbaV0ubGVuZ3RoKyhkZWxpbWV0ZXI/IDE6IDApLXAsIGNoYXJzKTtcclxuICAgICAgICBpZihwPHRoaXMuc3Ryc1tpXS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMuaGl0cy5wdXNoKHtcclxuICAgICAgICAgICAgaW5kZXg6IGksXHJcbiAgICAgICAgICAgIG9mZnNldDogcCxcclxuICAgICAgICAgICAgbGVuZ3RoOiBNYXRoLm1pbihsZW5ndGgsIHRoaXMuc3Ryc1tpXS5sZW5ndGgtcCksXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhcnMgLT0gbGVuZ3RoO1xyXG4gICAgICAgICsraTtcclxuICAgICAgICBwID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkQ29udGV4dChwKSB7XHJcbiAgICBsZXQgZiA9IHAsIGwgPSBwK3RoaXMucGF0dGVybi5sZW5ndGgtMSwgZGVscyA9IHRoaXMucHJvcHMuY29udGV4dExlbmd0aCwgcHJldkRlbHMgPSBkZWxzKzE7XHJcbiAgICB3aGlsZShkZWxzICYmIHByZXZEZWxzLWRlbHMpIHtcclxuICAgICAgcHJldkRlbHMgPSBkZWxzO1xyXG4gICAgICBpZihkZWxzJTIpIHtcclxuICAgICAgICBmb3IobGV0IGk9Zi0yOyBpPj0wOyAtLWkpIHtcclxuICAgICAgICAgIGlmKEZpbmRlci5pc0RlbGltZXRyKHRoaXMuc3RyW2ldKSB8fCBpPT09MCkge1xyXG4gICAgICAgICAgICBmID0gaT09PTA/IDA6IGkrMTtcclxuICAgICAgICAgICAgLS1kZWxzO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZm9yKGxldCBpPWwrMjsgaTx0aGlzLnN0ci5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgaWYoRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJbaV0pIHx8IGk9PT10aGlzLnN0ci5sZW5ndGgtMSkge1xyXG4gICAgICAgICAgICBsID0gaT09PXRoaXMuc3RyLmxlbmd0aC0xPyBpPT09dGhpcy5zdHIubGVuZ3RoLTE6IGktMTtcclxuICAgICAgICAgICAgLS1kZWxzO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY29udGV4dHMucHVzaCh0aGlzLnN0ci5zdWJzdHIoZiwgbC1mKzEpKTtcclxuICB9XHJcblxyXG4gIGdldEhpdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oaXRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udGV4dHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0cztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0cyA9IHtcclxuICAgIGNvbnRleHRMZW5ndGg6IDcsXHJcbiAgICBoaXRzOiB0cnVlLFxyXG4gICAgY29udGV4dHM6IHRydWVcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihzdHJzLCBwYXR0ZXJuLCBwcm9wcykge1xyXG4gICAgdGhpcy5wcm9wcyA9IHtcclxuICAgICAgLi4uRmluZGVyLmRlZmF1bHRzLFxyXG4gICAgICAuLi5wcm9wc1xyXG4gICAgfTtcclxuICAgIHRoaXMuc3RycyA9IHN0cnM7XHJcbiAgICBjb25zdCBkYXRhID0gdGhpcy5tZXJnZShzdHJzKTtcclxuICAgIHRoaXMuaGl0cyA9IFtdO1xyXG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xyXG4gICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdGhpcy5sc3RyID0gdGhpcy5zdHIudG9Mb3dlckNhc2UoKTtcclxuICAgIGxldCBwID0gMDtcclxuICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgcCA9IHRoaXMubHN0ci5pbmRleE9mKHRoaXMucGF0dGVybiwgcCk7XHJcbiAgICAgIGlmKHA9PT0tMSkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYWRkSGl0cyhwKTtcclxuICAgICAgICB0aGlzLmFkZENvbnRleHQocCk7XHJcbiAgICAgICAgcCArPSB0aGlzLnBhdHRlcm4ubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ZpbmRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBGdWxsU2NyZWVuIGZyb20gJy4vRnVsbFNjcmVlbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGdWxsU2NyZWVuWCBleHRlbmRzIEZ1bGxTY3JlZW4ge1xyXG5cclxuXHRzdGF0aWMgYXZhaWxhYmxlKCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGVmTm9kZSA9ICQoKTtcclxuXHRzdGF0aWMgbm9kZSA9IEZ1bGxTY3JlZW5YLmRlZk5vZGU7XHJcblx0c3RhdGljIGRlZkhhbmRsZXIgPSAoKT0+IHVuZGVmaW5lZFxyXG5cdHN0YXRpYyBoYW5kbGVyID0gRnVsbFNjcmVlblguZGVmSGFuZGxlcjtcclxuXHRzdGF0aWMgY2xhc3NYID0gJ2ZiM2QtZnVsbHNjcmVlbngnO1xyXG5cdHN0YXRpYyBzdHlsZSA9ICQoYFxyXG5cdFx0PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxyXG4gICAgICAuJHtGdWxsU2NyZWVuWC5jbGFzc1h9IHtcclxuICAgICAgICBwb3NpdGlvbjogZml4ZWQgIWltcG9ydGFudDtcclxuXHRcdFx0XHRsZWZ0OiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgdG9wOiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICAgICAgICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcclxuXHRcdFx0XHR6LWluZGV4OiAyMTQ3NDgzNjQ3ICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0bWFyZ2luOiAwICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveCAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+XHJcblx0YC5mYjNkUUZpbHRlcigpKS5hcHBlbmRUbygnaGVhZCcpO1xyXG5cclxuXHRzdGF0aWMgYWN0aXZhdGVkKCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmF2YWlsYWJsZSgpPyBzdXBlci5hY3RpdmF0ZWQoKTogRnVsbFNjcmVlblgubm9kZS5oYXNDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xyXG5cdFx0aWYoc3VwZXIuYXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0c3VwZXIuYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRGdWxsU2NyZWVuWC5oYW5kbGVyID0gaGFuZGxlcjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZW1vdmVFdmVudExpc3RlbmVyKGVsZW1lbnQsIGhhbmRsZXIpIHtcclxuXHRcdGlmKHN1cGVyLmF2YWlsYWJsZSgpKSB7XHJcblx0XHRcdHN1cGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcik7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0RnVsbFNjcmVlblguaGFuZGxlciA9IEZ1bGxTY3JlZW5YLmRlZkhhbmRsZXI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVxdWVzdChlbGVtZW50KSB7XHJcblx0XHRpZihzdXBlci5hdmFpbGFibGUoKSkge1xyXG5cdFx0XHRzdXBlci5yZXF1ZXN0KGVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGlmKCFGdWxsU2NyZWVuWC5ub2RlLmhhc0NsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCkpIHtcclxuXHRcdFx0XHRGdWxsU2NyZWVuWC5ub2RlID0gJChlbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpO1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW5YLm5vZGUuYWRkQ2xhc3MoRnVsbFNjcmVlblguY2xhc3NYKTtcclxuXHRcdFx0XHRQcm9taXNlLnJlc29sdmUoKS50aGVuKEZ1bGxTY3JlZW5YLmhhbmRsZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY2FuY2VsKCkge1xyXG5cdFx0aWYoc3VwZXIuYXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0c3VwZXIuY2FuY2VsKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0aWYoRnVsbFNjcmVlblgubm9kZS5oYXNDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpKSB7XHJcblx0XHRcdFx0RnVsbFNjcmVlblgubm9kZS5yZW1vdmVDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpO1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW5YLm5vZGUgPSBGdWxsU2NyZWVuWC5kZWZOb2RlO1xyXG5cdFx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oRnVsbFNjcmVlblguaGFuZGxlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0Z1bGxTY3JlZW5YLmpzIiwiaW1wb3J0IHtQREZKU30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuXHJcblBERkpTLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gKHdpbmRvdy5QREZKU19MT0NBTEU/IFBERkpTX0xPQ0FMRTogR0xPQkFMX1BBVEhTKS5wZGZKc1dvcmtlcjtcclxuUERGSlMuY01hcFVybCA9ICh3aW5kb3cuUERGSlNfTE9DQUxFPyBQREZKU19MT0NBTEU6IEdMT0JBTF9QQVRIUykucGRmSnNDTWFwVXJsO1xyXG5QREZKUy5jTWFwUGFja2VkID0gdHJ1ZTtcclxuUERGSlMuZGlzYWJsZUF1dG9GZXRjaCA9IHRydWU7XHJcblBERkpTLmRpc2FibGVTdHJlYW0gPSB0cnVlO1xyXG5QREZKUy5kaXNhYmxlUmFuZ2UgPSBmYWxzZTtcclxuUERGSlMuaW1hZ2VSZXNvdXJjZXNQYXRoID0gJ2ltYWdlcy9wZGZqcy8nO1xyXG5QREZKUy5leHRlcm5hbExpbmtUYXJnZXQgPSBQREZKUy5MaW5rVGFyZ2V0LkJMQU5LO1xyXG5QREZKUy5kaXNhYmxlRm9udEZhY2UgPSB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGYge1xyXG5cclxuICBjb25zdHJ1Y3RvcihzcmMsIGxvYWRpbmdQcm9ncmVzcywgb3Blbk9wdGlvbnMpIHtcclxuICAgIHRoaXMuc3JjID0gVXRpbHMubm9ybWFsaXplVXJsKHNyYyk7XHJcbiAgICB0aGlzLmhhbmRsZXJRdWV1ZSA9IFtdO1xyXG4gICAgdGhpcy5wcm9ncmVzRGF0YSA9IHtsb2FkZWQ6IC0xLCB0b3RhbDogMX07XHJcbiAgICB0aGlzLmxvYWRpbmdQcm9ncmVzcyA9IGxvYWRpbmdQcm9ncmVzcztcclxuXHJcbiAgICB0aGlzLnRhc2sgPSBQREZKUy5nZXREb2N1bWVudCh7XHJcbiAgICAgIHVybDogdGhpcy5zcmMsXHJcbiAgICAgIHJhbmdlQ2h1bmtTaXplOiA1MTIqMTAyNCxcclxuICAgICAgY01hcFVybDogUERGSlMuY01hcFVybCxcclxuICAgICAgY01hcFBhY2tlZDogUERGSlMuY01hcFBhY2tlZCxcclxuICAgICAgZGlzYWJsZUF1dG9GZXRjaDogUERGSlMuZGlzYWJsZUF1dG9GZXRjaCxcclxuICAgICAgZGlzYWJsZVN0cmVhbTogUERGSlMuZGlzYWJsZVN0cmVhbSxcclxuICAgICAgZGlzYWJsZVJhbmdlOiBQREZKUy5kaXNhYmxlUmFuZ2UsXHJcbiAgICAgIGltYWdlUmVzb3VyY2VzUGF0aDogUERGSlMuaW1hZ2VSZXNvdXJjZXNQYXRoLFxyXG4gICAgICBleHRlcm5hbExpbmtUYXJnZXQ6IFBERkpTLmV4dGVybmFsTGlua1RhcmdldCxcclxuICAgICAgZGlzYWJsZUZvbnRGYWNlOiBQREZKUy5kaXNhYmxlRm9udEZhY2UsXHJcbiAgICAgIC4uLm9wZW5PcHRpb25zXHJcbiAgICB9KTtcclxuICAgIHRoaXMudGFzay5vblByb2dyZXNzID0gKGRhdGEpPT4ge1xyXG4gICAgICBpZih0aGlzLmxvYWRpbmdQcm9ncmVzcykge1xyXG4gICAgICAgIGxldCBjdXIgPSBNYXRoLmZsb29yKDEwMCpkYXRhLmxvYWRlZC9kYXRhLnRvdGFsKSxcclxuICAgICAgICAgICAgICBvbGQgPSBNYXRoLmZsb29yKDEwMCp0aGlzLnByb2dyZXNEYXRhLmxvYWRlZC90aGlzLnByb2dyZXNEYXRhLnRvdGFsKTtcclxuICAgICAgICBpZihjdXIhPT1vbGQpIHtcclxuICAgICAgICAgIGN1ciA9IGlzTmFOKGN1cik/IDA6IGN1cjtcclxuICAgICAgICAgIGN1ciA9IGN1cj4xMDA/IDEwMDogY3VyO1xyXG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MoY3VyKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnByb2dyZXNEYXRhID0gZGF0YTtcclxuICAgIH07XHJcbiAgICB0aGlzLnRhc2sucHJvbWlzZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgaWYoaGFuZGxlci5udW1QYWdlcz4xKSB7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwoW2hhbmRsZXIuZ2V0UGFnZSgxKSwgaGFuZGxlci5nZXRQYWdlKDIpXSkuXHJcbiAgICAgICAgdGhlbigocGFnZXMpPT4ge1xyXG4gICAgICAgICAgdGhpcy5pbml0KGhhbmRsZXIsIHBhZ2VzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmluaXQoaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH0pLlxyXG4gICAgY2F0Y2goKGUpPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICBpZih0aGlzLmVycm9ySGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGluaXQoaGFuZGxlciwgcGFnZXMpIHtcclxuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICBpZihwYWdlcykge1xyXG4gICAgICBjb25zdCBwMHMgPSBQZGYuZ2V0UGFnZVNpemUocGFnZXNbMF0pLCBwMXMgPSBQZGYuZ2V0UGFnZVNpemUocGFnZXNbMV0pO1xyXG4gICAgICB0aGlzLmRvdWJsZWRQYWdlcyA9IChwMHMud2lkdGgvcDBzLmhlaWdodCkvKHAxcy53aWR0aC9wMXMuaGVpZ2h0KTwwLjc1O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuZG91YmxlZFBhZ2VzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcclxuICAgIGZvcihsZXQgY2xiIG9mIHRoaXMuaGFuZGxlclF1ZXVlLnJldmVyc2UoKSkge1xyXG4gICAgICBkb25lID0gZG9uZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgICBjbGIoaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVR5cGUobikge1xyXG4gICAgcmV0dXJuICF0aGlzLmRvdWJsZWRQYWdlcyB8fCBuPT09MCB8fCBuPT09dGhpcy5nZXRQYWdlc051bSgpLTE/ICdmdWxsJzogKG4mMT8gJ2xlZnQnOiAncmlnaHQnKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2Uobikge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5nZXRQYWdlKHRoaXMuZG91YmxlZFBhZ2VzPyBNYXRoLmNlaWwobi8yKSsxOiBuKzEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGVzdGluYXRpb24oZGVzdCkge1xyXG4gICAgbGV0IGRlc3RQcm9taXNlO1xyXG4gICAgaWYodHlwZW9mIGRlc3Q9PT0nc3RyaW5nJykge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IHRoaXMuaGFuZGxlci5nZXREZXN0aW5hdGlvbihkZXN0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShkZXN0KTtcclxuICAgIH1cclxuICAgIGRlc3RQcm9taXNlID0gZGVzdFByb21pc2UuXHJcbiAgICAgIHRoZW4oKGRlc3QpPT4gdGhpcy5oYW5kbGVyLmdldFBhZ2VJbmRleChkZXN0WzBdKSkuXHJcbiAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmRvdWJsZWRQYWdlcz8gKG51bWJlcjwxPyBudW1iZXI6IDErMioobnVtYmVyLTEpKTogbnVtYmVyKS5cclxuICAgICAgY2F0Y2goKCk9PiBjb25zb2xlLmVycm9yKCdCYWQgYm9va21hcmsnKSk7XHJcbiAgICByZXR1cm4gZGVzdFByb21pc2U7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUuc3BsaWNlKDAsIHRoaXMuaGFuZGxlclF1ZXVlLmxlbmd0aCk7XHJcbiAgICBkZWxldGUgdGhpcy5oYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgc2V0TG9hZGluZ1Byb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBjbGI7XHJcbiAgfVxyXG5cclxuICBzZXRFcnJvckhhbmRsZXIoZWgpIHtcclxuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZWg7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlc051bSgpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXI/ICh0aGlzLmRvdWJsZWRQYWdlcz8gMioodGhpcy5oYW5kbGVyLm51bVBhZ2VzLTEpOiB0aGlzLmhhbmRsZXIubnVtUGFnZXMpOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0UGFnZVNpemUocGFnZSkge1xyXG4gICAgY29uc3QgeCA9IHBhZ2Uudmlld1syXS1wYWdlLnZpZXdbMF0sIHkgPSBwYWdlLnZpZXdbM10tcGFnZS52aWV3WzFdLCBhID0gcGFnZS5yb3RhdGUqTWF0aC5QSS8xODA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogTWF0aC5hYnMoeCpNYXRoLmNvcyhhKS15Kk1hdGguc2luKGEpKSxcclxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyh4Kk1hdGguc2luKGEpK3kqTWF0aC5jb3MoYSkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbi8vICAgaWYocGFnZXM+MSkge1xyXG4vLyAgIGhhbmRsZXIuZ2V0UGFnZSgyKS5cclxuLy8gICB0aGVuKChwYWdlKT0+IHtcclxuLy8gICAgIGNvbnN0IHNpemUxID0gUGRmLmdldFBhZ2VTaXplKHBhZ2UpO1xyXG4vLyAgICAgdGhpcy5wcm9wcy5kb3VibGVkUGFnZXMgPSAyKnNpemUwLndpZHRoPT09c2l6ZTEud2lkdGg7XHJcbi8vICAgICB0aGlzLnJlYWR5KCk7XHJcbi8vICAgfSkuXHJcbi8vICAgY2F0Y2goKCk9PiB0aGlzLnJlYWR5KCkpO1xyXG4vLyB9XHJcbi8vIGVsc2Uge1xyXG5cclxuICBnZXRIYW5kbGVyKGNsYikge1xyXG4gICAgaWYodGhpcy5oYW5kbGVyKSB7XHJcbiAgICAgIGNsYih0aGlzLmhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuaGFuZGxlclF1ZXVlLnB1c2goY2xiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1BkZi5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVFdmVudENvbnZlcnRlckZzIHtcclxuXHJcbiAgc3RhdGljIG9iamVjdHNUZXN0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiBvYmplY3QxICYmIG9iamVjdDI/IG9iamVjdDEub2JqZWN0PT09b2JqZWN0Mi5vYmplY3Q6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG9iamVjdHNBbmRGYWNlc1Rlc3Qob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIG9iamVjdDEgJiYgb2JqZWN0Mj8gb2JqZWN0MS5vYmplY3Q9PT1vYmplY3QyLm9iamVjdCAmJiBvYmplY3QxLmZhY2UubWF0ZXJpYWxJbmRleD09PW9iamVjdDIuZmFjZS5tYXRlcmlhbEluZGV4OiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbFdvcmxkLCB0ZXN0PVRocmVlRXZlbnRDb252ZXJ0ZXJGcy5vYmplY3RzQW5kRmFjZXNUZXN0KSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbFdvcmxkO1xyXG4gICAgdGhpcy5jb29yZHMgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSB0aGlzLnZpc3VhbC5yYXljYXN0ZXI7XHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMudmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMudGhyZWVzID0gW107XHJcbiAgICB0aGlzLnRlc3QgPSB0ZXN0O1xyXG4gIH1cclxuXHJcbiAgYWRkVGhyZWUodGhyZWUpIHtcclxuICAgIHRoaXMudGhyZWVzLnB1c2godGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlVGhyZWUodGhyZWUpIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLnRocmVlcy5pbmRleE9mKHRocmVlKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMudGhyZWVzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldE9iamVjdChlKSB7XHJcbiAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuICAgIGNvbnN0IGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMudGhyZWVzKTtcclxuICAgIHJldHVybiBpbnRlcnNlY3RzWzBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZVV0aWxzIHtcclxuXHJcbiAgc3RhdGljIHZlcnRpY2VzMlVWcyh2ZXJ0aWNlcywgaW5kZWNlcywgZmlyc3QsIGxhc3QsIGNvbnZlckNsYikge1xyXG4gICAgY29uc3QgciA9IFtdO1xyXG4gICAgZm9yKGxldCBpID0gZmlyc3Q7IGk8bGFzdDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHZpcyA9IFtpbmRlY2VzW2ldLmEsaW5kZWNlc1tpXS5iLGluZGVjZXNbaV0uY107XHJcbiAgICAgIGZvcihsZXQgaiA9IDA7IGo8dmlzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgaWYoIXJbdmlzW2pdXSkge1xyXG4gICAgICAgICAgclt2aXNbal1dID0gY29udmVyQ2xiKHZlcnRpY2VzW3Zpc1tqXV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUZhY2VWZXJ0ZXhVdnMoZ2VvbWV0cnksIGZhY2VzKSB7XHJcbiAgICBjb25zdCB1dnMgPSBbXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIDAsIGZhY2VzWzBdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueCwgMS1wLnopKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMF0sIGZhY2VzWzFdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCAxLXAueikpLFxyXG4gICAgICAgICAgICAgICAgVGhyZWVVdGlscy52ZXJ0aWNlczJVVnMoZ2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LmZhY2VzLCBmYWNlc1sxXSwgZmFjZXNbMl0sIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIocC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMl0sIGZhY2VzWzNdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbM10sIGZhY2VzWzRdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueiwgcC55KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzRdLCBnZW9tZXRyeS5mYWNlcy5sZW5ndGgsIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIoMS1wLnosIHAueSkpXHJcbiAgICBdO1xyXG5cclxuICAgIGxldCB1dnNpID0gMDtcclxuICAgIGZvcihsZXQgaSA9IDA7IGk8Z2VvbWV0cnkuZmFjZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgdXZzaSArPSBmYWNlc1t1dnNpXSA9PT0gaTtcclxuICAgICAgY29uc3QgZiA9IGdlb21ldHJ5LmZhY2VzW2ldO1xyXG4gICAgICBmLm1hdGVyaWFsSW5kZXggPSB1dnNpO1xyXG4gICAgICBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldID0gW3V2c1t1dnNpXVtmLmFdLCB1dnNbdXZzaV1bZi5iXSwgdXZzW3V2c2ldW2YuY11dO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZU1hcmtlcihwLCBjLCBzaXplKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoc2l6ZSksIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiBjIH0pKTtcclxuICAgIG1hcmtlci5wb3NpdGlvbi5zZXQocC54LHAueSxwLnopO1xyXG4gICAgcmV0dXJuIG1hcmtlcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmaW5kVXZUcmlzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHBzKSB7XHJcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IGk9Zmlyc3Q7IGk8bGFzdCAmJiAhZm91bmQ7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHRyaSA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMF1baV07XHJcbiAgICAgICAgaWYoQmFzZU1hdGhVdGlscy5pc0luc2lkZUNvbnZQb2x5KHRyaSwgcCkpIHtcclxuICAgICAgICAgIHJlcy5wdXNoKHtcclxuICAgICAgICAgICAgY29lZnM6IEJhc2VNYXRoVXRpbHMuY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCksXHJcbiAgICAgICAgICAgIGlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZighZm91bmQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdCYWQgcG9pbnQnKTtcclxuICAgICAgICByZXMucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmRJbnRlcm5hbFZlcnRpY2VzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yKGxldCBpPWZpcnN0OyBpPGxhc3Q7ICsraSkge1xyXG4gICAgICBjb25zdCB0cmkgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldLCBmID0gZ2VvbWV0cnkuZmFjZXNbaV0sIHZzID0gW2YuYSwgZi5iLCBmLmNdO1xyXG4gICAgICBmb3IobGV0IGo9MDsgajx0cmkubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZihyZXNbdnNbal1dPT09dW5kZWZpbmVkICYmIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHBzLCB0cmlbal0pKSB7XHJcbiAgICAgICAgICByZXNbdnNbal1dID0ge1xyXG4gICAgICAgICAgICBwOiB0cmlbal0sXHJcbiAgICAgICAgICAgIGk6IHZzW2pdLFxyXG4gICAgICAgICAgICBuOiBmLnZlcnRleE5vcm1hbHNbal1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXMpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsImltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vQ29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIG5hbWUpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSAhdGhpcy52aXNpYmxlO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGZpcmVDaGFuZ2UoKSB7XHJcbiAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUodGhpcy5uYW1lLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudmlzaWJsZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvV2lkZ2V0Q29udHJvbGxlci5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXJnZXQge1xyXG5cclxuICBzdGF0aWMgdGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MS50YXJnZXQ9PT1vYmplY3QyLnRhcmdldDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwiaW1wb3J0IHskLCB0cn0gZnJvbSAnLi9qcy9saWJzJztcclxuaW1wb3J0IERldGVjdG9yIGZyb20gJ0RldGVjdG9yJztcclxuaW1wb3J0IFZpc3VhbFdvcmxkIGZyb20gJ1Zpc3VhbFdvcmxkJztcclxuaW1wb3J0IFBkZkxpbmtzSGFuZGxlciBmcm9tICcuL2pzL2NsYXNzZXMvUGRmTGlua3NIYW5kbGVyJztcclxuaW1wb3J0IEJvb2sgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2snO1xyXG5pbXBvcnQgQm9va1ZpZXcgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tWaWV3JztcclxuaW1wb3J0IEJvb2tDb250cm9sbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9Cb29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBQZGZCb29rUHJvcHNCdWlsZGVyIGZyb20gJy4vanMvY2xhc3Nlcy9QZGZCb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IENsYkJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0NsYkJvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgTG9hZGluZ0NvbnRyb2xsZXIgZnJvbSAnTG9hZGluZ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgVXNlck1lc3NhZ2VDb250cm9sbGVyIGZyb20gJ1VzZXJNZXNzYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnU2VhcmNoJztcclxuaW1wb3J0IEJvb2ttYXJrcyBmcm9tICdCb29rbWFya3MnO1xyXG5pbXBvcnQgVGh1bWJuYWlscyBmcm9tICdUaHVtYm5haWxzJztcclxuaW1wb3J0IFRvY0NvbnRyb2xsZXIgZnJvbSAnLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgU2hhcmVDb250cm9sbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9TaGFyZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgQm9va1ByaW50ZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyJztcclxuaW1wb3J0IEF1dG9OYXZpZ2F0b3IgZnJvbSAnLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3InO1xyXG5pbXBvcnQgU291bmRzRW52aXJvbWVudCBmcm9tICcuL2pzL2NsYXNzZXMvU291bmRzRW52aXJvbWVudCc7XHJcbmltcG9ydCBGdWxsU2NyZWVuWCBmcm9tICdGdWxsU2NyZWVuWCc7XHJcblxyXG4kLmZuLkZsaXBCb29rID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIGNvbnN0IHNjZW5lID0ge1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgaWYodGhpcy5yZWFkeSkge1xyXG4gICAgICAgICFzY2VuZS5wZGZMaW5rc0hhbmRsZXIgfHwgc2NlbmUucGRmTGlua3NIYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucGRmTGlua3NIYW5kbGVyO1xyXG4gICAgICAgIHNjZW5lLnNvdW5kcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnNvdW5kcztcclxuICAgICAgICBzY2VuZS51c2VyTWVzc2FnZUN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS51c2VyTWVzc2FnZUN0cmw7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybC5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnRvY0N0cmw7XHJcbiAgICAgICAgc2NlbmUudGh1bWJuYWlscy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnRodW1ibmFpbHM7XHJcbiAgICAgICAgIXNjZW5lLmJvb2ttYXJrcyB8fCBzY2VuZS5ib29rbWFya3MuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rbWFya3M7XHJcbiAgICAgICAgc2NlbmUuc2hhcmVDdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuc2hhcmVDdHJsO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5jdHJsO1xyXG4gICAgICAgIHNjZW5lLmJvb2tQcmludGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuYm9va1ByaW50ZXI7XHJcbiAgICAgICAgc2NlbmUuYm9vay5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmJvb2s7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucHJvcHNCdWlsZGVyO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rQnVpbGRlcjtcclxuICAgICAgICBzY2VuZS52aXN1YWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS52aXN1YWw7XHJcbiAgICAgICAgc2NlbmUudmlldy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnZpZXc7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmRpc3Bvc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlzcG9zZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIG9wdGlvbnMgPSB7Li4ub3B0aW9uc307XHJcbiAgY29uc3QgcGFyZW50Q29udGFpbmVyID0gdGhpcy5sZW5ndGg/IHRoaXNbMF06ICQoJzxkaXY+JykuYXBwZW5kVG8oJ2JvZHknKTtcclxuICBpZihvcHRpb25zLmFjdGl2YXRlRnVsbFNjcmVlbikge1xyXG4gICAgRnVsbFNjcmVlblgucmVxdWVzdChwYXJlbnRDb250YWluZXIpO1xyXG4gIH1cclxuICBzY2VuZS52aWV3ID0gbmV3IEJvb2tWaWV3KHBhcmVudENvbnRhaW5lciwgKCk9PiB7XHJcbiAgICBpZighRGV0ZWN0b3Iud2ViZ2wpIHtcclxuICAgICAgRGV0ZWN0b3IuYWRkR2V0V2ViR0xNZXNzYWdlKHtwYXJlbnQ6IHNjZW5lLnZpZXcuZ2V0VmlldygpfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2NlbmUubG9hZGluZ0N0cmwgPSBuZXcgTG9hZGluZ0NvbnRyb2xsZXIoc2NlbmUudmlldywgdHJ1ZSwgKHByb2dyZXNzKT0+IHByb2dyZXNzPT09MD8gdHIoJ1BsZWFzZSB3YWl0Li4uIHRoZSBBcHBsaWNhdGlvbiBpcyBMb2FkaW5nJyk6IHRyKCdQREYgaXMgTG9hZGluZzonKSsnICcrcHJvZ3Jlc3MrJyUnKTtcclxuICAgICAgc2NlbmUudXNlck1lc3NhZ2VDdHJsID0gbmV3IFVzZXJNZXNzYWdlQ29udHJvbGxlcihzY2VuZS52aWV3KTtcclxuICAgICAgc2NlbmUudmlzdWFsID0gbmV3IFZpc3VhbFdvcmxkKHNjZW5lLnZpZXcuZ2V0Q29udGFpbmVyKCkub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldywgc2NlbmUudmlldy5nZXRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCBzY2VuZS52aWV3LmdldFZpZXcoKSk7XHJcbiAgICAgIGlmKG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgbmV3IENsYkJvb2tQcm9wc0J1aWxkZXIoc2NlbmUudmlzdWFsLCAoKT0+ICh7dHlwZTogJ2JsYW5rJ30pLCAxLCAocHJvcHMpPT4ge1xyXG4gICAgICAgICAgcHJvcHMgPSBvcHRpb25zLnByb3BlcnRpZXNDYWxsYmFjayhwcm9wcyk7XHJcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IFtdO1xyXG4gICAgICAgICAgaWYocHJvcHMuYmFja2dyb3VuZENvbG9yIT09JycpIHtcclxuICAgICAgICAgICAgc3R5bGUucHVzaCgnYmFja2dyb3VuZC1jb2xvcjojJytuZXcgVEhSRUUuQ29sb3IocHJvcHMuYmFja2dyb3VuZENvbG9yKS5nZXRIZXhTdHJpbmcoKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihwcm9wcy5iYWNrZ3JvdW5kSW1hZ2UhPT0nJykge1xyXG4gICAgICAgICAgICBzdHlsZS5wdXNoKCdiYWNrZ3JvdW5kLWltYWdlOnVybChcXCcnK3Byb3BzLmJhY2tncm91bmRJbWFnZSsnXFwnKScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYocHJvcHMuYmFja2dyb3VuZFN0eWxlIT09JycpIHtcclxuICAgICAgICAgICAgc3R5bGUucHVzaChwcm9wcy5iYWNrZ3JvdW5kU3R5bGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoc3R5bGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLnZpZXcuZ2V0VmlldygpLmF0dHIoJ3N0eWxlJywgc3R5bGUuam9pbignOycpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBzY2VuZS5ib29rQnVpbGRlciA9IChwcm9wcywgc2hlZXRzLCBwYWdlQ2FsbGJhY2spPT4ge1xyXG4gICAgICAgIHByb3BzLmNzc0xheWVyUHJvcHMgPSB7XHJcbiAgICAgICAgICAuLi5wcm9wcy5jc3NMYXllclByb3BzLFxyXG4gICAgICAgICAgc2NlbmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmKG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICBwcm9wcyA9IG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NlbmUuYm9vayA9IG5ldyBCb29rKHNjZW5lLnZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKTtcclxuICAgICAgICBzY2VuZS5ib29rUHJpbnRlciA9IG5ldyBCb29rUHJpbnRlcihzY2VuZS52aXN1YWwsIHNjZW5lLmJvb2ssIChvcHRpb25zLnRlbXBsYXRlIHx8IHt9KS5wcmludFN0eWxlKTtcclxuICAgICAgICBzY2VuZS5sb2FkaW5nQ3RybC5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmxvYWRpbmdDdHJsO1xyXG4gICAgICAgIHNjZW5lLmN0cmwgPSBuZXcgQm9va0NvbnRyb2xsZXIoc2NlbmUuYm9vaywgc2NlbmUudmlldywgb3B0aW9ucy5jb250cm9sc1Byb3BzKTtcclxuICAgICAgICBzY2VuZS5ib29rLnNldEluamVjdG9yKCh3KT0+IHtcclxuICAgICAgICAgIHcualF1ZXJ5ID0gdy4kID0gJDtcclxuICAgICAgICAgIHcuYm9vayA9IHNjZW5lLmJvb2s7XHJcbiAgICAgICAgICB3LmJvb2tDdHJsID0gc2NlbmUuY3RybDtcclxuICAgICAgICAgIGlmKHByb3BzLmluamVjdG9yKSB7XHJcbiAgICAgICAgICAgIHByb3BzLmluamVjdG9yKHcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS5jdHJsKTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFByaW50ZXIoc2NlbmUuYm9va1ByaW50ZXIpO1xyXG4gICAgICAgIGNvbnN0IHRlc3QgPSBwYWdlQ2FsbGJhY2soMCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnRodW1ibmFpbHMgPSBuZXcgVGh1bWJuYWlscyhzY2VuZS52aXN1YWwsIHNjZW5lLnZpZXcuZ2V0VGh1bWJuYWlsc1ZpZXcoKSwgcGFnZUNhbGxiYWNrLCBzY2VuZS5ib29rLmdldFBhZ2VzKCksIHtrV3RvSDogcHJvcHMud2lkdGgvcHJvcHMuaGVpZ2h0fSk7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybCA9IG5ldyBUb2NDb250cm9sbGVyKHNjZW5lLnZpZXcsIHNjZW5lLmN0cmwpO1xyXG4gICAgICAgIHNjZW5lLnRvY0N0cmwuc2V0VGh1bWJuYWlscyhzY2VuZS50aHVtYm5haWxzKTtcclxuICAgICAgICBpZihvcHRpb25zLm91dGxpbmUpIHtcclxuICAgICAgICAgIHNjZW5lLmJvb2ttYXJrcyA9IG5ldyBCb29rbWFya3Moc2NlbmUudmlldy5nZXRCb29rbWFya3NWaWV3KCksIG9wdGlvbnMub3V0bGluZSk7XHJcbiAgICAgICAgICBzY2VuZS50b2NDdHJsLnNldEJvb2ttYXJrcyhzY2VuZS5ib29rbWFya3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5jdHJsLnNldFRvY0N0cmwoc2NlbmUudG9jQ3RybCk7XHJcbiAgICAgICAgc2NlbmUudmlldy5hZGRIYW5kbGVyKHNjZW5lLnRvY0N0cmwpO1xyXG5cclxuICAgICAgICBpZih0ZXN0LnR5cGU9PT0ncGRmJykge1xyXG4gICAgICAgICAgc2NlbmUuc2VhcmNoID0gbmV3IFNlYXJjaChzY2VuZS52aWV3LmdldFNlYXJjaFZpZXcoKSwgc2NlbmUuYm9vay5nZXRQYWdlcygpKTtcclxuICAgICAgICAgIHNjZW5lLnNlYXJjaC5vblF1ZXJ5ID0gc2NlbmUuYm9vay5zZXRRdWVyeS5iaW5kKHNjZW5lLmJvb2spO1xyXG4gICAgICAgICAgc2NlbmUuYm9vay5hZGRFdmVudExpc3RlbmVyKCdzZWFyY2hSZXN1bHRzJywgKGUpPT4ge1xyXG4gICAgICAgICAgICBzY2VuZS5zZWFyY2guc2V0UmVzdWx0cyhlLnJlc3VsdHMsIGUubGFzdFBhZ2UpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzY2VuZS50b2NDdHJsLnNldFNlYXJjaChzY2VuZS5zZWFyY2gpO1xyXG4gICAgICAgICAgc2NlbmUuY3RybC5zZXRUb2NDdHJsKHNjZW5lLnRvY0N0cmwpO1xyXG5cclxuICAgICAgICAgIHNjZW5lLnBkZkxpbmtzSGFuZGxlciA9IG5ldyBQZGZMaW5rc0hhbmRsZXIodGVzdC5zcmMsIHNjZW5lLmN0cmwsIHNjZW5lLnZpc3VhbC5lbGVtZW50KTtcclxuICAgICAgICAgIHNjZW5lLmJvb2suYWRkRXZlbnRMaXN0ZW5lcigncGRmQW5ub3RhdGlvbicsIHNjZW5lLnBkZkxpbmtzSGFuZGxlci5oYW5kbGVFdmVudC5iaW5kKHNjZW5lLnBkZkxpbmtzSGFuZGxlcikpO1xyXG4gICAgICAgICAgaWYoIXNjZW5lLmJvb2ttYXJrcykge1xyXG4gICAgICAgICAgICB0ZXN0LnNyYy5nZXRIYW5kbGVyKChoYW5kbGVyKT0+IHtcclxuICAgICAgICAgICAgICBoYW5kbGVyLmdldE91dGxpbmUoKS5cclxuICAgICAgICAgICAgICAgIHRoZW4oKG91dGxpbmUpPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZihvdXRsaW5lICYmIG91dGxpbmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUuYm9va21hcmtzID0gbmV3IEJvb2ttYXJrcyhzY2VuZS52aWV3LmdldEJvb2ttYXJrc1ZpZXcoKSwgb3V0bGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUudG9jQ3RybC5zZXRCb29rbWFya3Moc2NlbmUuYm9va21hcmtzLCB0ZXN0LnNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUuY3RybC5zZXRUb2NDdHJsKHNjZW5lLnRvY0N0cmwpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihvcHRpb25zLnBkZkxpbmtzICYmIG9wdGlvbnMucGRmTGlua3MuaGFuZGxlcikge1xyXG4gICAgICAgICAgICBzY2VuZS5wZGZMaW5rc0hhbmRsZXIuc2V0SGFuZGxlcihvcHRpb25zLnBkZkxpbmtzLmhhbmRsZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NlbmUuc291bmRzID0gbmV3IFNvdW5kc0Vudmlyb21lbnQob3B0aW9ucy50ZW1wbGF0ZSk7XHJcbiAgICAgICAgc2NlbmUuY3RybC5zZXRTb3VuZHMoc2NlbmUuc291bmRzKTtcclxuICAgICAgICBzY2VuZS5zb3VuZHMuc3Vic2NyaWJlRmxpcHMoc2NlbmUuY3RybCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBhdXRvTmF2aWdhdG9yID0gbmV3IEF1dG9OYXZpZ2F0b3Ioc2NlbmUudmlzdWFsLCBzY2VuZS5jdHJsLCBvcHRpb25zLmF1dG9OYXZpZ2F0aW9uKTtcclxuICAgICAgICBzY2VuZS5zaGFyZUN0cmwgPSBuZXcgU2hhcmVDb250cm9sbGVyKHNjZW5lLnZpZXcsIHNjZW5lLmN0cmwsIG9wdGlvbnMuc2hhcmVMaW5rQnVpbGRlcj8gb3B0aW9ucy5zaGFyZUxpbmtCdWlsZGVyOiAocGFnZSk9PiB7XHJcbiAgICAgICAgICBsZXQgdTtcclxuICAgICAgICAgIGlmKG5ldyBSZWdFeHAoJyhbPyZdKScrYXV0b05hdmlnYXRvci51cmxQYXJhbSsnPVswLTldKycpLnRlc3QobG9jYXRpb24uaHJlZikpIHtcclxuICAgICAgICAgICAgdSA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZShuZXcgUmVnRXhwKCcoWz8mXSknK2F1dG9OYXZpZ2F0b3IudXJsUGFyYW0rJz1bMC05XSsnKSwgJyQxJythdXRvTmF2aWdhdG9yLnVybFBhcmFtKyc9JytwYWdlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1ID0gbG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdKyh+bG9jYXRpb24uaHJlZi5pbmRleE9mKCc/Jyk/ICcmJzogJz8nKSthdXRvTmF2aWdhdG9yLnVybFBhcmFtKyc9JytwYWdlK2xvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFNoYXJlQ3RybChzY2VuZS5zaGFyZUN0cmwpO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS5zaGFyZUN0cmwpO1xyXG4gICAgICAgIGF1dG9OYXZpZ2F0b3IuZGlzcG9zZSgpO1xyXG4gICAgICAgIGlmKG9wdGlvbnMucmVhZHkpIHtcclxuICAgICAgICAgIG9wdGlvbnMucmVhZHkoc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5jdHJsLnJlYWR5KHNjZW5lKTtcclxuICAgICAgICBpZihzY2VuZS5wZW5kaW5nRGlzcG9zZSkge1xyXG4gICAgICAgICAgc2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgY29uc3Qgb25FcnJvciA9IChlKT0+IHtcclxuICAgICAgICAhc2NlbmUubG9hZGluZ0N0cmwgfHwgc2NlbmUubG9hZGluZ0N0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5sb2FkaW5nQ3RybDtcclxuICAgICAgICBzY2VuZS51c2VyTWVzc2FnZUN0cmwuc2V0RXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfTtcclxuICAgICAgaWYob3B0aW9ucy5wZGYpIHtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgUGRmQm9va1Byb3BzQnVpbGRlcihvcHRpb25zLnBkZiwgc2NlbmUuYm9va0J1aWxkZXIsIG9wdGlvbnMuYm9va1N0eWxlLCBvcHRpb25zLnBkZk9wZW5PcHRpb25zKTtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIucGRmLnNldExvYWRpbmdQcm9ncmVzc0NsYihzY2VuZS5sb2FkaW5nQ3RybC5zZXRQcm9ncmVzcy5iaW5kKHNjZW5lLmxvYWRpbmdDdHJsKSk7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLnBkZi5zZXRFcnJvckhhbmRsZXIob3B0aW9ucy5lcnJvciB8fCBvbkVycm9yKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG9wdGlvbnMucGFnZUNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYob3B0aW9ucy5vblBhZ2VDYWxsYmFja0Vycm9yKSB7XHJcbiAgICAgICAgICBvcHRpb25zLm9uUGFnZUNhbGxiYWNrRXJyb3IucHVzaChvcHRpb25zLmVycm9yIHx8IG9uRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgQ2xiQm9va1Byb3BzQnVpbGRlcihzY2VuZS52aXN1YWwsIG9wdGlvbnMucGFnZUNhbGxiYWNrLCBvcHRpb25zLnBhZ2VzLCBzY2VuZS5ib29rQnVpbGRlciwgb3B0aW9ucy5ib29rU3R5bGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNjZW5lLnByb3BzQnVpbGRlciA9IG5ldyBDbGJCb29rUHJvcHNCdWlsZGVyKHNjZW5lLnZpc3VhbCwgQm9vay5wYWdlQ2FsbGJhY2ssIDYsIHNjZW5lLmJvb2tCdWlsZGVyLCBvcHRpb25zLmJvb2tTdHlsZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBvcHRpb25zLnRlbXBsYXRlKTtcclxuICByZXR1cm4gc2NlbmU7XHJcbn1cclxuXHJcbiQoKCk9PiB7XHJcbiAgbGV0IGNvbnRhaW5lcnMgPSAkKCcuZmxpcC1ib29rLWNvbnRhaW5lcicpO1xyXG4gIGZvcihsZXQgaSA9IDA7IGk8Y29udGFpbmVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgY29uc3QgakNvbnRhaW5lciA9ICQoY29udGFpbmVyc1tpXSksIHNyYyA9IGpDb250YWluZXIuYXR0cignc3JjJyk7XHJcbiAgICBpZighIXNyYykge1xyXG4gICAgICBqQ29udGFpbmVyLkZsaXBCb29rKHtwZGY6IHNyY30pO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG53aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSAkO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9pbmRleC5qcyIsImlmICghQXJyYXkucHJvdG90eXBlLmZpbGwpIHtcclxuICBBcnJheS5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggMS0yLlxyXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgTyA9IE9iamVjdCh0aGlzKTtcclxuXHJcbiAgICAvLyDQqNCw0LPQuCAzLTUuXHJcbiAgICB2YXIgbGVuID0gTy5sZW5ndGggPj4+IDA7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggNi03LlxyXG4gICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzWzFdO1xyXG4gICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBzdGFydCA+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQsyA4LlxyXG4gICAgdmFyIGsgPSByZWxhdGl2ZVN0YXJ0IDwgMCA/XHJcbiAgICAgIE1hdGgubWF4KGxlbiArIHJlbGF0aXZlU3RhcnQsIDApIDpcclxuICAgICAgTWF0aC5taW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcclxuXHJcbiAgICAvLyDQqNCw0LPQuCA5LTEwLlxyXG4gICAgdmFyIGVuZCA9IGFyZ3VtZW50c1syXTtcclxuICAgIHZhciByZWxhdGl2ZUVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID9cclxuICAgICAgbGVuIDogZW5kID4+IDA7XHJcblxyXG4gICAgLy8g0KjQsNCzIDExLlxyXG4gICAgdmFyIGZpbmFsID0gcmVsYXRpdmVFbmQgPCAwID9cclxuICAgICAgTWF0aC5tYXgobGVuICsgcmVsYXRpdmVFbmQsIDApIDpcclxuICAgICAgTWF0aC5taW4ocmVsYXRpdmVFbmQsIGxlbik7XHJcblxyXG4gICAgLy8g0KjQsNCzIDEyLlxyXG4gICAgd2hpbGUgKGsgPCBmaW5hbCkge1xyXG4gICAgICBPW2tdID0gdmFsdWU7XHJcbiAgICAgIGsrKztcclxuICAgIH1cclxuXHJcbiAgICAvLyDQqNCw0LMgMTMuXHJcbiAgICByZXR1cm4gTztcclxuICB9O1xyXG59XHJcblxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2ZpbmQnLCB7XHJcbiAgICB2YWx1ZTogZnVuY3Rpb24ocHJlZGljYXRlKSB7XHJcbiAgICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maW5kIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgIH1cclxuICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgIH1cclxuICAgICB2YXIgbGlzdCA9IE9iamVjdCh0aGlzKTtcclxuICAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XHJcbiAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XHJcbiAgICAgdmFyIHZhbHVlO1xyXG5cclxuICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICB2YWx1ZSA9IGxpc3RbaV07XHJcbiAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XHJcbiAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgIH1cclxuICAgICB9XHJcbiAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xyXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZEluZGV4IGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG4gICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XHJcbiAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcclxuICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhbHVlID0gbGlzdFtpXTtcclxuICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xyXG4gICAgICAgIHJldHVybiBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfTtcclxufVxyXG5cclxuaWYgKCFPYmplY3QudmFsdWVzKSB7XHJcblx0T2JqZWN0LnZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTykubWFwKChuYW1lKT0+T1tuYW1lXSkgfHwgW107XHJcblx0fTtcclxufVxyXG5cclxuaWYoIVJlZ0V4cC5lc2NhcGUpIHtcclxuICBSZWdFeHAuZXNjYXBlID0gZnVuY3Rpb24ocykge1xyXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYoIVN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCkge1xyXG4gIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IGZ1bmN0aW9uKHNlYXJjaCwgcmVwbGFjZSkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKFJlZ0V4cC5lc2NhcGUoc2VhcmNoKSwgJ2cnKSwgcmVwbGFjZSk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYoIVN0cmluZy5wcm90b3R5cGUuZmIzZFFGaWx0ZXIpIHtcclxuICBTdHJpbmcucHJvdG90eXBlLmZiM2RRRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oXFxufFxcdHwgICkvZywgJycpO1xyXG4gIH07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL3BvbHlmaWxsLmpzIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9OYXZpZ2F0b3Ige1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBib29rQ3RybCwgcHJvcHM9e30pIHtcclxuICAgIHByb3BzID0ge1xyXG4gICAgICAuLi5wcm9wcyxcclxuICAgICAgdXJsUGFyYW06IHByb3BzLnVybFBhcmFtIHx8ICdmYjNkLXBhZ2UnLFxyXG4gICAgICBuYXZpZ2F0ZXM6IHByb3BzLm5hdmlnYXRlcz09PXVuZGVmaW5lZD8gMTogcHJvcHMubmF2aWdhdGVzLFxyXG4gICAgICBwYWdlTjogcHJvcHMucGFnZU4gfHwgMFxyXG4gICAgfTtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLmJvb2tDdHJsID0gYm9va0N0cmw7XHJcbiAgICB0aGlzLnVybFBhcmFtID0gcHJvcHMudXJsUGFyYW07XHJcbiAgICB0aGlzLnBhZ2VOID0gcHJvcHMucGFnZU47XHJcbiAgICB0aGlzLnduZCA9IGNvbnRleHQud25kO1xyXG5cclxuICAgIHRoaXMud25kLmZiM2QgPSB7XHJcbiAgICAgIC4uLnRoaXMud25kLmZiM2RcclxuICAgIH07XHJcbiAgICB0aGlzLnduZC5mYjNkLm5hdmlnYXRvciA9IHtcclxuICAgICAgLi4udGhpcy53bmQuZmIzZC5uYXZpZ2F0b3JcclxuICAgIH07XHJcbiAgICB0aGlzLm5hdmlnYXRvciA9IHRoaXMud25kLmZiM2QubmF2aWdhdG9yW3RoaXMudXJsUGFyYW1dID0ge1xyXG4gICAgICAuLi50aGlzLnduZC5mYjNkLm5hdmlnYXRvclt0aGlzLnVybFBhcmFtXVxyXG4gICAgfTtcclxuICAgIHRoaXMubmF2aWdhdG9yLmluc3RhbmNlcyA9ICh0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXMgfHwgMCkrMTtcclxuXHJcbiAgICBpZih0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXM8PXRoaXMucHJvcHMubmF2aWdhdGVzKSB7XHJcbiAgICAgIHRoaXMuYm9va0N0cmwuZ29Ub1BhZ2UodGhpcy5nZXRQYWdlTnVtYmVyKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSwgdXJsKSB7XHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgIH1cclxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcclxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnWz8mXScgKyBuYW1lICsgJyg9KFteXSopfCZ8I3wkKScpLFxyXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcclxuICAgIGlmICghcmVzdWx0cykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAoIXJlc3VsdHNbMl0pIHJldHVybiAnJztcclxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlTnVtYmVyKCkge1xyXG4gICAgbGV0IG51bWJlciA9IHBhcnNlSW50KHRoaXMucGFnZU4pO1xyXG4gICAgaWYoaXNOYU4obnVtYmVyKXx8bnVtYmVyPT09MCkge1xyXG4gICAgICBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckJ5TmFtZSh0aGlzLnVybFBhcmFtKTtcclxuICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyKTtcclxuICAgICAgaWYoaXNOYU4obnVtYmVyKSkge1xyXG4gICAgICAgIG51bWJlciA9IDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudW1iZXItMTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQXV0b05hdmlnYXRvci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgcCwgaGlkZGVuPWZhbHNlKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgYmFja1NpemU6IDIqcC5jb3Zlci5kZXB0aCtwLnNoZWV0cypwLnBhZ2UuZGVwdGhcclxuICAgIH07XHJcbiAgICB0aGlzLk9aID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO1xyXG4gICAgdGhpcy5iYWNrRyA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgwLjAwMSwgdGhpcy5wLmJhY2tTaXplLCBwLmNvdmVyLmhlaWdodCk7XHJcblxyXG4gICAgLy8gY29uc3QgY29sb3IgPSB0aGlzLnAuY292ZXIuc2lkZT09PSdjb2xvcic/IHtjb2xvcjogcC5jb3Zlci5jb2xvcn06IHtcclxuICAgIC8vICAgY29sb3I6IHAuY292ZXIuY29sb3IsXHJcbiAgICAvLyAgIG9wYWNpdHk6IDAsXHJcbiAgICAvLyAgIHRyYW5zcGFyZW50OiB0cnVlXHJcbiAgICAvLyB9O1xyXG4gICAgY29uc3QgY29sb3IgPSB7Y29sb3I6IHAuY292ZXIuY29sb3J9O1xyXG5cclxuICAgIGNvbnN0IHRyYW5zcGFyZW50ID0ge29wYWNpdHk6IDAsIHRyYW5zcGFyZW50OiB0cnVlfTtcclxuICAgIHRoaXMubWF0ZXJpYWxzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKGNvbG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbChjb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwodHJhbnNwYXJlbnQpLC8ve29wYWNpdHk6IDAsIHRyYW5zcGFyZW50OiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHRyYW5zcGFyZW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh0cmFuc3BhcmVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwodHJhbnNwYXJlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgY29uc3QgYmFja00gPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmJhY2tHLCB0aGlzLm1hdGVyaWFscyk7XHJcblxyXG4gICAgaWYocC5jb3Zlci5iaW5kZXJUZXh0dXJlIT09JycpIHtcclxuICAgICAgdGhpcy52aXN1YWwudGV4dHVyZUxvYWRlci5sb2FkKHAuY292ZXIuYmluZGVyVGV4dHVyZSwgKHRleHR1cmUpPT4ge1xyXG4gICAgICAgIHRoaXMubWF0ZXJpYWxzWzFdLmNvbG9yLnNldEhleCgweEZGRkZGRik7XHJcbiAgICAgICAgdGhpcy5tYXRlcmlhbHNbMV0ubWFwID0gdGV4dHVyZTtcclxuICAgICAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hdGVyaWFsc1sxXS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGhyZWUgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFjayA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrUlQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFja1JSID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLmJhY2tMVCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrTFIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMubGVmdFBpdm90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgICBpZighaGlkZGVuKSB7XHJcbiAgICAgICBiYWNrTS5wb3NpdGlvbi5zZXQoLjUqKHAuY292ZXIuZGVwdGgtMC4wMDEpLDAsMCk7XHJcbiAgICAgIHRoaXMuYmFjay5hZGQoYmFja00pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5iYWNrLmFkZCh0aGlzLmxlZnRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2suYWRkKHRoaXMucmlnaHRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2tSVC5hZGQodGhpcy5iYWNrKTtcclxuICAgIHRoaXMuYmFja1JSLmFkZCh0aGlzLmJhY2tSVCk7XHJcbiAgICB0aGlzLmJhY2tMVC5hZGQodGhpcy5iYWNrUlIpO1xyXG4gICAgdGhpcy5iYWNrTFIuYWRkKHRoaXMuYmFja0xUKTtcclxuICAgIHRoaXMudGhyZWUuYWRkKHRoaXMuYmFja0xSKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXRlcmlhbHMpIHtcclxuICAgICAgaWYobS5tYXApIHtcclxuICAgICAgICBtLm1hcCA9IG51bGw7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgbS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5tYXRlcmlhbHM7XHJcbiAgICB0aGlzLmJhY2tHLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSkge1xyXG4gICAgbGV0IHJpZ2h0LCBsZWZ0O1xyXG4gICAgaWYoYW5nbGU+TWF0aC5QSS8yKSB7XHJcbiAgICAgIHJpZ2h0ID0gTWF0aC5QSS8yO1xyXG4gICAgICBsZWZ0ID0gYW5nbGUtTWF0aC5QSS8yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJpZ2h0ID0gYW5nbGU7XHJcbiAgICAgIGxlZnQgPSAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IHRoaXMucCx0cjE9e3g6LTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tSVC5wb3NpdGlvbi5zZXQodHIxLngsdHIxLnksMCk7XHJcbiAgICB0aGlzLmJhY2tSUi5wb3NpdGlvbi5zZXQoLXRyMS54LC10cjEueSwwKTtcclxuICAgIHRoaXMuYmFja1JSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCByaWdodCk7XHJcblxyXG4gICAgY29uc3QgdHIyPXt4OnAuYmFja1NpemUtMipwLmNvdmVyLmRlcHRoLTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tMVC5wb3NpdGlvbi5zZXQodHIyLngsdHIyLnksMCk7XHJcbiAgICB0aGlzLmJhY2tMUi5wb3NpdGlvbi5zZXQoLXRyMi54LC10cjIueSwwKTtcclxuICAgIHRoaXMuYmFja0xSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCBsZWZ0KTtcclxuICB9XHJcblxyXG4gIHNldExlZnQoYW5nbGUpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMubGVmdFBpdm90LnBvc2l0aW9uLnNldChNYXRoVXRpbHMuaW50ZXJwb2xhdGVMaW5lYXIoWy1QSSwtUEkvMl0sWzAsdGhpcy5wLmNvdmVyLmRlcHRoXSxhbmdsZSksMC41KnRoaXMucC5iYWNrU2l6ZS0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0KGFuZ2xlKSB7XHJcbiAgICBjb25zdCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIHRoaXMucmlnaHRQaXZvdC5wb3NpdGlvbi5zZXQoTWF0aFV0aWxzLmludGVycG9sYXRlTGluZWFyKFstUEkvMiwwXSxbdGhpcy5wLmNvdmVyLmRlcHRoLDBdLGFuZ2xlKSwtMC41KnRoaXMucC5iYWNrU2l6ZSswLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgICB0aGlzLnJpZ2h0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIGpvaW5MZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIGNvdmVyLnRocmVlLnBvc2l0aW9uLnNldCgwLC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RMZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIHRoaXMubGVmdFBpdm90LnJlbW92ZShjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBqb2luUmlnaHRDb3Zlcihjb3Zlcikge1xyXG4gICAgY292ZXIudGhyZWUucG9zaXRpb24uc2V0KDAsLTAuNSp0aGlzLnAuY292ZXIuZGVwdGgsMCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RSaWdodENvdmVyKGNvdmVyKSB7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QucmVtb3ZlKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0JpbmRlci5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2snO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICdHcmFwaFV0aWxzJztcclxuaW1wb3J0IEJpbmRlciBmcm9tICcuL0JpbmRlcic7XHJcbmltcG9ydCBDb3ZlciBmcm9tICcuL0NvdmVyJztcclxuaW1wb3J0IFNoZWV0QmxvY2sgZnJvbSAnLi9TaGVldEJsb2NrJztcclxuaW1wb3J0IFNoZWV0UGh5c2ljcyBmcm9tICcuL1NoZWV0UGh5c2ljcyc7XHJcbmltcG9ydCBQYWdlTWFuYWdlciBmcm9tICcuL1BhZ2VNYW5hZ2VyJztcclxuaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuaW1wb3J0IENzc0xheWVyc01hbmFnZXIgZnJvbSAnLi9Dc3NMYXllcnNNYW5hZ2VyJztcclxuaW1wb3J0IFNlYXJjaEVuZ2luZSBmcm9tICcuL1NlYXJjaEVuZ2luZSc7XHJcbmltcG9ydCBDdXN0b21FdmVudENvbnZlcnRlciBmcm9tICdDdXN0b21FdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBDaXJjbGVUYXJnZXQgZnJvbSAndGFyZ2V0cy9DaXJjbGVUYXJnZXQnO1xyXG5pbXBvcnQgWW91VHViZUFwaSBmcm9tICdZb3VUdWJlQXBpJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2sgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG4gIC8vIHBhZ2VDYWxsYmFjayBzYW1wbGVzXHJcblxyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaW1hZ2UnLFxyXG4gIC8vICAgc3JjOiAnc2FtcGxlLnBuZycsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogZmFsc2VcclxuICAvLyB9KTtcclxuICAvL1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaHRtbCcsXHJcbiAgLy8gICBzcmM6ICdzYW1wbGUuaHRtbCcsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogdHJ1ZVxyXG4gIC8vIH0pO1xyXG4gIC8vXHJcbiAgLy8gY29uc3QgcGRmID0gbmV3IFBkZignc2FtcGxlLnBkZicpO1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAncGRmJyxcclxuICAvLyAgIHNyYzogcGRmLFxyXG4gIC8vICAgaW50ZXJhY3RpdmU6IGZhbHNlXHJcbiAgLy8gfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IHRydWU7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIC4uLnRoaXMucHJlcGFyZVByb3BzKHsuLi5wcm9wcywgc2hlZXRzfSksXHJcbiAgICAgIHBhZ2VDYWxsYmFjayxcclxuICAgICAgem9vbTogMSxcclxuICAgICAgc2luZ2xlUGFnZTogZmFsc2UsXHJcbiAgICAgIGF1dG9SZXNvbHV0aW9uOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMudXNlckRpcmVjdGlvbiA9IHtcclxuICAgICAgbGFzdFRvcFBhZ2U6IDAsXHJcbiAgICAgIGRpcmVjdGlvbjogMVxyXG4gICAgfTtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIgPSBuZXcgUGFnZU1hbmFnZXIodmlzdWFsLCB0aGlzLCB0aGlzLnApO1xyXG4gICAgQ1NTTGF5ZXIuaW5pdCh2aXN1YWwuZG9jKTtcclxuICAgIHRoaXMubGF5ZXJNYW5hZ2VyID0gbmV3IENzc0xheWVyc01hbmFnZXIodGhpcyk7XHJcbiAgICB0aGlzLnNlYXJjaEVuZ2luZSA9IG5ldyBTZWFyY2hFbmdpbmUocGFnZUNhbGxiYWNrLCAyKihzaGVldHMrMikpO1xyXG4gICAgdGhpcy5zZWFyY2hFbmdpbmUub25QYWdlSGl0c0NoYW5nZWQgPSAocGFnZSwgcXVlcnkpPT4ge1xyXG4gICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hQYWdlUXVlcnkocGFnZSwgcXVlcnkpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdzZWFyY2hSZXN1bHRzJyxcclxuICAgICAgICByZXN1bHRzOiB0aGlzLnNlYXJjaEVuZ2luZS5yZXN1bHRzLFxyXG4gICAgICAgIGxhc3RQYWdlOiBwYWdlLFxyXG4gICAgICAgIHF1ZXJ5XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnRocmVlID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gICAgdGhpcy5iaW5kZXIgPSBuZXcgQmluZGVyKHZpc3VhbCwgdGhpcy5wLCB0aGlzLmdldFBhZ2VzKCk8IDMpO1xyXG4gICAgdGhpcy50aHJlZS5hZGQodGhpcy5iaW5kZXIudGhyZWUpO1xyXG5cclxuICAgIGNvbnN0IGNvdmVyUCA9IHtcclxuICAgICAgbGVmdDogdGhpcy5wLmNvdmVyLFxyXG4gICAgICByaWdodDogdGhpcy5wLmNvdmVyXHJcbiAgICB9O1xyXG4gICAgdGhpcy5lbmFibGVNb3VzZSh0aGlzLnAuaW50ZXJhY3RpdmVDb3JuZXJzKTtcclxuICAgIGlmKHRoaXMuZ2V0UGFnZXMoKT09PTIpIHtcclxuICAgICAgdGhpcy5lbmFibGVNb3VzZShmYWxzZSk7XHJcbiAgICAgIGNvdmVyUFt0aGlzLnAucnRsPyAnbGVmdCc6ICdyaWdodCddID0ge1xyXG4gICAgICAgIC4uLnRoaXMucC5jb3ZlcixcclxuICAgICAgICB3aWR0aDogMWUtNixcclxuICAgICAgICBoZWlnaHQ6IDFlLTZcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHRoaXMubGVmdENvdmVyID0gbmV3IENvdmVyKHZpc3VhbCwgey4uLnRoaXMucCwgY292ZXI6IGNvdmVyUC5sZWZ0LCBzZXRUZXh0dXJlOiB0aGlzLnNldExlZnRDb3ZlclRleHR1cmUuYmluZCh0aGlzKX0sIE1hdGguUEkvMiwgJ29wZW5lZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pbkxlZnRDb3Zlcih0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLnN1YnNjcmliZVNoZWV0QmxvY2sodGhpcy5sZWZ0Q292ZXIsIDApO1xyXG4gICAgdGhpcy5yaWdodENvdmVyID0gbmV3IENvdmVyKHZpc3VhbCwgey4uLnRoaXMucCwgY292ZXI6IGNvdmVyUC5yaWdodCwgc2V0VGV4dHVyZTogdGhpcy5zZXRSaWdodENvdmVyVGV4dHVyZS5iaW5kKHRoaXMpfSwgMCwgJ2Nsb3NlZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pblJpZ2h0Q292ZXIodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMuc3Vic2NyaWJlU2hlZXRCbG9jayh0aGlzLnJpZ2h0Q292ZXIsIDIqKHRoaXMucC5zaGVldHMrMSkpO1xyXG5cclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2NrcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy50aHJlZS5hZGQodGhpcy50aHJlZVNoZWV0QmxvY2tzKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5wb3NpdGlvbi5zZXQoMC41KnRoaXMucC5jb3Zlci5kZXB0aC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDApO1xyXG5cclxuICAgIHRoaXMuc2hlZXRCbG9ja3MgPSBbXTtcclxuICAgIGlmKHNoZWV0cz4wKSB7XHJcbiAgICAgIHRoaXMuYWRkU2hlZXRCbG9jaygwLCBuZXcgU2hlZXRCbG9jayh2aXN1YWwsIHsuLi50aGlzLnAsIHNldFRleHR1cmU6IHRoaXMuc2V0UGFnZVRleHR1cmUuYmluZCh0aGlzKX0sIDAsIHNoZWV0cywgMCwgJ2Nsb3NlZCcpKTtcclxuICAgIH1cclxuICAgIHRoaXMucmVkdWNlUGFnZXNXaWR0aCh0cnVlKTtcclxuXHJcbiAgICB0aGlzLnNldChNYXRoLlBJLzIpO1xyXG4gICAgdGhpcy5vcGVuZWRCb3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QodGhpcy5sZWZ0Q292ZXIudGhyZWUpO1xyXG4gICAgdGhpcy5vcGVuZWRCb3gudW5pb24obmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KHRoaXMucmlnaHRDb3Zlci50aHJlZSkpO1xyXG5cclxuICAgIHRoaXMuYW5nbGUgPSB0aGlzLnAucnRsPyBNYXRoLlBJOiAwO1xyXG4gICAgdGhpcy5jbG9zZWRBbmdsZSA9IDA7XHJcbiAgICB0aGlzLnNldCh0aGlzLmFuZ2xlLDApO1xyXG4gICAgdGhpcy5sYXN0TW91c2VQb3MgPSB7XHJcbiAgICAgIHQ6IDBcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG5cclxuICAgIHRoaXMudGhyZWUucG9zaXRpb24uc2V0KC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoKzAuNSpzaGVldHMqdGhpcy5wLnBhZ2UuZGVwdGgsMCwwKTtcclxuICAgIHRoaXMuc2hlZXRQaHlzaWNzID0gbmV3IFNoZWV0UGh5c2ljcyh0aGlzLnAucGFnZS53aWR0aC90aGlzLnAuc2NhbGUsIHRoaXMucC5ncmF2aXR5LCB0aGlzLnAucGFnZS5jb3JuZXJEZXZpYXRpb24pO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHVwZGF0ZTogdGhpcy51cGRhdGUuYmluZCh0aGlzKSxcclxuICAgICAgbGFzdE1vdXNlUG9zOiAoZSk9PiB7XHJcbiAgICAgICAgdGhpcy5sYXN0TW91c2VQb3MgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmxhc3RNb3VzZVBvcyxcclxuICAgICAgICAgIHBhZ2VYOiBlLnBhZ2VYLFxyXG4gICAgICAgICAgcGFnZVk6IGUucGFnZVlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy52aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy51cGRhdGUpO1xyXG4gICAgJCh0aGlzLnZpc3VhbC5lbGVtZW50KS5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5sYXN0TW91c2VQb3MpO1xyXG5cclxuICAgIHRoaXMuYmluZHMub25QaWNrQ2FsbGJhY2sgPSB0aGlzLm9uUGlja0NhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIHRoaXMudmlzdWFsLmRyYWcub25QaWNrQ2FsbGJhY2sgPSB0aGlzLmJpbmRzLm9uUGlja0NhbGxiYWNrO1xyXG4gICAgdGhpcy5iaW5kcy5vbkRyYWdDYWxsYmFjayA9IHRoaXMub25EcmFnQ2FsbGJhY2suYmluZCh0aGlzKVxyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5vbkRyYWdDYWxsYmFjayA9IHRoaXMuYmluZHMub25EcmFnQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzLm9uUmVsZWFzZUNhbGxiYWNrID0gdGhpcy5vblJlbGVhc2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLm9uUmVsZWFzZUNhbGxiYWNrID0gdGhpcy5iaW5kcy5vblJlbGVhc2VDYWxsYmFjaztcclxuXHJcbiAgICB0aGlzLmRyYWdBbmdsZSA9IDAuMDU7XHJcbiAgICB0aGlzLnRtcCA9IHtcclxuICAgICAgYm94czogW1xyXG4gICAgICAgIG5ldyBUSFJFRS5Cb3gzKCksXHJcbiAgICAgICAgbmV3IFRIUkVFLkJveDMoKVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudmlzdWFsLmFkZE9iamVjdCh0aGlzLnRocmVlKTtcclxuXHJcbiAgICB0aGlzLnRtcEJveCA9IG5ldyBUSFJFRS5Cb3gzKCk7XHJcbiAgICB0aGlzLmJvb2tTaGFkb3dNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IDB4MDAwMDAwLCBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLCB0cmFuc3BhcmVudDogdHJ1ZX0pXHJcbiAgICB0aGlzLmJvb2tTaGFkb3cgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxLDEpLnJvdGF0ZVgoLU1hdGguUEkvMiksIHRoaXMuYm9va1NoYWRvd01hdGVyaWFsKTtcclxuICAgIHRoaXMudmlzdWFsLmFkZE9iamVjdCh0aGlzLmJvb2tTaGFkb3cpO1xyXG4gICAgdGhpcy5jYWxjdWxhdGVTaGFkb3coKTtcclxuXHJcbiAgICB0aGlzLnZpc3VhbC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hab29tLmJpbmQodGhpcy5wYWdlTWFuYWdlcikpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKCF0aGlzLmlzUHJvY2Vzc2luZygpKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlCZWZvcmVBbmltYXRpb24oKTtcclxuICAgICAgICB0aGlzLm5vdGlmeUFmdGVyQW5pbWF0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlU2hhZG93KCkge1xyXG4gICAgY29uc3QgYm94ID0gdGhpcy50bXBCb3g7XHJcbiAgICBib3guc2V0RnJvbU9iamVjdCh0aGlzLnRocmVlKTtcclxuICAgIHRoaXMuYm9va1NoYWRvdy5zY2FsZS5zZXQoYm94Lm1heC54LWJveC5taW4ueCwxLGJveC5tYXguei1ib3gubWluLnopO1xyXG4gICAgY29uc3QgZGQgPSAuMDE1O1xyXG4gICAgdGhpcy5ib29rU2hhZG93LnBvc2l0aW9uLnNldCguNSooYm94Lm1heC54K2JveC5taW4ueCktZGQsYm94Lm1pbi55LS4xKmRkLC41Kihib3gubWF4LnorYm94Lm1pbi56KS1kZCk7XHJcbiAgICB0aGlzLmJvb2tTaGFkb3dNYXRlcmlhbC5vcGFjaXR5ID0gLjAzO1xyXG4gICAgdGhpcy52aXN1YWwuc2hhZG93UGxhY2UucG9zaXRpb24uc2V0KDAsIGJveC5taW4ueS1kZCwgMCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy52aXN1YWwucmVtb3ZlT2JqZWN0KHRoaXMudGhyZWUpO1xyXG4gICAgdGhpcy5zaGVldFBoeXNpY3MuZGlzcG9zZSgpO1xyXG4gICAgZGVsZXRlIHRoaXMudmlzdWFsLmRyYWcub25QaWNrQ2FsbGJhY2s7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWwuZHJhZy5vbkRyYWdDYWxsYmFjaztcclxuICAgIGRlbGV0ZSB0aGlzLnZpc3VhbC5kcmFnLm9uUmVsZWFzZUNhbGxiYWNrO1xyXG4gICAgJCh0aGlzLnZpc3VhbC5lbGVtZW50KS5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubGFzdE1vdXNlUG9zKTtcclxuICAgIHRoaXMudmlzdWFsLnJlbW92ZVJlbmRlckNhbGxiYWNrKHRoaXMuYmluZHMudXBkYXRlKTtcclxuICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9ja3MoMCwgdGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgpO1xyXG4gICAgdGhpcy5iaW5kZXIuZGlzY29ubmVjdExlZnRDb3Zlcih0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2sodGhpcy5sZWZ0Q292ZXIpO1xyXG4gICAgdGhpcy5iaW5kZXIuZGlzY29ubmVjdFJpZ2h0Q292ZXIodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9jayh0aGlzLnJpZ2h0Q292ZXIpO1xyXG4gICAgdGhpcy5iaW5kZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5sYXllck1hbmFnZXIuZGlzcG9zZSgpO1xyXG4gICAgQ1NTTGF5ZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvLyBwdWJsaWNzIHtcclxuXHJcbiAgaGFzUGVuZGluZ1BsYXllcnMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nUGxheWVycy5sZW5ndGg+MDtcclxuICB9XHJcblxyXG4gIHJlc29sdmVQZW5kaW5nUGxheWVycygpIHtcclxuICAgIGZvcihsZXQgcCBvZiB0aGlzLnBlbmRpbmdQbGF5ZXJzKSB7XHJcbiAgICAgIHAucGxheSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgdHlwZTogJ3BlbmRpbmdQbGF5ZXJzJ1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUaHJlZSgpIHtcclxuICAgIHRoaXMudGhyZWUudXNlckRhdGEubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0QXV0b1Jlc29sdXRpb24oYXV0b1Jlc29sdXRpb24pIHtcclxuICAgIHRoaXMucC5hdXRvUmVzb2x1dGlvbiA9IHtcclxuICAgICAgLi4udGhpcy5wLmF1dG9SZXNvbHV0aW9uLFxyXG4gICAgICAuLi5hdXRvUmVzb2x1dGlvblxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldFpvb20oem9vbSwgc2luZ2xlUGFnZSkge1xyXG4gICAgaWYoTWF0aC5hYnModGhpcy5wLnpvb20tem9vbSk+MWUtMyB8fCBzaW5nbGVQYWdlIT09dGhpcy5wLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgdGhpcy5wLnpvb20gPSB6b29tO1xyXG4gICAgICB0aGlzLnAuc2luZ2xlUGFnZSA9IHNpbmdsZVBhZ2U7XHJcbiAgICAgIHRoaXMucGFnZU1hbmFnZXIucmVmcmVzaFpvb20oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBhZ2VDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0aGlzLnAucGFnZUNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc2V0UXVlcnkocXVlcnkpIHtcclxuICAgIHRoaXMuc2VhcmNoRW5naW5lLnNldFF1ZXJ5KHF1ZXJ5KTtcclxuICB9XHJcblxyXG4gIGlzUHJvY2Vzc2luZygpIHtcclxuICAgIHJldHVybiB0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCkhPT0wO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnBhZ2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0Qm9va1BhZ2VzKCkge1xyXG4gICAgcmV0dXJuIDQrMip0aGlzLnAuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgc2V0RmxpcFByb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5wLmZsaXBQcm9ncmVzc0NsYiA9IGNsYjtcclxuICB9XHJcblxyXG4gIHNldEluamVjdG9yKGluamVjdG9yKSB7XHJcbiAgICB0aGlzLnAuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICB9XHJcblxyXG4gIGlzQWN0aXZlUGFnZShuKSB7XHJcbiAgICBsZXQgcmVzID0gdHJ1ZTtcclxuICAgIGlmKG4+MSAmJiBuPHRoaXMuZ2V0Qm9va1BhZ2VzKCktMikge1xyXG4gICAgICBmb3IobGV0IGIgb2YgdGhpcy5zaGVldEJsb2Nrcykge1xyXG4gICAgICAgIGlmKG4tMj4yKmIucC5maXJzdCAmJiBuLTI8MipiLnAubGFzdC0xKSB7XHJcbiAgICAgICAgICByZXMgPSBmYWxzZTtcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0QmxvY2tCeVBhZ2Uobikge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgaWYobjwyKSB7XHJcbiAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKG48MioodGhpcy5wLnNoZWV0cysxKSkge1xyXG4gICAgICBmb3IobGV0IGIgb2YgdGhpcy5zaGVldEJsb2Nrcykge1xyXG4gICAgICAgIGlmKG4tMj49MipiLnAuZmlyc3QgJiYgbi0yPDIqYi5wLmxhc3QpIHtcclxuICAgICAgICAgIGJsb2NrID0gYjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGJsb2NrID0gdGhpcy5yaWdodENvdmVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0QmxvY2tQYWdlcyhibG9jaykge1xyXG4gICAgbGV0IHJhbmdlO1xyXG4gICAgc3dpdGNoIChibG9jaykge1xyXG4gICAgICBjYXNlIHRoaXMubGVmdENvdmVyOiB7XHJcbiAgICAgICAgICByYW5nZSA9IFswLCAxXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIHRoaXMucmlnaHRDb3Zlcjoge1xyXG4gICAgICAgIHJhbmdlID0gWzIqKHRoaXMucC5zaGVldHMrMSksIDIqKHRoaXMucC5zaGVldHMrMSkrMV07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIHJhbmdlID0gYmxvY2s/IFsyKihibG9jay5wLmZpcnN0KzEpLCAyKihibG9jay5wLmxhc3QrMSktMV06IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhbmdlO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZSgpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGxldCBwO1xyXG4gICAgaWYodGhpcy5hbmdsZSA9PT0gUEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgZm9yKGxldCBibG9jayBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgICAgaWYoYmxvY2suYW5nbGU8PVBJLzIpIHtcclxuICAgICAgICAgIHAgPSB0aGlzLmdldEJsb2NrUGFnZXMoYmxvY2spWzBdLTE7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoIXApIHtcclxuICAgICAgICBwID0gdGhpcy5nZXRCb29rUGFnZXMoKS0zO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU8UEkvMikge1xyXG4gICAgICBwID0gMDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5hbmdsZT4zKlBJLzIpIHtcclxuICAgICAgcCA9IDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU8UEkpIHtcclxuICAgICAgcCA9IHRoaXMuZ2V0Qm9va1BhZ2VzKCktMztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5hbmdsZT49UEkpIHtcclxuICAgICAgcCA9IHRoaXMuZ2V0Qm9va1BhZ2VzKCktMTtcclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wUGFnZXMoKSB7XHJcbiAgICBjb25zdCBwID0gdGhpcy5nZXRQYWdlKCk7XHJcbiAgICByZXR1cm4gcD09PTAgfHwgcD09PXRoaXMuZ2V0Qm9va1BhZ2VzKCktMT8gW3BdOiBbcCwgcCsxXTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VTdGF0ZShuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYWdlTWFuYWdlci5nZXRQYWdlU3RhdGUobik7XHJcbiAgfVxyXG5cclxuICBlbmFibGVMb2FkaW5nQW5pbWF0aW9uKGVuYWJsZSkge1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci5lbmFibGVMb2FkaW5nQW5pbWF0aW9uKGVuYWJsZSk7XHJcbiAgfVxyXG5cclxuICBnZXRMZWZ0RmxpcHBpbmcoKSB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5zaGVldEJsb2Nrc1swXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgaWYodGhpcy5hbmdsZT09PVBJKSB7XHJcbiAgICAgIGlmKHRoaXMuZ2V0UGFnZXMoKT4xKSB7XHJcbiAgICAgICAgYmxvY2sgPSB0aGlzLnJpZ2h0Q292ZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihsZWZ0ICYmIGxlZnQuc3RhdGU9PT0nY2xvc2VkJyAmJiBsZWZ0LmFuZ2xlPlBJLzIpIHtcclxuICAgICAgICBibG9jayA9IGxlZnQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlID09PSBQSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICAgIGlmKCF0aGlzLnAucnRsIHx8IHRoaXMuZ2V0UGFnZXMoKT09PXRoaXMuZ2V0Qm9va1BhZ2VzKCkpIHtcclxuICAgICAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRSaWdodEZsaXBwaW5nKCkge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgY29uc3QgcmlnaHQgPSB0aGlzLnNoZWV0QmxvY2tzW3RoaXMuc2hlZXRCbG9ja3MubGVuZ3RoLTFdLCBQSSA9IE1hdGguUEk7XHJcbiAgICBpZih0aGlzLmFuZ2xlPT09MCkge1xyXG4gICAgICBpZih0aGlzLmdldFBhZ2VzKCk+MSkge1xyXG4gICAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihyaWdodCAmJiByaWdodC5zdGF0ZT09PSdjbG9zZWQnICYmIHJpZ2h0LmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgICAgYmxvY2sgPSByaWdodDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRoaXMuYW5nbGU9PT1QSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICAgIGlmKHRoaXMucC5ydGwgfHwgdGhpcy5nZXRQYWdlcygpPT09dGhpcy5nZXRCb29rUGFnZXMoKSkge1xyXG4gICAgICAgICAgYmxvY2sgPSB0aGlzLnJpZ2h0Q292ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRDbG9zZWRCbG9ja0FuZ2xlKGFuZ2xlKSB7XHJcbiAgICBsZXQgY2xvc2VkQW5nbGUsIHtQSX0gPSBNYXRoO1xyXG5cclxuICAgIGlmKHRoaXMubGVmdENvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgIGxldCB0ZXN0O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRlc3QgPSBNYXRoLmFicyh0aGlzLnNoZWV0UGh5c2ljcy5nZXRQYXJhbWV0cih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCwgJ2FuZ2xlJyktYW5nbGUpXHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIHRlc3QgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gYW5nbGU+UEkvMiB8fCB0ZXN0PlBJLzY/IFBJLzI6IHRoaXMuY2xvc2VkQW5nbGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMucmlnaHRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBsZXQgdGVzdDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0ZXN0ID0gTWF0aC5hYnModGhpcy5zaGVldFBoeXNpY3MuZ2V0UGFyYW1ldHIodGhpcy5yaWdodENvdmVyLnBoeXNpY0lkLCAnYW5nbGUnKS1hbmdsZSlcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgdGVzdCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZTxQSS8yIHx8IHRlc3Q+UEkvNj8gUEkvMisxZS03OiB0aGlzLmNsb3NlZEFuZ2xlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gUEkvMisoYW5nbGUhPT0wKSoxZS03O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9wZW5lZEFuZ2xlOiBhbmdsZSxcclxuICAgICAgY2xvc2VkQW5nbGUsXHJcbiAgICAgIGJpbmRlclR1cm46IHRoaXMuY2xvc2VkQW5nbGVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmbGlwTGVmdChzaXplPTEsIHByb2dyZXNzQ2xiPXRoaXMucC5mbGlwUHJvZ3Jlc3NDbGIpIHtcclxuICAgIGlmKHRoaXMuZmxpcERpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgIHRoaXMuZmxpcERpcmVjdGlvbiA9ICdsZWZ0JztcclxuICAgIH1cclxuICAgIGxldCBibG9jaywgcmVzO1xyXG4gICAgaWYodGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpPDI1KSB7XHJcbiAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnNoZWV0QmxvY2tzWzBdLCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIGlmKHRoaXMuYW5nbGU9PT1QSSkge1xyXG4gICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICBibG9jaz10aGlzLnJpZ2h0Q292ZXIsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIubWFzcyxcclxuICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgLXRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgMCxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldCgzKlBJLzItYW5nbGUvMixoZWlnaHQpLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KDMqUEkvMi1hbmdsZS8yLDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKGFuZ2xlPyBQSTogUEkvMisxZS03LCdjbG9zZWQnKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYobGVmdCAmJiBsZWZ0LnN0YXRlPT09J2Nsb3NlZCcgJiYgbGVmdC5hbmdsZT5QSS8yKSB7XHJcbiAgICAgICAgICBibG9jayA9IHNpemU8bGVmdC5nZXRTaXplKCk/IHRoaXMuc3BsaXRTaGVldEJsb2NrKDAsIGxlZnQuZ2V0U2l6ZSgpLXNpemUpWzFdOiBsZWZ0O1xyXG4gICAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgICAgYmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLFxyXG4gICAgICAgICAgICBQSSxcclxuICAgICAgICAgICAgLXRoaXMucC5wYWdlLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+YmxvY2suc2V0KHRoaXMuZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSksJ29wZW5lZCcsaGVpZ2h0LGJsb2NrLnAuZmlyc3QsYmxvY2sucC5sYXN0LHRoaXMuZmxpcERpcmVjdGlvbiksXHJcbiAgICAgICAgICAgIEJvb2suZmluaXNoQW5pbWF0aW9uQ2xiLmJpbmQoe2Jvb2s6IHRoaXMsIGJsb2NrfSksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuYW5nbGUgPT09IFBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jaz10aGlzLmxlZnRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgICAtdGhpcy5wLmNvdmVyLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXQoMipQSS1hbmdsZS8yLGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgaWYoYW5nbGU+UEkvMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEkvMjogMCwnY2xvc2VkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHRoaXMuc2V0KGFuZ2xlPT09MD8gMDogMipQSS1hbmdsZS8yLDApLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBmbGlwUmlnaHQoc2l6ZT0xLCBwcm9ncmVzc0NsYj10aGlzLnAuZmxpcFByb2dyZXNzQ2xiKSB7XHJcbiAgICBpZih0aGlzLmZsaXBEaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgaWYoIXRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKSkge1xyXG4gICAgICB0aGlzLmZsaXBEaXJlY3Rpb24gPSAncmlnaHQnO1xyXG4gICAgfVxyXG4gICAgbGV0IGJsb2NrLCByZXM7XHJcbiAgICBpZih0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCk8MjUpIHtcclxuICAgICAgY29uc3QgcmlnaHQgPSB0aGlzLnNoZWV0QmxvY2tzW3RoaXMuc2hlZXRCbG9ja3MubGVuZ3RoLTFdLCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIGlmKHRoaXMuYW5nbGU9PT0wKSB7XHJcbiAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgIGJsb2NrPXRoaXMubGVmdENvdmVyLFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIuZmxleGliaWxpdHksXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PnRoaXMuc2V0KGFuZ2xlLzIsaGVpZ2h0KSxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldChhbmdsZS8yLDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKGFuZ2xlPyBQSS8yOiAwLCdjbG9zZWQnKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYocmlnaHQgJiYgcmlnaHQuc3RhdGU9PT0nY2xvc2VkJyAmJiByaWdodC5hbmdsZTw9UEkvMikge1xyXG4gICAgICAgICAgYmxvY2sgPSBzaXplPHJpZ2h0LmdldFNpemUoKT8gdGhpcy5zcGxpdFNoZWV0QmxvY2sodGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtMSwgc2l6ZSlbMF06IHJpZ2h0O1xyXG4gICAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgICAgYmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PmJsb2NrLnNldCh0aGlzLmdldENsb3NlZEJsb2NrQW5nbGUoYW5nbGUpLCdvcGVuZWQnLGhlaWdodCxibG9jay5wLmZpcnN0LGJsb2NrLnAubGFzdCx0aGlzLmZsaXBEaXJlY3Rpb24pLFxyXG4gICAgICAgICAgICBCb29rLmZpbmlzaEFuaW1hdGlvbkNsYi5iaW5kKHtib29rOiB0aGlzLCBibG9ja30pLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlPT09UEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrPXRoaXMucmlnaHRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAuY292ZXIuZmxleGliaWxpdHksXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0KFBJLzIrYW5nbGUvMixoZWlnaHQpO1xyXG4gICAgICAgICAgICAgIGlmKGFuZ2xlPFBJLzIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMisxZS03LCdjbG9zZWQnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldChQSS8yK2FuZ2xlLzIsMCksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIC8vIH1cclxuXHJcbiAgY2xlYXJIb3ZlckluZm8oKSB7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLnR1cm5PbkV2ZW50cygpO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvLmJsb2NrLmZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvLmJsb2NrLmNvcm5lckZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gIH1cclxuXHJcbiAgeFNlZ21lbnQoKSB7XHJcbiAgICBjb25zdCBib3hzID0gdGhpcy50bXAuYm94cywgcmVzID0ge307XHJcbiAgICBpZih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBib3hzWzBdLnNldEZyb21PYmplY3QodGhpcy5yaWdodENvdmVyLnRocmVlKTtcclxuICAgICAgcmVzLm1pbiA9IC0ocmVzLm1heCA9IGJveHNbMF0ubWF4LngpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnJpZ2h0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgYm94c1swXS5zZXRGcm9tT2JqZWN0KHRoaXMubGVmdENvdmVyLnRocmVlKTtcclxuICAgICAgcmVzLm1heCA9IC0ocmVzLm1pbiA9IGJveHNbMF0ubWluLngpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGJveHNbMF0uc2V0RnJvbU9iamVjdCh0aGlzLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgIGJveHNbMV0uc2V0RnJvbU9iamVjdCh0aGlzLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICBib3hzWzBdLnVuaW9uKGJveHNbMV0pO1xyXG4gICAgICByZXMubWluID0gYm94c1swXS5taW4ueDtcclxuICAgICAgcmVzLm1heCA9IGJveHNbMF0ubWF4Lng7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgY29tcHV0ZVRhcmdldChwb2ludCkge1xyXG4gICAgbGV0IHt4LCB5fSA9IHBvaW50LCBzZWcgPSB0aGlzLnhTZWdtZW50KCksIGFuZ2xlO1xyXG4gICAgYW5nbGUgPSAoc2VnLm1heC14KS8oc2VnLm1heC1zZWcubWluKSpNYXRoLlBJO1xyXG4gICAgLy8gYW5nbGUgPSBNYXRoLmFjb3MoeC9NYXRoLnNxcnQoeCp4K3kqeSkpO1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuZHJhZ0FuZ2xlLCBNYXRoLm1pbihNYXRoLlBJLXRoaXMuZHJhZ0FuZ2xlLCBhbmdsZSkpO1xyXG4gIH1cclxuXHJcbiAgb25QaWNrQ2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgICBjb25zdCBibG9jayA9IG9iamVjdC5vYmplY3QudXNlckRhdGEuc2VsZixcclxuICAgICAgICAgIHAgPSB7Li4ub2JqZWN0LnV2fSwgaSA9IG9iamVjdC5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICBpZihpPDIpIHtcclxuICAgICAgcC54ID0gaT09PTA/IHAueDogMS1wLng7XHJcbiAgICAgIGlmKGJsb2NrLmNvcm5lclRhcmdldC50ZXN0SW50ZXJzZWN0aW9uKG51bGwsIHApICYmIGJsb2NrLnBoeXNpY0lkKSB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZlckluZm8pIHtcclxuICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmxvY2suZm9yY2UgPSBTaGVldFBoeXNpY3MuZHJhZ0ZvcmNlQ2xiO1xyXG4gICAgICAgIGJsb2NrLmNvcm5lckZvcmNlID0gU2hlZXRQaHlzaWNzLmdldERyYWdDb3JuZXJGb3JjZUNsYih0aGlzLmNvbXB1dGVUYXJnZXQob2JqZWN0LnBvaW50KSk7XHJcbiAgICAgICAgdGhpcy5kcmFnSW5mbyA9IHtcclxuICAgICAgICAgIG9iamVjdCxcclxuICAgICAgICAgIGJsb2NrXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9mZkV2ZW50cygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgb25EcmFnQ2FsbGJhY2socG9pbnQpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5kcmFnSW5mby5ibG9jaywgcCA9IGJsb2NrLmdldFByb3BzKCk7XHJcbiAgICBibG9jay5mb3JjZSA9IFNoZWV0UGh5c2ljcy5kcmFnRm9yY2VDbGI7XHJcbiAgICBibG9jay5jb3JuZXJGb3JjZSA9IFNoZWV0UGh5c2ljcy5nZXREcmFnQ29ybmVyRm9yY2VDbGIodGhpcy5jb21wdXRlVGFyZ2V0KHBvaW50KSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uUmVsZWFzZUNhbGxiYWNrKCkge1xyXG4gICAgZGVsZXRlIHRoaXMuZHJhZ0luZm8uYmxvY2suZm9yY2U7XHJcbiAgICBkZWxldGUgdGhpcy5kcmFnSW5mby5ibG9jay5jb3JuZXJGb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmRyYWdJbmZvO1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT25FdmVudHMoKTtcclxuICB9XHJcblxyXG4gIGdldEZsaXBwaW5nKGkpIHtcclxuICAgIHJldHVybiBpPyB0aGlzLmdldExlZnRGbGlwcGluZygpOiB0aGlzLmdldFJpZ2h0RmxpcHBpbmcoKTtcclxuICB9XHJcblxyXG4gIGZsaXAoaSwgc2l6ZT0xKSB7XHJcbiAgICByZXR1cm4gaT8gdGhpcy5mbGlwTGVmdChzaXplKTogdGhpcy5mbGlwUmlnaHQoc2l6ZSk7XHJcbiAgfVxyXG5cclxuICBlbmFibGVNb3VzZShlbmFibGUpIHtcclxuICAgIHRoaXMubW91c2VDb250cm9sbGVyID0gZW5hYmxlO1xyXG4gIH1cclxuXHJcbiAgY29ybmVyQ2FsbGJhY2soZSwgZGF0YSkge1xyXG4gICAgaWYodGhpcy5tb3VzZUNvbnRyb2xsZXIpIHtcclxuICAgICAgY29uc3Qge2ksIG59ID0gZGF0YS5kYXRhO1xyXG4gICAgICBpZihlLnR5cGU9PT0nbW91c2VvdmVyJykge1xyXG4gICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvICYmIHRoaXMuaG92ZXJJbmZvLnBlbmRpbmdzIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICArK3RoaXMuaG92ZXJJbmZvLnBlbmRpbmdzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV3Jvbmcgc3RhdGU6IGVsZW1lbnQgaXMgYWxyZWFkeSBob3ZlcicpO1xyXG4gICAgICAgICAgICBpZih0aGlzLmhvdmVySW5mby5uIT09bikge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoIXRoaXMuaG92ZXJJbmZvICYmICF0aGlzLmRyYWdJbmZvKSB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgY29uc3QgaG92ZXJBbmdsZSA9IDAuMDIsXHJcbiAgICAgICAgICAgICAgICAgIGhvdmVyID0gdGhpcy5nZXRCbG9ja0J5UGFnZShuKSxcclxuICAgICAgICAgICAgICAgICAgcG9zc2libGUgPSB0aGlzLmdldEZsaXBwaW5nKGkpO1xyXG4gICAgICAgICAgICBpZihuPjEgJiYgbjwyKih0aGlzLnAuc2hlZXRzKzEpICYmIGhvdmVyLnBoeXNpY0lkICYmIChob3Zlci5hbmdsZTxob3ZlckFuZ2xlIHx8IGhvdmVyLmFuZ2xlPk1hdGguUEktaG92ZXJBbmdsZSkpIHtcclxuICAgICAgICAgICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUoaG92ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoaG92ZXI9PT1wb3NzaWJsZSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNoZWV0QmxvY2tzID0gW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0Q292ZXIsXHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnNoZWV0QmxvY2tzLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodENvdmVyXHJcbiAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICBjb25zdCBqID0gc2hlZXRCbG9ja3MuaW5kZXhPZihob3ZlciksIG5leHRCbG9jayA9IH5qPyBzaGVldEJsb2Nrc1tqKzIqaS0xXTogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgIGlmKCFuZXh0QmxvY2sgfHwgIW5leHRCbG9jay5waHlzaWNJZCB8fCBuZXh0QmxvY2suYW5nbGU+aG92ZXJBbmdsZSAmJiBuZXh0QmxvY2suYW5nbGU8TWF0aC5QSS1ob3ZlckFuZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmZsaXAoaSwgMSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZighYmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5ob3ZlckluZm87XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoYmxvY2sucGh5c2ljSWQsICd2ZWxvY2l0eScsIDApO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlckluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgIHBlbmRpbmdzOiAxXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXMudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvICYmIHRoaXMuaG92ZXJJbmZvLnBlbmRpbmdzPDEpIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZihibG9jaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT2ZmRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCAgcCA9IGJsb2NrLmdldFByb3BzKCk7XHJcbiAgICAgICAgICAgICAgICBibG9jay5mb3JjZSA9IHRoaXMuc2hlZXRQaHlzaWNzLmdldFRhcmdldEZvcmNlQ2xiKHAubWFzcypibG9jay5nZXRTaXplKCksIGk/IE1hdGguUEktaG92ZXJBbmdsZTogaG92ZXJBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICBibG9jay5jb3JuZXJGb3JjZSA9ICgpPT4gKGk/IC0xOiAxKSpTaGVldFBoeXNpY3MuaG92ZXJDb3JuZXJGb3JjZUNsYigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoYmxvY2sucGh5c2ljSWQsICdhbmdsZScsIGk/IE1hdGguUEktMC41KmhvdmVyQW5nbGU6IDAuNSpob3ZlckFuZ2xlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICBuLFxyXG4gICAgICAgICAgICAgICAgICBibG9ja1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKDEvMzApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRoaXMuaG92ZXJJbmZvICYmIGUudHlwZT09PSdtb3VzZW91dCcpIHtcclxuICAgICAgICBpZih0aGlzLmhvdmVySW5mby5wZW5kaW5ncyE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgLS10aGlzLmhvdmVySW5mby5wZW5kaW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihuPT09dGhpcy5ob3ZlckluZm8ubikge1xyXG4gICAgICAgICAgdGhpcy5jbGVhckhvdmVySW5mbygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGUudHlwZT09PSdtb3VzZWRvd24nKSB7XHJcbiAgICAgICAgdGhpcy5jb3JuZXJDbGlja0RhdGEgPSB7XHJcbiAgICAgICAgICB4OiBlLnBhZ2VYLFxyXG4gICAgICAgICAgeTogZS5wYWdlWVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihlLnR5cGU9PT0nY2xpY2snKSB7XHJcbiAgICAgICAgaWYoTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMuY29ybmVyQ2xpY2tEYXRhLngtZS5wYWdlWCwyKStNYXRoLnBvdyh0aGlzLmNvcm5lckNsaWNrRGF0YS55LWUucGFnZVksMikpPDUpIHtcclxuICAgICAgICAgIGNvbnN0IGhvdmVyID0gdGhpcy5nZXRCbG9ja0J5UGFnZShuKTtcclxuICAgICAgICAgIGlmKGhvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gaG92ZXIucGh5c2ljSWQsXHJcbiAgICAgICAgICAgICAgICAgIHByb3BzID0gaG92ZXIuZ2V0UHJvcHMoKTtcclxuICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoaWQsICd2ZWxvY2l0eScsIChpPyAtMTogMSkqcHJvcHMuc3RhcnRWZWxvY2l0eSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvcm5lckNsaWNrRGF0YTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkU2hlZXRCbG9jayhwLCBibG9jaykge1xyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5zcGxpY2UocCwgMCwgYmxvY2spO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVTaGVldEJsb2NrKGJsb2NrLCAyKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5hZGQoYmxvY2sudGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlU2hlZXRCbG9jayhibG9jaywgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBldmVudENvbnZlcnRlciA9IG5ldyBDdXN0b21FdmVudENvbnZlcnRlcih0aGlzLnZpc3VhbC53bmQsIHRoaXMudmlzdWFsLmRvYywgQ2lyY2xlVGFyZ2V0LnRlc3QpLFxyXG4gICAgICAgICAgciA9IDAuMTUsXHJcbiAgICAgICAgICB0YXJnZXQgPSBuZXcgQ2lyY2xlVGFyZ2V0KDEtMC41KnIsIDAuNSpyLCByKTtcclxuICAgIHRhcmdldC5ibG9jayA9IGJsb2NrO1xyXG4gICAgdGFyZ2V0LmNhbGxiYWNrID0gdGhpcy5jb3JuZXJDYWxsYmFjay5iaW5kKHRoaXMpO1xyXG4gICAgZXZlbnRDb252ZXJ0ZXIuYWRkQ3VzdG9tKHRhcmdldCk7XHJcbiAgICBibG9jay5jb3JuZXJUYXJnZXQgPSB0YXJnZXQ7XHJcbiAgICBibG9jay50aHJlZS51c2VyRGF0YS5tb3VzZUNhbGxiYWNrID0gKGUsIGRhdGEpPT4ge1xyXG4gICAgICBjb25zdCBpID0gZGF0YS5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICAgIGlmKGk8Mikge1xyXG4gICAgICAgIGNvbnN0IG4gPSBpPT09MD8gb2Zmc2V0KzIqYmxvY2sucC5maXJzdDogb2Zmc2V0KzIqYmxvY2sucC5sYXN0LTE7XHJcbiAgICAgICAgZXZlbnRDb252ZXJ0ZXIuY29udmVydChlLCB7eDogaT09PTA/IGRhdGEudXYueDogMS1kYXRhLnV2LngsIHk6IGRhdGEudXYueSwgaSwgbn0pO1xyXG4gICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHJhbnNmZXJFdmVudFRvVGV4dHVyZShuLCBlLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGJsb2NrLnRocmVlLnVzZXJEYXRhLnRvdWNoQ2FsbGJhY2sgPSAoZSwgZGF0YSk9PiB7XHJcbiAgICAgIGNvbnN0IGkgPSBkYXRhLmZhY2UubWF0ZXJpYWxJbmRleDtcclxuICAgICAgaWYoaTwyKSB7XHJcbiAgICAgICAgY29uc3QgbiA9IGk9PT0wPyBvZmZzZXQrMipibG9jay5wLmZpcnN0OiBvZmZzZXQrMipibG9jay5wLmxhc3QtMTtcclxuICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnRyYW5zZmVyRXZlbnRUb1RleHR1cmUobiwgZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLmFkZFRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLm1vdXNlRXZlbnRzLmFkZFRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLnRvdWNoRXZlbnRzLmFkZFRocmVlKGJsb2NrLnRocmVlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVNoZWV0QmxvY2soYmxvY2spIHtcclxuICAgIHRoaXMudmlzdWFsLm1vdXNlRXZlbnRzLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLnRvdWNoRXZlbnRzLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLmRyYWcucmVtb3ZlVGhyZWUoYmxvY2sudGhyZWUpO1xyXG4gICAgdGhpcy50aHJlZVNoZWV0QmxvY2tzLnJlbW92ZShibG9jay50aHJlZSk7XHJcbiAgICBibG9jay5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTaGVldEJsb2NrcyhmaXJzdCwgc2l6ZSkge1xyXG4gICAgY29uc3QgYmxvY2tzID0gdGhpcy5zaGVldEJsb2Nrcy5zcGxpY2UoZmlyc3QsIHNpemUpO1xyXG4gICAgZm9yKGxldCBibG9jayBvZiBibG9ja3MpIHtcclxuICAgICAgdGhpcy5yZW1vdmVTaGVldEJsb2NrKGJsb2NrKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIuc2V0VGV4dHVyZShtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG5cclxuICBzZXRQYWdlVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKzIpO1xyXG4gIH1cclxuXHJcbiAgc2V0TGVmdENvdmVyVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0Q292ZXJUZXh0dXJlKG1hdGVyaWFsLCBuKSB7XHJcbiAgICB0aGlzLnNldFRleHR1cmUobWF0ZXJpYWwsIG4rMioodGhpcy5wLnNoZWV0cysxKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZmluaXNoQW5pbWF0aW9uQ2xiKGFuZ2xlKSB7XHJcbiAgICB0aGlzLmJsb2NrLnNldCh0aGlzLmJvb2suZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSkuY2xvc2VkQW5nbGUsJ2Nsb3NlZCcsMCk7XHJcbiAgICBjb25zdCBpID0gdGhpcy5ib29rLnNoZWV0QmxvY2tzLmluZGV4T2YodGhpcy5ibG9jayk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICBpZihhbmdsZT09PTApIHtcclxuICAgICAgICB0aGlzLmJvb2subWVyZ2VTaGVldEJsb2NrcyhpLCB0aGlzLmJvb2suc2hlZXRCbG9ja3MubGVuZ3RoLWkpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYm9vay5tZXJnZVNoZWV0QmxvY2tzKDAsIGkrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGNCbG9ja0ZvcmNlKGJsb2NrLCBvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KSB7XHJcbiAgICByZXR1cm4gYmxvY2suZm9yY2U/IGJsb2NrLmZvcmNlKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpOiAwO1xyXG4gIH1cclxuXHJcbiAgY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpIHtcclxuICAgIHJldHVybiBibG9jay5jb3JuZXJGb3JjZT8gYmxvY2suY29ybmVyRm9yY2Uob2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodCk6IDA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGlnaHRNb2RlcyA9IHtcclxuICAgIGFtYmllbnQ6IHtcclxuICAgICAgc3RhdGljOiB7XHJcbiAgICAgICAgYW1iaWVudDogMHhmZmZmZmYsXHJcbiAgICAgICAgZGlyZWN0aW9uYWw6IDB4MDAwMDAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGxpdmU6IHtcclxuICAgICAgICBhbWJpZW50OiAweGY4ZjhmOCxcclxuICAgICAgICBkaXJlY3Rpb25hbDogMHgwZjBmMGZcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1peGVkOiB7XHJcbiAgICAgIHN0YXRpYzoge1xyXG4gICAgICAgIGFtYmllbnQ6IDB4ZjBmMGYwLFxyXG4gICAgICAgIGRpcmVjdGlvbmFsOiAweDEwMTAxMFxyXG4gICAgICB9LFxyXG4gICAgICBsaXZlOiB7XHJcbiAgICAgICAgYW1iaWVudDogMHhmMGYwZjAsXHJcbiAgICAgICAgZGlyZWN0aW9uYWw6IDB4MTAxMDEwXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZXRWaXN1YWxNb2RlKG1vZGUpIHtcclxuICAgIGNvbnN0IGwgPSBCb29rLmxpZ2h0TW9kZXNbdGhpcy5wLmxpZ2h0aW5nXVttb2RlXSxcclxuICAgICAgICAgIGJzID0gW3RoaXMubGVmdENvdmVyLCAuLi50aGlzLnNoZWV0QmxvY2tzLCB0aGlzLnJpZ2h0Q292ZXJdO1xyXG4gICAgZm9yKGxldCBiIG9mIGJzKSB7XHJcbiAgICAgIGIubWVzaC5yZWNlaXZlU2hhZG93ID0gbW9kZT09PSdsaXZlJztcclxuICAgICAgZm9yKGxldCBtIG9mIGIubWF0ZXJpYWxzKSB7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMudmlzdWFsLnNldExpZ2h0KGwuYW1iaWVudCwgbC5kaXJlY3Rpb25hbCk7XHJcbiAgfVxyXG5cclxuICBub3RpZnlCZWZvcmVBbmltYXRpb24oKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5hbmltYXRpb25Ob3RpZmljYXRpb24pIHtcclxuICAgICAgcmVzID0gUHJvbWlzZS5yZWplY3QoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbiA9IHRydWU7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ2JlZm9yZUFuaW1hdGlvbidcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuc2V0VmlzdWFsTW9kZSgnbGl2ZScpO1xyXG4gICAgICB0aGlzLmZsaXBEaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHJlcyA9IHRoaXMubGF5ZXJNYW5hZ2VyLmhpZGUoKS50aGVuKCgpPT4gZGVsZXRlIHRoaXMuZmxpcERpc2FibGVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBub3RpZnlBZnRlckFuaW1hdGlvbigpIHtcclxuICAgIGlmKHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHAgPSB0aGlzLmdldFBhZ2UoKTtcclxuICAgICAgaWYodGhpcy51c2VyRGlyZWN0aW9uLmxhc3RUb3BQYWdlIT09cCkge1xyXG4gICAgICAgIHRoaXMudXNlckRpcmVjdGlvbi5kaXJlY3Rpb24gPSBNYXRoLnNpZ24ocC10aGlzLnVzZXJEaXJlY3Rpb24ubGFzdFRvcFBhZ2UpO1xyXG4gICAgICAgIHRoaXMudXNlckRpcmVjdGlvbi5sYXN0VG9wUGFnZSA9IHA7XHJcbiAgICAgIH1cclxuICAgICAgZGVsZXRlIHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uO1xyXG4gICAgICB0aGlzLnNldFZpc3VhbE1vZGUoJ3N0YXRpYycpO1xyXG4gICAgICB0aGlzLmxheWVyTWFuYWdlci5zaG93KCk7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ2FmdGVyQW5pbWF0aW9uJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFVzZXJEaXJlY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyRGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgcmVkdWNlUGFnZXNXaWR0aChyZWR1Y2VXaWR0aCkge1xyXG4gICAgZm9yKGxldCBibG9jayBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgIGJsb2NrLnJlZHVjZVdpZHRoKHJlZHVjZVdpZHRoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbm5lY3RQaHlzaWNzKGJsb2NrLCBtYXNzLCBhbmdsZSwgdmVsb2NpdHksIGZsZXhpYmlsaXR5LCBjb3ZlckhlaWdodCwgc2ltdWxhdGVDbGIsIHJlbW92ZUNsYiwgcHJvZ3Jlc3NDbGIpIHtcclxuICAgIGNvbnN0IHR5cGUgPSAoKT0+IHRoaXMuaG92ZXJJbmZvPyAnaG92ZXInOiAodGhpcy5kcmFnSW5mbz8gJ2RyYWcnOiAnZnJlZScpLFxyXG4gICAgICByZXMgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCk/IFByb21pc2UucmVzb2x2ZSgpOiB0aGlzLm5vdGlmeUJlZm9yZUFuaW1hdGlvbigpO1xyXG4gICAgICBpZihibG9jaz09PXRoaXMubGVmdENvdmVyfHxibG9jaz09PXRoaXMucmlnaHRDb3Zlcikge1xyXG4gICAgICAgIHRoaXMuYm9va1NoYWRvd01hdGVyaWFsLm9wYWNpdHkgPSAwO1xyXG4gICAgICB9XHJcbiAgICByZXR1cm4gcmVzLnRoZW4oKCk9PiB7XHJcbiAgICAgIGJsb2NrLnBoeXNpY0lkID0gdGhpcy5zaGVldFBoeXNpY3MuYWRkT2JqZWN0KFxyXG4gICAgICAgIG1hc3MsXHJcbiAgICAgICAgYW5nbGUsXHJcbiAgICAgICAgdmVsb2NpdHksXHJcbiAgICAgICAgZmxleGliaWxpdHksXHJcbiAgICAgICAgY292ZXJIZWlnaHQsXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHNpbXVsYXRlQ2xiKGFuZ2wsIGNoKTtcclxuICAgICAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCBNYXRoLmFicyhhbmdsZS1hbmdsKS9NYXRoLlBJLCAncHJvY2VzcycsIHR5cGUoKSk7XHJcbiAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVNoYWRvdygpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHJlbW92ZUNsYihhbmdsLCBjaCk7XHJcbiAgICAgICAgICBkZWxldGUgYmxvY2sucGh5c2ljSWQ7XHJcbiAgICAgICAgICBwcm9ncmVzc0NsYihibG9jaywgTWF0aC5hYnMoYW5nbGUtYW5nbCkvTWF0aC5QSSwgJ2ZpbmlzaCcsIHR5cGUoKSk7XHJcbiAgICAgICAgICBpZighdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLmdldFBhZ2UoKTtcclxuICAgICAgICAgICAgaWYocD09PTB8fHA9PT10aGlzLmdldFBhZ2VzKCktMSkge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVkdWNlUGFnZXNXaWR0aCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMubm90aWZ5QWZ0ZXJBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVNoYWRvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlVGhyZWUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpLFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpXHJcbiAgICAgICk7XHJcbiAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCAwLCAnaW5pdCcsIHR5cGUoKSk7XHJcbiAgICAgIGlmKHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKT09PTEpIHtcclxuICAgICAgICB0aGlzLnJlZHVjZVBhZ2VzV2lkdGgoZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBibG9jaztcclxuICAgIH0pLmNhdGNoKCgpPT4gdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgdGhpcy5sYXN0TW91c2VQb3MudCs9ZHQ7XHJcbiAgICBpZih0aGlzLmlzUHJvY2Vzc2luZygpICYmIHRoaXMubGFzdE1vdXNlUG9zLnBhZ2VYIT09dW5kZWZpbmVkICYmIHRoaXMubGFzdE1vdXNlUG9zLnQtKHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUIHx8IDApPjAuMjUgJiYgIXRoaXMuaG92ZXJJbmZvICYmICF0aGlzLmRyYWdJbmZvKSB7XHJcbiAgICAgIHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUID0gdGhpcy5sYXN0TW91c2VQb3MudDtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAkKHRoaXMudmlzdWFsLmVsZW1lbnQpLnRyaWdnZXIoJC5FdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5sYXN0TW91c2VQb3MpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcy5zaW11bGF0ZShkdCk7XHJcbiAgfVxyXG5cclxuICBzcGxpdFNoZWV0QmxvY2soaSwgbGVmdFNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tpXTtcclxuICAgIGlmKGJsb2NrICYmIGxlZnRTaXplPGJsb2NrLmdldFNpemUoKSkge1xyXG4gICAgICBjb25zdCBuZXdCbG9jayA9IG5ldyBTaGVldEJsb2NrKHRoaXMudmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldFBhZ2VUZXh0dXJlLmJpbmQodGhpcyl9LCBibG9jay5wLmZpcnN0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5hbmdsZSwgYmxvY2suc3RhdGUpO1xyXG4gICAgICBibG9jay5zZXQoYmxvY2suYW5nbGUsIGJsb2NrLnN0YXRlLCBibG9jay5jb3JuZXIuaGVpZ2h0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLmFkZFNoZWV0QmxvY2soaSwgbmV3QmxvY2spO1xyXG4gICAgICByZXR1cm4gW25ld0Jsb2NrLCBibG9ja107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtZXJnZVNoZWV0QmxvY2tzKGZpcnN0LCBzaXplKSB7XHJcbiAgICBpZihmaXJzdDx0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICBzaXplID0gTWF0aC5taW4odGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtZmlyc3QsIHNpemUpO1xyXG4gICAgICBjb25zdCBmaXJzdEJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tmaXJzdF0sIGxhc3RCbG9jayA9IHRoaXMuc2hlZXRCbG9ja3NbZmlyc3Qrc2l6ZS0xXTtcclxuICAgICAgZmlyc3RCbG9jay5zZXQoZmlyc3RCbG9jay5hbmdsZSwgZmlyc3RCbG9jay5zdGF0ZSwgZmlyc3RCbG9jay5jb3JuZXIuaGVpZ2h0LCBmaXJzdEJsb2NrLnAuZmlyc3QsIGxhc3RCbG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKGZpcnN0KzEsIHNpemUtMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGVldEJsb2NrcyhhbmdsZSwgc3RhdGUpIHtcclxuICAgIGlmKHN0YXRlPT09J2Nsb3NlZCcpIHtcclxuICAgICAgdGhpcy5jbG9zZWRBbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5mb3JFYWNoKChzKT0+IHtcclxuICAgICAgaWYoIXMucGh5c2ljSWQpIHtcclxuICAgICAgICBzLnNldChhbmdsZSwgc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGlmKGFuZ2xlPFBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KDApO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMisyKmFuZ2xlKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoMCwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgwKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldCgwLCdjbG9zZWQnLDApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTwyKlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS1QSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KGEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS8yK2EsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtYSk7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8MypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtUEkvMik7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChQSS8yKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJLzIpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoUEksJ29wZW5lZCcsMCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw0KlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS0zKlBJLzQpK1BJLzI7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChhKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLWEpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoUEkvMiwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw1KlBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMi0yKihhbmdsZS1QSSkpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NipQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNSpQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLWEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkrYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSS1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSSthKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldChQSS8yLWEsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNipQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzIpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMik7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdvcGVuZWQnLGhlaWdodCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoMCwnb3BlbmVkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8OCpQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNypQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzItYSk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRMZWZ0KC1QSS8yKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMi1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSS8yK2EpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzItYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVTaWRlVGV4dHVyZShjb2xvciwgdHlwZSkge1xyXG4gICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKDgsIDgpO1xyXG4gICAgaWYodHlwZT09PSdjb2xvcicpIHtcclxuICAgICAgY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoY29sb3IsIDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCAwLCA4LCA3KTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKGNvbG9yLDAuNSksIDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCA3LCA4LCAxKTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZVByb3BzKHByb3BzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYWxjUHJvcHMoQm9vay5tZXJnZVByb3BzKGJvb2tQcm9wcygpLCBwcm9wcykpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1lcmdlUHJvcHMoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZmlyc3QsXHJcbiAgICAgIC4uLnNlY29uZCxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5maXJzdC5zaGVldCxcclxuICAgICAgICAuLi5zZWNvbmQuc2hlZXQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4uZmlyc3QuY292ZXIsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZmlyc3QucGFnZSxcclxuICAgICAgICAuLi5zZWNvbmQucGFnZSxcclxuICAgICAgfSxcclxuICAgICAgY3NzTGF5ZXJQcm9wczoge1xyXG4gICAgICAgIC4uLmZpcnN0LmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IGRlcHRoID0gcHJvcHMubWF4RGVwdGgvKHByb3BzLnNoZWV0cysyKjMpLCBwID0ge1xyXG4gICAgICAuLi5wcm9wcyxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5wcm9wcy5zaGVldFxyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0LFxyXG4gICAgICAgIC4uLnByb3BzLmNvdmVyXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhZ2U6IHtcclxuICAgICAgICAuLi5wcm9wcy5zaGVldCxcclxuICAgICAgICAuLi5wcm9wcy5wYWdlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNzc0xheWVyUHJvcHM6IHtcclxuICAgICAgICAuLi5wcm9wcy5jc3NMYXllclByb3BzLFxyXG4gICAgICAgICRcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHAuY292ZXIuZGVwdGggPSBNYXRoLm1pbihwLmNvdmVyLmRlcHRoLCAzKmRlcHRoKTtcclxuICAgIHAucGFnZS5kZXB0aCA9IE1hdGgubWluKHAucGFnZS5kZXB0aCwgZGVwdGgpO1xyXG4gICAgY29uc3Qgc2NhbGUgPSAxMCxcclxuICAgIGhlaWdodCA9IHNjYWxlKnAuaGVpZ2h0LFxyXG4gICAgd2lkdGggPSBzY2FsZSpwLndpZHRoLFxyXG4gICAgZmxleGlibGVDb3JuZXJLID0gTWF0aC5taW4oaGVpZ2h0LCB3aWR0aCkvd2lkdGgsXHJcbiAgICBmbGlwUHJvZ3Jlc3NDbGIgPSAoKT0+IHVuZGVmaW5lZCxcclxuICAgIHNoZWV0ID0ge1xyXG4gICAgICBzaWRlVGV4dHVyZTogcC5zaGVldC5zaWRlVGV4dHVyZSB8fCBCb29rLmNyZWF0ZVNpZGVUZXh0dXJlKHAuc2hlZXQuY29sb3IsIHAuc2hlZXQuc2lkZSksXHJcbiAgICB9LFxyXG4gICAgY292ZXIgPSB7XHJcbiAgICAgIC4uLnNoZWV0LFxyXG4gICAgICAuLi5wLmNvdmVyLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogZmxleGlibGVDb3JuZXJLKnAuY292ZXIuZmxleGlibGVDb3JuZXIsXHJcbiAgICAgIGRlcHRoOiBzY2FsZSpwLmNvdmVyLmRlcHRoLFxyXG4gICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICBwYWRkaW5nOiBzY2FsZSpwLmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBwYWdlID0ge1xyXG4gICAgICAuLi5zaGVldCxcclxuICAgICAgLi4ucC5wYWdlLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogZmxleGlibGVDb3JuZXJLKnAucGFnZS5mbGV4aWJsZUNvcm5lcixcclxuICAgICAgZGVwdGg6IHNjYWxlKnAucGFnZS5kZXB0aCxcclxuICAgICAgd2lkdGg6IGNvdmVyLndpZHRoIC0gY292ZXIucGFkZGluZyxcclxuICAgICAgaGVpZ2h0OiBjb3Zlci5oZWlnaHQgLSAyKmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBtYXJrZXIgPSB7XHJcbiAgICAgIHVzZTogZmFsc2UsXHJcbiAgICAgIGNvbG9yOiAwWEZGMDAwMCxcclxuICAgICAgc2l6ZTogc2NhbGUqMC4wMDFcclxuICAgIH07XHJcbiAgICBpZihjb3Zlci5jb2xvciE9PXNoZWV0LmNvbG9yICYmICFwLmNvdmVyLnNpZGVUZXh0dXJlKSB7XHJcbiAgICAgIGNvdmVyLnNpZGVUZXh0dXJlID0gQm9vay5jcmVhdGVTaWRlVGV4dHVyZShjb3Zlci5jb2xvciwgY292ZXIuc2lkZSk7XHJcbiAgICB9XHJcbiAgICBpZihwYWdlLmNvbG9yIT09c2hlZXQuY29sb3IgJiYgIXAucGFnZS5zaWRlVGV4dHVyZSkge1xyXG4gICAgICBwYWdlLnNpZGVUZXh0dXJlID0gQm9vay5jcmVhdGVTaWRlVGV4dHVyZShwYWdlLmNvbG9yLCBwYWdlLnNpZGUpO1xyXG4gICAgfVxyXG4gICAgaWYocC5jc3NMYXllcnNMb2FkZXIpIHtcclxuICAgICAgcC5jc3NMYXllcnNMb2FkZXIgPSB0aGlzLmNzc0xheWVyc0xvYWRlcihwLmNzc0xheWVyc0xvYWRlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gey4uLnAsIHNjYWxlLCBoZWlnaHQsIHdpZHRoLCBmbGlwUHJvZ3Jlc3NDbGIsIGNvdmVyLCBwYWdlLCBtYXJrZXJ9O1xyXG4gIH1cclxuXHJcbiAgY3NzTGF5ZXJzTG9hZGVyKGxvYWRlcikge1xyXG4gICAgcmV0dXJuIChuLCBjbGIpPT4ge1xyXG4gICAgICByZXR1cm4gbG9hZGVyKG4sIChscyk9PiB7XHJcbiAgICAgICAgY29uc3QgbmxzID0gW107XHJcbiAgICAgICAgZm9yKGxldCBsIG9mIGxzKSB7XHJcbiAgICAgICAgICBubHMucHVzaCh7XHJcbiAgICAgICAgICAgIC4uLmwsXHJcbiAgICAgICAgICAgIGpzOiB0aGlzLmNzc0xheWVySnNPYmplY3QobClcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xiKG5scyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVySnNPYmplY3QobCkge1xyXG4gICAgY29uc3QgY2xJZkV4ID0gKGYpPT4ge1xyXG4gICAgICBsZXQgcjtcclxuICAgICAgaWYoZikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICByID0gZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gKGMsIHApPT4ge1xyXG4gICAgICBsZXQgbyA9IHt9O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGluaXQgPSBldmFsKGwuanMpO1xyXG4gICAgICAgIG8gPSBpbml0PyBpbml0KGMsIHApIHx8IHt9OiB7fTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBubyA9IHRoaXMuY3NzTGF5ZXJKc09iamVjdEluaXQoYywgIHApLCBybyA9IHt9O1xyXG4gICAgICBmb3IobGV0IG4gb2YgWydoaWRlJywgJ2hpZGRlbicsICdzaG93JywgJ3Nob3duJywgJ2Rpc3Bvc2UnXSkge1xyXG4gICAgICAgIHJvW25dID0gKCk9PiB7XHJcbiAgICAgICAgICBjbElmRXgobm9bbl0pO1xyXG4gICAgICAgICAgY2xJZkV4KG9bbl0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJvO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVySnNPYmplY3RJbml0KGMsIHApIHtcclxuICAgIGMuZmluZCgnLmdvLXRvLXBhZ2UnKS5vbignY2xpY2snLCAoZSk9PiB7XHJcbiAgICAgIGxldCBuID0gJChlLnRhcmdldCk7XHJcbiAgICAgIHdoaWxlKG4ubGVuZ3RoICYmICFuLmhhc0NsYXNzKCdnby10by1wYWdlJykpIHtcclxuICAgICAgICBuID0gJChuWzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIG4gPSBwYXJzZUludChuLmF0dHIoJ2RhdGEtbnVtYmVyJykpO1xyXG4gICAgICBpZighaXNOYU4obikpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcC5zY2VuZS5jdHJsLmdvVG9QYWdlKG4tMSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgeXMgPSBjLmZpbmQoJy55b3V0dWJlJyk7XHJcbiAgICBpZih5cy5sZW5ndGgpIHtcclxuICAgICAgeXMuaHRtbCgnPGRpdiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+PC9kaXY+Jyk7XHJcbiAgICAgIGNvbnN0IHAwMSA9IChuLCBubSwgZCk9PiBuLmF0dHIobm0pPT09dW5kZWZpbmVkPyBkOiAobi5hdHRyKG5tKT09PSd0cnVlJz8gMTogMCk7XHJcbiAgICAgIFlvdVR1YmVBcGkuaW5pdCgpLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgZm9yKGxldCBpPTA7IGk8eXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGNvbnN0IG4gPSAkKHlzW2ldKSxcclxuICAgICAgICAgIHBsYXllclZhcnMgPSB7bG9vcDogcDAxKG4sICdkYXRhLWxvb3AnLCAwKSwgY29udHJvbHM6IHAwMShuLCAnZGF0YS1jb250cm9scycsIDEpLCBtdXRlOiBwMDEobiwgJ2RhdGEtbXV0ZWQnLCAwKX07XHJcbiAgICAgICAgICBpZihwbGF5ZXJWYXJzLmxvb3ApIHtcclxuICAgICAgICAgICAgcGxheWVyVmFycy5wbGF5bGlzdCA9IG4uYXR0cignZGF0YS1pZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc3QgcGxheWVyID0gbmV3IFlULlBsYXllcihuLmZpbmQoJ2RpdicpWzBdLCB7dmlkZW9JZDogbi5hdHRyKCdkYXRhLWlkJyksIHBsYXllclZhcnN9KTtcclxuICAgICAgICAgIG5bMF0ucGxheWVyID0gcGxheWVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhZHMgPSBjLmZpbmQoJy5hZHNieWdvb2dsZScpO1xyXG4gICAgaWYoYWRzLmxlbmd0aCkge1xyXG4gICAgICBpZighdGhpcy52aXN1YWwud25kLmFkc2J5Z29vZ2xlKSB7XHJcbiAgICAgICAgdGhpcy52aXN1YWwud25kLmFkc2J5Z29vZ2xlID0gW107XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy52aXN1YWwuZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3BhZ2VhZDIuZ29vZ2xlc3luZGljYXRpb24uY29tL3BhZ2VhZC9qcy9hZHNieWdvb2dsZS5qcz9jbGllbnQ9JythZHMuYXR0cignZGF0YS1hZC1jbGllbnQnKTtcclxuICAgICAgICB0aGlzLnZpc3VhbC5kb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoaWRlOiAoKT0+IHtcclxuICAgICAgICBpZih0aGlzLnBlbmRpbmdQbGF5ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgdHlwZTogJ3BlbmRpbmdQbGF5ZXJzJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGMuZmluZCgnLnBhdXNlLW9uLWhpZGUnKS5lYWNoKChfLCBwKT0+IHRoaXMuY3NzRnMucGF1c2UocCkpO1xyXG4gICAgICB9LFxyXG4gICAgICBzaG93bjogKCk9PiB7XHJcbiAgICAgICAgYy5maW5kKCcucGxheS1vbi1zaG93bicpLmVhY2goKF8sIHApPT4gdGhpcy5jc3NGcy5wbGF5KHApKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgbGV0IHVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgYy5maW5kKCcuYWRzYnlnb29nbGUnKS5lYWNoKChfLCBhZCk9PiAodXBkYXRlPXVwZGF0ZXx8JChhZCkuaHRtbCgpLnRyaW0oKT09PScnKSk7XHJcbiAgICAgICAgICBpZih1cGRhdGUpIHtcclxuICAgICAgICAgICAgdHJ5IHt0aGlzLnZpc3VhbC53bmQuYWRzYnlnb29nbGUucHVzaCh7fSk7fSBjYXRjaChlKSB7Y29uc29sZS5lcnJvcihlKTt9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICAgfSxcclxuICAgICAgZGlzcG9zZTogKCk9PiBjLmZpbmQoJy5wYXVzZS1vbi1oaWRlJykuZWFjaCgoXywgcCk9PiB0aGlzLmNzc0ZzLnBhdXNlKHApKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0ZzID0ge1xyXG4gICAgcGxheTogKHBsYXllcik9PiB7XHJcbiAgICAgIGlmKHBsYXllci5wbGF5KSB7XHJcbiAgICAgICAgcGxheWVyLmZiM2ROb1BsYXkgPSBmYWxzZTtcclxuICAgICAgICAocGxheWVyLnBsYXkoKXx8e2NhdGNoOiAoKT0+IHVuZGVmaW5lZH0pLmNhdGNoKChlKT0+IHtcclxuICAgICAgICAgIGlmKCFwbGF5ZXIuZmIzZE5vUGxheSAmJiBlLm5hbWU9PT0nTm90QWxsb3dlZEVycm9yJykge1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdQbGF5ZXJzLnB1c2gocGxheWVyKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICB0eXBlOiAncGVuZGluZ1BsYXllcnMnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoJChwbGF5ZXIpLmhhc0NsYXNzKCd5b3V0dWJlJykpIHtcclxuICAgICAgICBjb25zdCBwID0gcGxheWVyLnBsYXllcjtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IGZhbHNlO1xyXG4gICAgICAgIGlmKHAgJiYgcC5wbGF5VmlkZW8pIHtcclxuICAgICAgICAgIHAucGxheVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgICAgaWYoIXBsYXllci5mYjNkTm9QbGF5KSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jc3NGcy5wbGF5KHBsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcGF1c2U6IChwbGF5ZXIpPT4ge1xyXG4gICAgICBpZihwbGF5ZXIucGF1c2UpIHtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IHRydWU7XHJcbiAgICAgICAgcGxheWVyLnBhdXNlKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZigkKHBsYXllcikuaGFzQ2xhc3MoJ3lvdXR1YmUnKSkge1xyXG4gICAgICAgIGNvbnN0IHAgPSBwbGF5ZXIucGxheWVyO1xyXG4gICAgICAgIHBsYXllci5mYjNkTm9QbGF5ID0gdHJ1ZTtcclxuICAgICAgICBpZihwICYmIHAucGF1c2VWaWRlbykge1xyXG4gICAgICAgICAgcC5wYXVzZVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Cb29rLmpzIiwiaW1wb3J0IHskLCBUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBDb250cm9sbGVyIGZyb20gJ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rQ29udHJvbGxlclByb3BzfSBmcm9tICcuLi9wcm9wcy9ib29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBFdmVudHNUb0FjdGlvbnMgZnJvbSAnRXZlbnRzVG9BY3Rpb25zJztcclxuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJztcclxuaW1wb3J0IE9iamVjdDNEV2F0Y2hlciBmcm9tICdPYmplY3QzRFdhdGNoZXInO1xyXG5pbXBvcnQgRnVsbFNjcmVlblggZnJvbSAnRnVsbFNjcmVlblgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va0NvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoYm9vaywgdmlldywgcHJvcHMpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5hdmlnYXRpb25Db250cm9scyA9IHRydWU7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy52aXN1YWwgPSBib29rLnZpc3VhbDtcclxuICAgIHRoaXMucCA9IEJvb2tDb250cm9sbGVyLnByZXBhcmVQcm9wcyhwcm9wcyk7XHJcbiAgICB0aGlzLnAucnRsID0gYm9vay5wLnJ0bDtcclxuXHJcbiAgICB0aGlzLm9yYml0ID0gYm9vay52aXN1YWwuZ2V0T3JiaXQoKTtcclxuICAgIGJvb2suc2V0RmxpcFByb2dyZXNzQ2xiKHRoaXMudXBkYXRlVmlld0lmU3RhdGUuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5iaW5kQWN0aW9ucygpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHNtYXJ0UGFuOiAhdGhpcy5hY3Rpb25zWydjbWRTbWFydFBhbiddLmFjdGl2ZSxcclxuICAgICAgc2luZ2xlUGFnZTogdGhpcy5pc1NpbmdsZVBhZ2VBdmFpbGFibGUoKT8gdGhpcy5hY3Rpb25zWydjbWRTaW5nbGVQYWdlJ10uYWN0aXZlIHx8IHRoaXMuYWN0aW9uc1snY21kU2luZ2xlUGFnZSddLmFjdGl2ZUZvck1vYmlsZSAmJiB0aGlzLnZpc3VhbC5pc01vYmlsZSgpOiBmYWxzZSxcclxuICAgICAgc3RhdHM6IHRoaXMuYWN0aW9uc1snY21kU3RhdHMnXS5hY3RpdmUsXHJcbiAgICAgIGFjdGl2ZVNpZGU6IDEsXHJcbiAgICAgIGF1dG9QbGF5OiB0aGlzLmFjdGlvbnNbJ2NtZEF1dG9QbGF5J10uYWN0aXZlXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGJveDAgPSBuZXcgVEhSRUUuQm94MygpLCBib3gxID0gbmV3IFRIUkVFLkJveDMoKSxcclxuICAgICAgICAgIGJvb2tXaWR0aCA9IGJvb2sub3BlbmVkQm94Lm1heC54LWJvb2sub3BlbmVkQm94Lm1pbi54O1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlciA9IG5ldyBPYmplY3QzRFdhdGNoZXIodGhpcy52aXN1YWwsICgpPT4ge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgICBpZih0aGlzLnN0YXRlLmFjdGl2ZVNpZGUpIHtcclxuICAgICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgYm94MS5zZXRGcm9tT2JqZWN0KGJvb2sucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgYm94MC51bmlvbihib3gxKTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KGJveDAubWluLngtYm94MC5taW4ueCwgYm9va1dpZHRoKSwgeDAgPSAoYm94MC5taW4ueCtib3gwLm1heC54KS8yO1xyXG4gICAgICAgIGJveDAubWluLnggPSB4MC0wLjUqd2lkdGg7XHJcbiAgICAgICAgYm94MC5tYXgueCA9IHgwKzAuNSp3aWR0aDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYm94MDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IHRoaXMucC5zY2FsZS5kZWZhdWx0O1xyXG4gICAgdGhpcy5ib29rLnNldFpvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuXHJcbiAgICB0aGlzLlN0YXRzID0gbmV3IFN0YXRzKCk7XHJcbiAgICB0aGlzLlN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgdGhpcy5TdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uU2NyZWVuTW9kZUNoYW5nZWQ6IHRoaXMub25TY3JlZW5Nb2RlQ2hhbmdlZC5iaW5kKHRoaXMpLFxyXG4gICAgICBzdGF0czogdGhpcy5TdGF0cy51cGRhdGUuYmluZCh0aGlzLlN0YXRzKSxcclxuICAgICAgb25VcGRhdGVWaWV3OiB0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKVxyXG4gICAgfVxyXG4gICAgRnVsbFNjcmVlblguYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnZpZXcuZ2V0UGFyZW50Q29udGFpbmVyKCkub3duZXJEb2N1bWVudCwgdGhpcy5iaW5kcy5vblNjcmVlbk1vZGVDaGFuZ2VkKTtcclxuXHJcbiAgICB0aGlzLmNtZFNtYXJ0UGFuKCk7XHJcblxyXG4gICAgdGhpcy5ib29rLmVuYWJsZUxvYWRpbmdBbmltYXRpb24odGhpcy5wLmxvYWRpbmdBbmltYXRpb24uYm9vayk7XHJcbiAgICBpZih0aGlzLnAubG9hZGluZ0FuaW1hdGlvbi5za2luKSB7XHJcbiAgICAgIHRoaXMuaW5pdExvYWRpbmdBbmltYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJvb2suZW5hYmxlTG9hZGluZ0FuaW1hdGlvbih0aGlzLnAubG9hZGluZ0FuaW1hdGlvbi5ib29rKTtcclxuICAgIHRoaXMuYm9vay5zZXRBdXRvUmVzb2x1dGlvbih0aGlzLnAuYXV0b1Jlc29sdXRpb24pO1xyXG5cclxuICAgIHRoaXMudmlzdWFsLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdwZW5kaW5nUGxheWVycycsIHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICBpZih0aGlzLnN0YXRlLmF1dG9QbGF5KSB7XHJcbiAgICAgIHRoaXMuYXV0b1BsYXkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBGdWxsU2NyZWVuWC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudmlldy5nZXRQYXJlbnRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCB0aGlzLmJpbmRzLm9uU2NyZWVuTW9kZUNoYW5nZWQpO1xyXG4gICAgZGVsZXRlIHRoaXMuYm9vaztcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWw7XHJcbiAgfVxyXG5cclxuICByZWFkeShzY2VuZSkge1xyXG4gICAgaWYodGhpcy52aWV3LnRlbXBsYXRlT2JqZWN0LmFwcExvYWRlZCkge1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy52aWV3LnRlbXBsYXRlT2JqZWN0LmFwcExvYWRlZChzY2VuZSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZGluZ0FuaW1hdGlvbkhhbmRsZXIoKSB7XHJcbiAgICBjb25zdCBwYWdlcyA9IHRoaXMuYm9vay5nZXRUb3BQYWdlcygpO1xyXG4gICAgbGV0IHZpc2libGUgPSBmYWxzZTtcclxuICAgIGZvcihsZXQgbiBvZiBwYWdlcykge1xyXG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuYm9vay5nZXRQYWdlU3RhdGUobik7XHJcbiAgICAgIHZpc2libGUgPSBzdGF0ZSE9PSdhY3RpdmUnO1xyXG4gICAgICBpZih2aXNpYmxlKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZpc2libGUgPSB2aXNpYmxlIHx8IHRoaXMucHJpbnRlciAmJiB0aGlzLnByaW50ZXIubG9hZGluZztcclxuICAgIGlmKHZpc2libGUpIHtcclxuICAgICAgaWYoIXRoaXMucGVuZGluZ0xvYWRpbmdBbmltYXRpb24pIHtcclxuICAgICAgICB0aGlzLnBlbmRpbmdMb2FkaW5nQW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgaWYodGhpcy5wZW5kaW5nTG9hZGluZ0FuaW1hdGlvbiAmJiB0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nJywge1xyXG4gICAgICAgICAgICAgIHZpc2libGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMjAwMCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZWxldGUgdGhpcy5wZW5kaW5nTG9hZGluZ0FuaW1hdGlvbjtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nJywge1xyXG4gICAgICAgIHZpc2libGVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaW5pdExvYWRpbmdBbmltYXRpb24oKSB7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5sb2FkaW5nQW5pbWF0aW9uSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZUFuaW1hdGlvbicsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgaGFuZGxlcik7XHJcbiAgICB0aGlzLmJvb2suYWRkRXZlbnRMaXN0ZW5lcignc3RhcnRSZW5kZXJpbmcnLCBoYW5kbGVyKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdlbmRSZW5kZXJpbmcnLCBoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZU5hdmlnYXRpb24oZW5hYmxlKSB7XHJcbiAgICB0aGlzLm5hdmlnYXRpb25Db250cm9scyA9IGVuYWJsZTtcclxuICB9XHJcblxyXG4gIHNldFRvY0N0cmwodG9jQ3RybCkge1xyXG4gICAgdGhpcy50b2NDdHJsID0gdG9jQ3RybDtcclxuICAgIHRoaXMudG9jQ3RybC5vbkNoYW5nZSA9IHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy50b2NDdHJsLnNldEFjdGl2ZVRhYih0aGlzLmFjdGlvbnNbJ2NtZFRvYyddLmRlZmF1bHRUYWIpO1xyXG4gICAgaWYodGhpcy5hY3Rpb25zWydjbWRUb2MnXS5hY3RpdmUgJiYgIXRvY0N0cmwudmlzaWJsZSkge1xyXG4gICAgICB0b2NDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGFyZUN0cmwoc2hhcmVDdHJsKSB7XHJcbiAgICB0aGlzLnNoYXJlQ3RybCA9IHNoYXJlQ3RybDtcclxuICAgIHRoaXMuc2hhcmVDdHJsLm9uQ2hhbmdlID0gdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHNldFByaW50ZXIocHJpbnRlcikge1xyXG4gICAgdGhpcy5wcmludGVyID0gcHJpbnRlcjtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmxvYWRpbmdBbmltYXRpb25IYW5kbGVyLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnByaW50ZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGluZycsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5wcmludGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBzZXRTb3VuZHMoc291bmRzKSB7XHJcbiAgICB0aGlzLnNvdW5kcyA9IHNvdW5kcztcclxuICAgIHNvdW5kcy5zZXRFbmFibGVkKHRoaXMuYWN0aW9uc1snY21kU291bmRzJ10uYWN0aXZlKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcblxyXG4gIG9uU2NyZWVuTW9kZUNoYW5nZWQoZSkge1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjYW5ab29tSW4oKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuc3RhdGUuc21hcnRQYW4gfHwgTWF0aC5hYnModGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUubWF4KT50aGlzLnAuZXBzO1xyXG4gIH1cclxuXHJcbiAgY2FuWm9vbU91dCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5zbWFydFBhbiB8fCBNYXRoLmFicyh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlLXRoaXMucC5zY2FsZS5taW4pPnRoaXMucC5lcHM7XHJcbiAgfVxyXG5cclxuICBjYW5EZWZhdWx0Wm9vbSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gIH1cclxuXHJcbiAgc2V0Qm9va1pvb20oc2NhbGUpIHtcclxuICAgIC8vIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAvLyAgIGlmKE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtc2NhbGUpPDFlLTMpIHtcclxuICAgICAgICB0aGlzLmJvb2suc2V0Wm9vbShzY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfSwgMTAwMCk7XHJcbiAgfVxyXG5cclxuICBjbWRBdXRvUGxheSgpIHtcclxuICAgIHRoaXMuc3RhdGUuYXV0b1BsYXkgPSAhdGhpcy5zdGF0ZS5hdXRvUGxheTtcclxuICAgIGlmKHRoaXMuc3RhdGUuYXV0b1BsYXkpIHtcclxuICAgICAgdGhpcy5hdXRvUGxheSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBhdXRvUGxheSgpIHtcclxuICAgIGNvbnN0IHBlbmRpbmdBdXRvUGxheSA9IERhdGUubm93KCk7XHJcbiAgICB0aGlzLnBlbmRpbmdBdXRvUGxheSA9IHBlbmRpbmdBdXRvUGxheTtcclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKHRoaXMucGVuZGluZ0F1dG9QbGF5PT09cGVuZGluZ0F1dG9QbGF5ICYmIHRoaXMuc3RhdGUuYXV0b1BsYXkpIHtcclxuICAgICAgICBpZighdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpKSB7XHJcbiAgICAgICAgICBsZXQgZmxpcHBlZDtcclxuICAgICAgICAgIGlmKHRoaXMucC5ydGwpIHtcclxuICAgICAgICAgICAgaWYoZmxpcHBlZCA9IHRoaXMuY2FuRmxpcExlZnQoKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuY21kQmFja3dhcmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPSB0aGlzLmNhbkZsaXBSaWdodCgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbWRGb3J3YXJkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCFmbGlwcGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ29Ub1BhZ2UoMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXV0b1BsYXkoKTtcclxuICAgICAgfVxyXG4gICAgfSwgdGhpcy5ib29rLnAuYXV0b1BsYXlEdXJhdGlvbik7XHJcbiAgfVxyXG5cclxuICBjbWRab29tSW4oKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnAuc2NhbGUubWF4LCB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlK3RoaXMucC5zY2FsZS5kZWx0YSk7XHJcbiAgICAgIHRoaXMuc2V0Qm9va1pvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5vcmJpdC56b29tSW4oNi42KnRoaXMucC5zY2FsZS5kZWx0YS8wLjMyKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kWm9vbU91dCgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IE1hdGgubWF4KHRoaXMucC5zY2FsZS5taW4sIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLmRlbHRhKTtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLm9yYml0Lnpvb21PdXQoNi42KnRoaXMucC5zY2FsZS5kZWx0YS8wLjMyKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2NhbGUoc2NhbGUpIHtcclxuICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnAuc2NhbGUubWF4LCBNYXRoLm1heCh0aGlzLnAuc2NhbGUubWluLCBzY2FsZSkpO1xyXG4gICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kRGVmYXVsdFpvb20oKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSB0aGlzLnAuc2NhbGUuZGVmYXVsdDtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRUb2MoKSB7XHJcbiAgICBpZih0aGlzLnRvY0N0cmwpIHtcclxuICAgICAgdGhpcy50b2NDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRTaGFyZSgpIHtcclxuICAgIGlmKHRoaXMuc2hhcmVDdHJsKSB7XHJcbiAgICAgIHRoaXMuc2hhcmVDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRCYWNrd2FyZCgpIHtcclxuICAgIGlmKCF0aGlzLmNhbkZsaXBMZWZ0KCkpIHJldHVybjtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYodGhpcy5zdGF0ZS5hY3RpdmVTaWRlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnQmFja3dhcmQoKSB7XHJcbiAgICB0aGlzLmNtZEJhY2t3YXJkKCk7XHJcbiAgfVxyXG5cclxuICBjbWRGb3J3YXJkKCkge1xyXG4gICAgaWYoIXRoaXMuY2FuRmxpcFJpZ2h0KCkpIHJldHVybjtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYoIXRoaXMuc3RhdGUuYWN0aXZlU2lkZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodCgxKSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnRm9yd2FyZCgpIHtcclxuICAgIHRoaXMuY21kRm9yd2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgY21kU2F2ZSgpIHtcclxuICAgIGNvbnN0IGEgPSAkKCc8YSBocmVmPVwiJyt0aGlzLnAuZG93bmxvYWRVUkwrJ1wiIGRvd25sb2FkIHRhcmdldD1cIl9ibGFua1wiPjwvYT4nKS5hcHBlbmRUbyh0aGlzLnZpZXcuZ2V0Q29udGFpbmVyKCkpO1xyXG4gICAgYVswXS5jbGljaygpO1xyXG4gICAgYS5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIGNtZFByaW50KCkge1xyXG4gICAgdGhpcy5wcmludGVyLnByaW50KCk7XHJcbiAgfVxyXG5cclxuICBjbWRGdWxsU2NyZWVuKCkge1xyXG4gICAgaWYoIUZ1bGxTY3JlZW5YLmFjdGl2YXRlZCgpKSB7XHJcbiAgICAgIEZ1bGxTY3JlZW5YLnJlcXVlc3QodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBGdWxsU2NyZWVuWC5jYW5jZWwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFNtYXJ0UGFuKCkge1xyXG4gICAgdGhpcy5zdGF0ZS5zbWFydFBhbiA9ICF0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zbWFydFBhbikge1xyXG4gICAgICB0aGlzLm9yYml0Lm1pbkF6aW11dGhBbmdsZSA9IDA7XHJcbiAgICAgIHRoaXMub3JiaXQubWF4QXppbXV0aEFuZ2xlID0gMDtcclxuICAgICAgdGhpcy5vcmJpdC5taW5Qb2xhckFuZ2xlID0gMDtcclxuICAgIFx0dGhpcy5vcmJpdC5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSS80O1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3JiaXQubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1pblBvbGFyQW5nbGUgPSAwO1xyXG4gICAgXHR0aGlzLm9yYml0Lm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJO1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgaXNTaW5nbGVQYWdlQXZhaWxhYmxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYm9vay5nZXRQYWdlcygpIT09MjtcclxuICB9XHJcblxyXG4gIGNtZFNpbmdsZVBhZ2UoKSB7XHJcbiAgICBpZih0aGlzLmlzU2luZ2xlUGFnZUF2YWlsYWJsZSgpKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUuc2luZ2xlUGFnZSA9ICF0aGlzLnN0YXRlLnNpbmdsZVBhZ2U7XHJcbiAgICAgIHRoaXMuc2V0Qm9va1pvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSk7XHJcbiAgICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoQXN5bmMoe1xyXG4gICAgICAgIHR5cGU6ICdwYWdlTW9kZScsXHJcbiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuc2luZ2xlUGFnZT8gJ3NpbmdsZSc6ICdkb3VibGUnXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kU291bmRzKCkge1xyXG4gICAgaWYodGhpcy5zb3VuZHMpIHtcclxuICAgICAgdGhpcy5zb3VuZHMudG9nbGUoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kU3RhdHMoKSB7XHJcbiAgICB0aGlzLnN0YXRlLnN0YXRzID0gIXRoaXMuc3RhdGUuc3RhdHM7XHJcbiAgICBpZih0aGlzLnN0YXRlLnN0YXRzKSB7XHJcbiAgICAgICQodGhpcy52aWV3LmdldENvbnRhaW5lcigpKS5hcHBlbmQodGhpcy5TdGF0cy5kb21FbGVtZW50KTtcclxuICAgICAgdGhpcy52aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy5zdGF0cyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJCh0aGlzLnZpZXcuZ2V0Q29udGFpbmVyKCkpLmZpbmQodGhpcy5TdGF0cy5kb21FbGVtZW50KS5yZW1vdmUoKTtcclxuICAgICAgdGhpcy52aXN1YWwucmVtb3ZlUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy5zdGF0cyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZFBlbmRpbmdQbGF5KCkge1xyXG4gICAgdGhpcy5ib29rLnJlc29sdmVQZW5kaW5nUGxheWVycygpO1xyXG4gIH1cclxuXHJcbiAgY21kR290b0ZpcnN0UGFnZSgpIHtcclxuICAgIHRoaXMuZ29Ub1BhZ2UoMCk7XHJcbiAgfVxyXG5cclxuICBjbWRHb3RvTGFzdFBhZ2UoKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKTtcclxuICB9XHJcblxyXG4gIGdvVG9QYWdlKHBhZ2UpIHtcclxuICAgIHBhZ2UgPSBNYXRoLm1heChNYXRoLm1pbihwYWdlLCB0aGlzLmJvb2suZ2V0UGFnZXMoKS0xKSwwKTtcclxuICAgIGlmKHRoaXMucC5ydGwpIHtcclxuICAgICAgcGFnZSA9IHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xLXBhZ2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYWdlTnVtID0gTWF0aC5tYXgoTWF0aC5taW4ocGFnZSwgdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEpLDApO1xyXG4gICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gKHBhZ2VOdW0rMSklMjtcclxuICAgIGxldCB0YXJnZXQgPSBNYXRoLm1heChNYXRoLm1pbihwYWdlLTErcGFnZSUyLCB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktMSksMCksIGN1cnJlbnQgPSB0aGlzLmJvb2suZ2V0UGFnZSgpLCBmbGlwcyA9IFtdLCBjb3ZzID0gMDs7XHJcbiAgICBpZih0YXJnZXQhPWN1cnJlbnQpIHtcclxuICAgICAgaWYoY3VycmVudD09PTApIHtcclxuICAgICAgICBmbGlwcy5wdXNoKDEpO1xyXG4gICAgICAgIGN1cnJlbnQrPTE7XHJcbiAgICAgICAgKytjb3ZzO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoY3VycmVudD09PXRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKSB7XHJcbiAgICAgICAgZmxpcHMucHVzaCgtMSk7XHJcbiAgICAgICAgY3VycmVudC09MjtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGN2ID0gMDtcclxuICAgICAgaWYodGFyZ2V0PT09MCkge1xyXG4gICAgICAgIGN2ID0gLTE7XHJcbiAgICAgICAgdGFyZ2V0Kz0xO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRhcmdldD09PXRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKSB7XHJcbiAgICAgICAgY3YgPSAxO1xyXG4gICAgICAgIHRhcmdldC09MjtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGFyZ2V0LWN1cnJlbnQpIHtcclxuICAgICAgICBmbGlwcy5wdXNoKE1hdGguY2VpbCgodGFyZ2V0LWN1cnJlbnQpLzIpKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjdikge1xyXG4gICAgICAgIGZsaXBzLnB1c2goY3YpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2V0Q2xiID0gKGZsLCB0aW1lLCBjbGIpPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgICBpZihmbDwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwTGVmdCgtZmwsIGNsYikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoZmwsIGNsYikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sIHRpbWUpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYoY292cz09PTIpIHtcclxuICAgICAgc2V0Q2xiKGZsaXBzWzBdLCAwLCAoYmxvY2ssIHByb2dyZXNzLCBzdGF0ZSk9PiB7XHJcbiAgICAgICAgaWYoc3RhdGU9PSdmaW5pc2gnICYmIHByb2dyZXNzPT0xKSB7XHJcbiAgICAgICAgICBzZXRDbGIoZmxpcHNbZmxpcHMubGVuZ3RoLTFdLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLnRoZW4oKCk9PiBzZXRDbGIoZmxpcHNbMV0sIDQwMCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGxldCBuZXh0ID0gUHJvbWlzZS5yZXNvbHZlKCksIHRpbWUgPSAwO1xyXG4gICAgICBmb3IobGV0IGZsIG9mIGZsaXBzKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHRpbWU7XHJcbiAgICAgICAgbmV4dCA9IG5leHQudGhlbigoKT0+IHNldENsYihmbCwgdCkpO1xyXG4gICAgICAgIHRpbWUgPSA0MDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXJ0RmxpcChmbGlwUmVzKSB7XHJcbiAgICByZXR1cm4gZmxpcFJlcz8gZmxpcFJlcy50aGVuKChibG9jayk9PiB7XHJcbiAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgICAgIHR5cGU6ICdzdGFydEZsaXAnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfSk6IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgZW5kRmxpcChibG9jaykge1xyXG4gICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgdHlwZTogJ2VuZEZsaXAnXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBibG9jaztcclxuICB9XHJcblxyXG4gIGdldFBhZ2UoKSB7XHJcbiAgICBjb25zdCBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2UoKTtcclxuICAgIHJldHVybiBwYWdlPyBNYXRoLm1pbih0aGlzLmJvb2suZ2V0UGFnZSgpK3RoaXMuc3RhdGUuYWN0aXZlU2lkZSwgdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEpOiAwO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZUZvckdVSSgpIHtcclxuICAgIGxldCBuID0gKHRoaXMuc3RhdGUuc2luZ2xlUGFnZT8gdGhpcy5nZXRQYWdlKCk6IHRoaXMuYm9vay5nZXRQYWdlKCkpKzE7XHJcbiAgICBpZih0aGlzLnAucnRsKSB7XHJcbiAgICAgIG4gPSB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktbisxO1xyXG4gICAgfVxyXG4gICAgaWYobj50aGlzLmJvb2suZ2V0UGFnZXMoKSkge1xyXG4gICAgICBuID0gdGhpcy5ib29rLmdldFBhZ2VzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG4gIGlucFBhZ2UoZSwgZGF0YSkge1xyXG4gICAgdGhpcy5nb1RvUGFnZShkYXRhLTEpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlld0lmU3RhdGUoYmxvY2ssIHByb2dyZXNzLCBzdGF0ZSwgdHlwZSkge1xyXG4gICAgaWYoc3RhdGU9PT0naW5pdCcgfHwgc3RhdGU9PT0nZmluaXNoJykge1xyXG4gICAgICBzZXRUaW1lb3V0KHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpLCAxMDApO1xyXG4gICAgfVxyXG4gICAgaWYoc3RhdGU9PT0nZmluaXNoJykge1xyXG4gICAgICB0aGlzLmVuZEZsaXAoYmxvY2spO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNDbWRWaXNpYmxlKG5hbWUpIHtcclxuICAgIHJldHVybiAkKHRoaXMudmlzdWFsLmVsZW1lbnQpLndpZHRoKCk8dGhpcy5wLm5hcnJvd1ZpZXcud2lkdGg/ICh0aGlzLmFjdGlvbnNbbmFtZV0uZW5hYmxlZEluTmFycm93PT09dW5kZWZpbmVkPyB0aGlzLmFjdGlvbnNbbmFtZV0uZW5hYmxlZDogdGhpcy5hY3Rpb25zW25hbWVdLmVuYWJsZWRJbk5hcnJvdyk6IHRoaXMuYWN0aW9uc1tuYW1lXS5lbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlld1N0YXRlKCkge1xyXG4gICAgdGhpcy52aWV3U3RhdGUgPSB7XHJcbiAgICAgICdjbWRab29tSW4nOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmNhblpvb21JbigpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRab29tSW4nKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRab29tT3V0Jzoge1xyXG4gICAgICAgIGVuYWJsZTogdGhpcy5jYW5ab29tT3V0KCksXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFpvb21PdXQnKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWREZWZhdWx0Wm9vbSc6IHtcclxuICAgICAgICBlbmFibGU6IHRoaXMuY2FuRGVmYXVsdFpvb20oKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kRGVmYXVsdFpvb20nKSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuY2FuRGVmYXVsdFpvb20oKSAmJiBNYXRoLmFicyh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlLXRoaXMucC5zY2FsZS5kZWZhdWx0KTx0aGlzLnAuZXBzXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRUb2MnOiB7XHJcbiAgICAgICAgZW5hYmxlOiAhIXRoaXMudG9jQ3RybCxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kVG9jJykgJiYgdGhpcy50b2NDdHJsLFxyXG4gICAgICAgIGFjdGl2ZTogdGhpcy50b2NDdHJsICYmIHRoaXMudG9jQ3RybC52aXNpYmxlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRTaGFyZSc6IHtcclxuICAgICAgICBlbmFibGU6ICEhdGhpcy5zaGFyZUN0cmwsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFNoYXJlJykgJiYgdGhpcy5zaGFyZUN0cmwsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnNoYXJlQ3RybCAmJiB0aGlzLnNoYXJlQ3RybC52aXNpYmxlXHJcbiAgICAgIH0sXHJcbiAgICAgICdpbnBQYWdlcyc6IHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiB0aGlzLmJvb2suZ2V0UGFnZXMoKVxyXG4gICAgICB9LFxyXG4gICAgICAnaW5wUGFnZSc6IHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogIXRoaXMuYm9vay5pc1Byb2Nlc3NpbmcoKSAmJiB0aGlzLm5hdmlnYXRpb25Db250cm9scyxcclxuICAgICAgICB2YWx1ZTogdGhpcy5nZXRQYWdlRm9yR1VJKClcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNhdmUnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTYXZlJykgJiYgISF0aGlzLnAuZG93bmxvYWRVUkwsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kUHJpbnQnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRQcmludCcpICYmICEhdGhpcy5wcmludGVyLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZEZ1bGxTY3JlZW4nOiB7XHJcbiAgICAgICAgZW5hYmxlOiBGdWxsU2NyZWVuWC5hdmFpbGFibGUoKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kRnVsbFNjcmVlbicpLFxyXG4gICAgICAgIGFjdGl2ZTogRnVsbFNjcmVlblguYXZhaWxhYmxlKCkgJiYgRnVsbFNjcmVlblguYWN0aXZhdGVkKClcclxuICAgICAgfSxcclxuICAgICAgJ3dpZENvbnRyb2xzJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ3dpZFNldHRpbmdzJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnd2lkU2V0dGluZ3MnKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICd3aWRUb29sYmFyJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnd2lkVG9vbGJhcicpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNtYXJ0UGFuJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kU21hcnRQYW4nKSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuc21hcnRQYW5cclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNpbmdsZVBhZ2UnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmlzU2luZ2xlUGFnZUF2YWlsYWJsZSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTaW5nbGVQYWdlJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnNpbmdsZVBhZ2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNvdW5kcyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogIHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTb3VuZHMnKSAmJiAhIXRoaXMuc291bmRzLFxyXG4gICAgICAgIGFjdGl2ZTogISF0aGlzLnNvdW5kcyAmJiB0aGlzLnNvdW5kcy5lbmFibGVkXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRTdGF0cyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFN0YXRzJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnN0YXRzXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRBdXRvUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZEF1dG9QbGF5JyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLmF1dG9QbGF5XHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICd3aWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5ib29rLmhhc1BlbmRpbmdQbGF5ZXJzKCksXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5jYW5GbGlwTGVmdCgpLFxyXG4gICAgICAgICAgcmlnaHQgPSB0aGlzLmNhbkZsaXBSaWdodCgpO1xyXG4gICAgY29uc3QgZmxpcHBlcnNFbmFibGUgPSB7XHJcbiAgICAgIGNtZEJhY2t3YXJkOiBsZWZ0LFxyXG4gICAgICBjbWRCaWdCYWNrd2FyZDogbGVmdCxcclxuICAgICAgY21kRm9yd2FyZDogcmlnaHQsXHJcbiAgICAgIGNtZEJpZ0ZvcndhcmQ6IHJpZ2h0LFxyXG4gICAgICBjbWRHb3RvRmlyc3RQYWdlOiBsZWZ0LFxyXG4gICAgICBjbWRHb3RvTGFzdFBhZ2U6IHJpZ2h0XHJcbiAgICB9O1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGZsaXBwZXJzRW5hYmxlKSkge1xyXG4gICAgICB0aGlzLnZpZXdTdGF0ZVtuYW1lXSA9IHtcclxuICAgICAgICBlbmFibGU6IGZsaXBwZXJzRW5hYmxlW25hbWVdLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKG5hbWUpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYW5GbGlwTGVmdCgpIHtcclxuICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb25Db250cm9scyAmJiAoISF0aGlzLmJvb2suZ2V0TGVmdEZsaXBwaW5nKCkgfHwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlICYmIHRoaXMucC5ydGwgJiYgdGhpcy5nZXRQYWdlKCk9PT0yKTtcclxuICB9XHJcblxyXG4gIGNhbkZsaXBSaWdodCgpIHtcclxuICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb25Db250cm9scyAmJiAoISF0aGlzLmJvb2suZ2V0UmlnaHRGbGlwcGluZygpIHx8IHRoaXMuc3RhdGUuc2luZ2xlUGFnZSAmJiAhdGhpcy5wLnJ0bCAmJiB0aGlzLmdldFBhZ2UoKT09PXRoaXMuYm9vay5nZXRQYWdlcygpLTIpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnVwZGF0ZVZpZXdTdGF0ZSgpO1xyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy52aWV3U3RhdGUpKSB7XHJcbiAgICAgICAgdGhpcy52aWV3LnNldFN0YXRlKG5hbWUsIHRoaXMudmlld1N0YXRlW25hbWVdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aW9ucygpIHtcclxuICAgIGNvbnN0IGlzU3dpcHBpbmcgPSAobmFtZSk9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbnMudG91Y2hDbWRTd2lwZS5lbmFibGVkICYmIHRoaXMuYWN0aW9ucy50b3VjaENtZFN3aXBlLmNvZGU9PT10aGlzLmFjdGlvbnNbbmFtZV0uY29kZSAmJiB0aGlzLnN0YXRlLnNtYXJ0UGFuICYmIHRoaXMuYm9va1dhdGNoZXIuc2NhbGU8PTE7XHJcbiAgICB9LCBjbWRzID0ge307XHJcblxyXG4gICAgZm9yKGxldCBuYW1lIGluIHRoaXMpIHtcclxuICAgICAgaWYobmFtZS5pbmRleE9mKCdjbWQnKT09PTApIHtcclxuICAgICAgICBjbWRzW25hbWVdID0ge1xyXG4gICAgICAgICAgYWN0aXZhdGU6ICguLi5hcmdzKT0+IHtcclxuICAgICAgICAgICAgaWYodGhpcy52aWV3U3RhdGUgJiYgdGhpcy52aWV3U3RhdGVbbmFtZV0uZW5hYmxlKSB7XHJcbiAgICAgICAgICAgICAgdGhpc1tuYW1lXSguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5jbWRzLFxyXG4gICAgICBjbWRQYW5MZWZ0OiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiAtdGhpcy5wLnBhbi5zcGVlZCxcclxuICAgICAgICAgIGR5OiAwXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuUmlnaHQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUpPT4gdGhpcy5vcmJpdC5hY3Rpb25zLnBhbihlLCB7XHJcbiAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgZHg6IHRoaXMucC5wYW4uc3BlZWQsXHJcbiAgICAgICAgICBkeTogMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblVwOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiAwLFxyXG4gICAgICAgICAgZHk6IC10aGlzLnAucGFuLnNwZWVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuRG93bjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogMCxcclxuICAgICAgICAgIGR5OiB0aGlzLnAucGFuLnNwZWVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRSb3RhdGU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5vcmJpdC5hY3Rpb25zLnJvdGF0ZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZERyYWdab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKGRhdGEuZHk+MCkge1xyXG4gICAgICAgICAgICB0aGlzLmNtZFpvb21PdXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoZGF0YS5keTwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbUluKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFBhbjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiB0aGlzLm9yYml0LmFjdGlvbnMucGFuXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kV2hlZWxab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHtcclxuICAgICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5ib29rV2F0Y2hlci5zY2FsZTtcclxuICAgICAgICAgIGlmKGUuZGVsdGFZPDApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tT3V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGUuZGVsdGFZPjApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tSW4oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCF0aGlzLnN0YXRlLnNtYXJ0UGFuIHx8IE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtc2NhbGUpPjFlLTQpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRSb3RhdGU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUsIGRhdGEpPT4ge1xyXG4gICAgICAgICAgaWYoIWlzU3dpcHBpbmcoJ3RvdWNoQ21kUm90YXRlJykpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9yYml0LmFjdGlvbnMucm90YXRlKGUsIGRhdGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKCFpc1N3aXBwaW5nKCd0b3VjaENtZFpvb20nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBsID0gZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQodi54KnYueCt2Lnkqdi55KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdzdGFydCcpIHtcclxuICAgICAgICAgICAgICB0aGlzLnRvdWNoWm9vbURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBsOiBsKGRhdGEpLFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IHRoaXMuYm9va1dhdGNoZXIuc2NhbGVcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICB0aGlzLnNldFNjYWxlKGwoZGF0YSkvdGhpcy50b3VjaFpvb21EYXRhLmwqdGhpcy50b3VjaFpvb21EYXRhLnNjYWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRQYW46IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUsIGRhdGEpPT4ge1xyXG4gICAgICAgICAgaWYoIWlzU3dpcHBpbmcoJ3RvdWNoQ21kUGFuJykpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJyAmJiAoIXRoaXMuc3RhdGUuc21hcnRQYW4gfHwgdGhpcy5ib29rV2F0Y2hlci5zY2FsZT4xKSkge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFN3aXBlOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKGlzU3dpcHBpbmcoJ3RvdWNoQ21kU3dpcGUnKSkge1xyXG4gICAgICAgICAgICBpZihkYXRhLnN0YXRlPT09J3N0YXJ0Jykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gKGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcylbdGhpcy5hY3Rpb25zLnRvdWNoQ21kU3dpcGUuY29kZS0xXTtcclxuICAgICAgICAgICAgICB0aGlzLnN3aXBlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgeDA6IHRvdWNoLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgeTA6IHRvdWNoLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgeDogdG91Y2gucGFnZVgsXHJcbiAgICAgICAgICAgICAgICB5OiB0b3VjaC5wYWdlWVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgICAgICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIGlmKCF0aGlzLnN3aXBlRGF0YS5oYW5kbGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXBlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgLi4udGhpcy5zd2lwZURhdGEsXHJcbiAgICAgICAgICAgICAgICAgIHg6IHRoaXMuc3dpcGVEYXRhLngrZGF0YS5keCxcclxuICAgICAgICAgICAgICAgICAgeTogdGhpcy5zd2lwZURhdGEueStkYXRhLmR5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihNYXRoLmFicyh0aGlzLnN3aXBlRGF0YS54MC10aGlzLnN3aXBlRGF0YS54KT4xMDApIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zd2lwZURhdGEueDA+dGhpcy5zd2lwZURhdGEueD8gdGhpcy5jbWRGb3J3YXJkKCk6IHRoaXMuY21kQmFja3dhcmQoKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zd2lwZURhdGEuaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN3aXBlRGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgd2lkU2V0dGluZ3M6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKCk9PiB1bmRlZmluZWRcclxuICAgICAgfSxcclxuICAgICAgd2lkVG9vbGJhcjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoKT0+IHVuZGVmaW5lZFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYmluZEFjdGlvbnMoKSB7XHJcbiAgICB0aGlzLmVUb0EgPSBuZXcgRXZlbnRzVG9BY3Rpb25zKCQodGhpcy52aXN1YWwuZWxlbWVudCkpO1xyXG4gICAgdGhpcy5lVG9BLmFkZEFjdGlvbigoZSk9PiBlLnByZXZlbnREZWZhdWx0KCksICdjb250ZXh0bWVudScsIEV2ZW50c1RvQWN0aW9ucy5tb3VzZUJ1dHRvbnMuUmlnaHQsIDApO1xyXG4gICAgdGhpcy5lVG9BLmFkZEFjdGlvbigoZSk9PiAkKHRoaXMudmlldy5nZXRQYXJlbnRDb250YWluZXIoKSkudHJpZ2dlcihlKSwgJ2tleWRvd24nLCAyNywgMCk7XHJcblxyXG4gICAgdGhpcy5hY3Rpb25zID0gdGhpcy5nZXRBY3Rpb25zKCk7XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5hY3Rpb25zKSkge1xyXG4gICAgICBjb25zdCBhY3Rpb24gPSB7XHJcbiAgICAgICAgLi4udGhpcy5hY3Rpb25zW25hbWVdLFxyXG4gICAgICAgIC4uLnRoaXMucC5hY3Rpb25zW25hbWVdXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuYWN0aW9uc1tuYW1lXSA9IGFjdGlvbjtcclxuICAgICAgaWYobmFtZS5pbmRleE9mKCdtb3VzZUNtZCcpIT09MCAmJiBuYW1lLmluZGV4T2YoJ3RvdWNoQ21kJykhPT0wIHx8IGFjdGlvbi5lbmFibGVkKSB7XHJcbiAgICAgICAgY29uc3QgZmxhZ3MgPSBhY3Rpb24uZmxhZ3MgfHwgMDtcclxuICAgICAgICBpZihhY3Rpb24udHlwZSkge1xyXG4gICAgICAgICAgdGhpcy5lVG9BLmFkZEFjdGlvbihhY3Rpb24uYWN0aXZhdGUsIGFjdGlvbi50eXBlLCBhY3Rpb24uY29kZSwgZmxhZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGFjdGlvbi5jb2RlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICB0aGlzLmVUb0EuYWRkQWN0aW9uKGFjdGlvbi5hY3RpdmF0ZSwgJ2tleWRvd24nLCBhY3Rpb24uY29kZSwgZmxhZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZXBhcmVQcm9wcyhwcm9wcykge1xyXG4gICAgcmV0dXJuIEJvb2tDb250cm9sbGVyLmNhbGNQcm9wcyhCb29rQ29udHJvbGxlci5tZXJnZVByb3BzKGJvb2tDb250cm9sbGVyUHJvcHMoKSwgcHJvcHMpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRBY3Rpb25zKHByb3BzLCBhY3Rpb25zKSB7XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXMoYWN0aW9ucyB8fCB7fSkpIHtcclxuICAgICAgcHJvcHMuYWN0aW9uc1tuYW1lXSA9IHtcclxuICAgICAgICAuLi5wcm9wcy5hY3Rpb25zW25hbWVdLFxyXG4gICAgICAgIC4uLmFjdGlvbnNbbmFtZV1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBtZXJnZVByb3BzKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgIHNlY29uZCA9IHNlY29uZCB8fCB7fTtcclxuICAgIGZ1bmN0aW9uIG1lcmdlKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgICAuLi5maXJzdCxcclxuICAgICAgICAuLi5zZWNvbmRcclxuICAgICAgfTtcclxuICAgICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGZpcnN0KSkge1xyXG4gICAgICAgIGlmKHR5cGVvZiBmaXJzdFtuYW1lXT09PSdvYmplY3QnKSB7XHJcbiAgICAgICAgICBwcm9wc1tuYW1lXSA9IG1lcmdlKGZpcnN0W25hbWVdLCBzZWNvbmRbbmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wcyA9IG1lcmdlKGZpcnN0LCBzZWNvbmQpO1xyXG4gICAgQm9va0NvbnRyb2xsZXIuc2V0QWN0aW9ucyhwcm9wcywgZmlyc3QuYWN0aW9ucyk7XHJcbiAgICBCb29rQ29udHJvbGxlci5zZXRBY3Rpb25zKHByb3BzLCBzZWNvbmQuYWN0aW9ucyk7XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1Byb3BzKHByb3BzKSB7XHJcbiAgICBwcm9wcy5zY2FsZS5kZWx0YSA9IChwcm9wcy5zY2FsZS5tYXgtcHJvcHMuc2NhbGUubWluKS9wcm9wcy5zY2FsZS5sZXZlbHM7XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskLFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2tQcmludGVyIGV4dGVuZHMgVEhSRUUuRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgYm9vaywgc3R5bGVTaGVldCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICB0aGlzLnN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0O1xyXG4gICAgdGhpcy53bmQgPSBjb250ZXh0LnduZDtcclxuICAgIHRoaXMuZG9jID0gY29udGV4dC5kb2M7XHJcbiAgICB0aGlzLnBhZ2VDYWxsYmFjayA9IGJvb2suZ2V0UGFnZUNhbGxiYWNrKCk7XHJcbiAgICBjb25zdCB0ZXN0ID0gdGhpcy5wYWdlQ2FsbGJhY2soMCk7XHJcbiAgICB0aGlzLnR5cGUgPSB0ZXN0LnR5cGU7XHJcbiAgICBpZih0aGlzLnR5cGU9PT0ncGRmJykge1xyXG4gICAgICB0aGlzLnBkZlNyYyA9IHRlc3Quc3JjLnNyYztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbmNlbCgpIHtcclxuICAgIHRoaXMuY2FuY2VsZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGlmKHRoaXMuZnJhbWUpIHtcclxuICAgICAgdGhpcy5mcmFtZS5yZW1vdmUoKTtcclxuICAgICAgZGVsZXRlIHRoaXMuZnJhbWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcmludCgpIHtcclxuICAgIGlmKHRoaXMubG9hZGluZykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5jYW5jZWxlZDtcclxuICAgIGlmKHRoaXMudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIGxldCBwcmludFduZCwgY2FsbE1hbnVhbGx5ID0gZmFsc2U7XHJcbiAgICAgIGlmKHRoaXMudXNlSUZyYW1lKCkpIHtcclxuICAgICAgICBjYWxsTWFudWFsbHkgPSAhIXRoaXMuZnJhbWU7XHJcbiAgICAgICAgaWYoIXRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgIHRoaXMuZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz1cIicrdGhpcy5wZGZTcmMrJ1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48L2lmcmFtZT4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLmZyYW1lWzBdLmNvbnRlbnRXaW5kb3c7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLnduZC5vcGVuKHRoaXMucGRmU3JjKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjYWxsTWFudWFsbHkpIHtcclxuICAgICAgICBwcmludFduZC5wcmludCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOiAnbG9hZGluZyd9KTtcclxuICAgICAgICAkKHRoaXMuZnJhbWUpLm9uKCdsb2FkJywgKCk9PiB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sb2FkaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdsb2FkZWQnfSk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgcHJpbnRXbmQucHJpbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlckNvbnRlbnQoKS5cclxuICAgICAgICB0aGVuKChjb250ZW50KT0+IHtcclxuICAgICAgICAgIGNvbnN0IHByaW50V25kID0gdGhpcy53bmQub3BlbigpLFxyXG4gICAgICAgICAgcHJpbnREb2MgPSBwcmludFduZC5kb2N1bWVudCxcclxuICAgICAgICAgIGh0bWwgPSBgXHJcbiAgICAgICAgICAgIDwhRE9DVFlQRSBodG1sPlxyXG4gICAgICAgICAgICA8aHRtbD5cclxuICAgICAgICAgICAgICA8aGVhZD5cclxuICAgICAgICAgICAgICAgIDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPjNEIEZsaXBCb29rIC0gUHJpbnRpbmc8L3RpdGxlPlxyXG4gICAgICAgICAgICAgICAgJHtjb250ZW50LmhlYWR9XHJcbiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJpbnREb2N1bWVudCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocHJpbnREb2N1bWVudCwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICAgICAgICAgPC9oZWFkPlxyXG4gICAgICAgICAgICAgIDxib2R5IG9ubG9hZD1cImluaXQoKVwiPlxyXG4gICAgICAgICAgICAgICAgJHtjb250ZW50LmJvZHl9XHJcbiAgICAgICAgICAgICAgPC9ib2R5PlxyXG4gICAgICAgICAgICA8L2h0bWw+XHJcbiAgICAgICAgICBgLmZiM2RRRmlsdGVyKCk7XHJcbiAgICAgICAgICBwcmludERvYy5vcGVuKCk7XHJcbiAgICAgICAgICBwcmludERvYy53cml0ZShodG1sKTtcclxuICAgICAgICAgIHByaW50RG9jLmNsb3NlKCk7XHJcbiAgICAgICAgfSkuXHJcbiAgICAgICAgY2F0Y2goKGUpPT4gY29uc29sZS53YXJuKCczRCBGbGlwQm9vayAtIFByaW50aW5nIHdhcyBjYW5jZWxlZCcpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb2dyZXNzKHYpIHtcclxuICAgIGlmKHRoaXMuY2FuY2VsZWQpIHtcclxuICAgICAgdGhyb3cgJ0NhbmNlbCBQcmludGluZyc7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLm9uUHJvZ3Jlc3MpIHtcclxuICAgICAgdGhpcy5vblByb2dyZXNzKE1hdGguZmxvb3IodioxMDApKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlckNvbnRlbnQoKSB7XHJcbiAgICBjb25zdCBwYWdlcyA9IHRoaXMuYm9vay5nZXRQYWdlcygpLCBoZWFkID0gbmV3IFNldCgpLCBib2R5ID0gW107XHJcbiAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgZm9yKGxldCBwYWdlPTA7IHBhZ2U8cGFnZXM7ICsrcGFnZSkge1xyXG4gICAgICBjb25zdCBpbmZvID0gdGhpcy5wYWdlQ2FsbGJhY2socGFnZSk7XHJcbiAgICAgIGlmKGluZm8udHlwZT09PSdpbWFnZScpIHtcclxuICAgICAgICBkb25lID0gZG9uZS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5wcm9ncmVzcyhwYWdlL3BhZ2VzKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckltYWdlKGhlYWQsIGJvZHksIGluZm8uc3JjKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGluZm8udHlwZT09PSdodG1sJykge1xyXG4gICAgICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzKHBhZ2UvcGFnZXMpO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVySHRtbChoZWFkLCBib2R5LCBpbmZvLnNyYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkb25lLnRoZW4oKCk9PiB7XHJcbiAgICAgIHRoaXMucHJvZ3Jlc3MoMSk7XHJcbiAgICAgIHJldHVybiB7aGVhZDogdGhpcy5yZW5kZXJIZWFkKGhlYWQpLCBib2R5OiBib2R5LmpvaW4oJ1xcbicpfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgd3JhcChjb250ZW50KSB7XHJcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJmYjNkLXByaW50ZXItcGFnZVwiPiR7Y29udGVudH08L2Rpdj5gO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySW1hZ2UoaGVhZCwgYm9keSwgc3JjKSB7XHJcbiAgICBib2R5LnB1c2goQm9va1ByaW50ZXIud3JhcChgPGltZyBzcmM9XCIke3NyY31cIiAvPmApKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckh0bWwoaGVhZCwgYm9keSwgc3JjKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XHJcbiAgICAgICQuZ2V0KHNyYywgKGh0bWwpPT4ge1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gaHRtbC5tYXRjaCgvPGxpbmsuKj8+L2lnKSB8fCBbXTtcclxuICAgICAgICBmb3IobGV0IGxpbmsgb2YgbGlua3MpIHtcclxuICAgICAgICAgIGlmKGxpbmsubWF0Y2goL3N0eWxlc2hlZXQvaSkpIHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9IGxpbmsubWF0Y2goL2hyZWZcXHMqPVxccypbJ1wiXSguKilbJ1wiXS9pKTtcclxuICAgICAgICAgICAgaWYoaHJlZikge1xyXG4gICAgICAgICAgICAgIGhlYWQuYWRkKGhyZWZbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBodG1sLm1hdGNoKC88Ym9keS4qPz4oW1xcU1xcc10qKTxcXC9ib2R5Pi9pKTtcclxuICAgICAgICBpZihjb250ZW50KSB7XHJcbiAgICAgICAgICBib2R5LnB1c2goQm9va1ByaW50ZXIud3JhcChjb250ZW50WzFdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSkuZmFpbCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlckhlYWQoaGVhZCkge1xyXG4gICAgY29uc3QgY29udGVudCA9IFtdO1xyXG4gICAgaGVhZC5mb3JFYWNoKChrKT0+IGNvbnRlbnQucHVzaChgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIke2t9XCI+YCkpO1xyXG4gICAgY29udGVudC5wdXNoKHRoaXMuc3R5bGVTaGVldD8gYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHt0aGlzLnN0eWxlU2hlZXR9XCI+YDogQm9va1ByaW50ZXIuZGVmYXVsdFN0eWxlU2hlZXQoKSk7XHJcbiAgICByZXR1cm4gY29udGVudC5qb2luKCdcXG4nKTtcclxuICB9XHJcblxyXG4gIHVzZUlGcmFtZSgpIHtcclxuICAgIGNvbnN0IGlzQ2hyb21pdW0gPSB0aGlzLnduZC5jaHJvbWUsXHJcbiAgICAgIHdpbk5hdiA9IHRoaXMud25kLm5hdmlnYXRvcixcclxuICAgICAgdmVuZG9yTmFtZSA9IHdpbk5hdi52ZW5kb3IsXHJcbiAgICAgIGlzSUVlZGdlID0gd2luTmF2LnVzZXJBZ2VudC5pbmRleE9mKFwiRWRnZVwiKT4tMSxcclxuICAgICAgaXNJT1NDaHJvbWUgPSB3aW5OYXYudXNlckFnZW50Lm1hdGNoKFwiQ3JpT1NcIik7XHJcbiAgICBsZXQgdXNlO1xyXG4gICAgaWYoaXNJT1NDaHJvbWUpe1xyXG4gICAgICB1c2UgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmKGlzQ2hyb21pdW0gJiYgdmVuZG9yTmFtZT09PSdHb29nbGUgSW5jLicgJiYgIWlzSUVlZGdlKSB7XHJcbiAgICAgIHVzZSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB1c2UgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRTdHlsZVNoZWV0KCkge1xyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxyXG4gICAgICAgIGJvZHkge1xyXG4gICAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmZiM2QtcHJpbnRlci1wYWdlIHtcclxuICAgICAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGFsd2F5cztcclxuICAgICAgICB9XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICBgLmZiM2RRRmlsdGVyKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFZpZXcgZnJvbSAnVmlldyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rVmlldyBleHRlbmRzIFZpZXcge1xyXG5cclxuICBzdGF0aWMgUEFHRV9IQU5ETEVSX0RFTEFZID0gMTAwMDtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvbkxvYWQsIHRlbXBsYXRlLCBoYW5kbGVyKSB7XHJcbiAgICBzdXBlcihjb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGUsIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFZpZXcoKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcudmlldycpO1xyXG4gICAgdGhpcy5ib29rbWFya3NWaWV3ID0gdGhpcy5jb250YWluZXIuZmluZCgnLndpZEJvb2ttYXJrcycpO1xyXG4gICAgdGhpcy50aHVtYm5haWxzVmlldyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy53aWRUaHVtYm5haWxzJyk7XHJcbiAgICB0aGlzLnNlYXJjaFZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcud2lkU2VhcmNoJyk7XHJcbiAgfVxyXG5cclxuICBnZXRIYW5kbGVycyhpZCkge1xyXG4gICAgbGV0IGhhbmRsZXJzO1xyXG4gICAgaWYoaWQ9PT0naW5wUGFnZScpIHtcclxuICAgICAgaGFuZGxlcnMgPSBbe1xyXG4gICAgICAgIGlucFBhZ2U6IChlLCBkYXRhKT0+IHRoaXMuY2FsbExhdGVyKHN1cGVyLmdldEhhbmRsZXJzKGlkKSwgaWQsIGUsIGRhdGEsIEJvb2tWaWV3LlBBR0VfSEFORExFUl9ERUxBWSlcclxuICAgICAgfV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaGFuZGxlcnMgPSBzdXBlci5nZXRIYW5kbGVycyhpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFuZGxlcnM7XHJcbiAgfVxyXG5cclxuICBvbkl0ZW1TdGF0ZUNoYW5nZWQoaWQsIHN0YXRlKSB7XHJcbiAgICBpZihpZD09PSdjbWRGdWxsU2NyZWVuJykge1xyXG4gICAgICBpZihzdGF0ZS5hY3RpdmUpIHtcclxuICAgICAgICB0aGlzLnBhcmVudENvbnRhaW5lci5hZGRDbGFzcygnZnVsbHNjcmVlbicpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMucGFyZW50Q29udGFpbmVyLnJlbW92ZUNsYXNzKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52aWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0Qm9va21hcmtzVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLmJvb2ttYXJrc1ZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRUaHVtYm5haWxzVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnRodW1ibmFpbHNWaWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0U2VhcmNoVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRGb3JtcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGlua3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnY21kWm9vbUluJyxcclxuICAgICAgJ2NtZFpvb21PdXQnLFxyXG4gICAgICAnY21kRGVmYXVsdFpvb20nLFxyXG4gICAgICAnY21kVG9jJyxcclxuICAgICAgJ2NtZEJhY2t3YXJkJyxcclxuICAgICAgJ2NtZEJpZ0JhY2t3YXJkJyxcclxuICAgICAgJ2NtZEZvcndhcmQnLFxyXG4gICAgICAnY21kQmlnRm9yd2FyZCcsXHJcbiAgICAgICdjbWRTYXZlJyxcclxuICAgICAgJ2NtZFByaW50JyxcclxuICAgICAgJ2NtZEZ1bGxTY3JlZW4nLFxyXG4gICAgICAnY21kU21hcnRQYW4nLFxyXG4gICAgICAnY21kU2luZ2xlUGFnZScsXHJcbiAgICAgICdjbWRTb3VuZHMnLFxyXG4gICAgICAnY21kU3RhdHMnLFxyXG4gICAgICAnY21kU2hhcmUnLFxyXG4gICAgICAnY21kQ2xvc2VUb2MnLFxyXG4gICAgICAnY21kQ2xvc2VTaGFyZScsXHJcbiAgICAgICdjbWRCb29rbWFya3MnLFxyXG4gICAgICAnY21kU2VhcmNoJyxcclxuICAgICAgJ2NtZFRodW1ibmFpbHMnLFxyXG4gICAgICAnY21kUGVuZGluZ1BsYXknLFxyXG4gICAgICAnY21kRmFjZWJvb2snLFxyXG4gICAgICAnY21kVHdpdHRlcicsXHJcbiAgICAgICdjbWRFbWFpbCcsXHJcbiAgICAgICdjbWRBdXRvUGxheScsXHJcbiAgICAgICdjbWRHb3RvRmlyc3RQYWdlJyxcclxuICAgICAgJ2NtZEdvdG9MYXN0UGFnZSdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRXaWRnZXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ3dpZExvYWRpbmdQcm9ncmVzcycsXHJcbiAgICAgICd3aWRVc2VyTWVzc2FnZScsXHJcbiAgICAgICd3aWRGbG9hdFduZCcsXHJcbiAgICAgICd3aWRTaGFyZScsXHJcbiAgICAgICd3aWRUb2NNZW51JyxcclxuICAgICAgJ3dpZEJvb2ttYXJrcycsXHJcbiAgICAgICd3aWRUaHVtYm5haWxzJyxcclxuICAgICAgJ3dpZFNlYXJjaCcsXHJcbiAgICAgICd3aWRDb250cm9scycsXHJcbiAgICAgICd3aWRTZXR0aW5ncycsXHJcbiAgICAgICd3aWRMb2FkaW5nJyxcclxuICAgICAgJ3dpZFBlbmRpbmdQbGF5JyxcclxuICAgICAgJ3dpZFRvb2xiYXInXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5wdXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ2lucFBhZ2UnLFxyXG4gICAgICAnaW5wUGFnZXMnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAndHh0TG9hZGluZ1Byb2dyZXNzJyxcclxuICAgICAgJ3R4dFVzZXJNZXNzYWdlJyxcclxuICAgICAgJ3R4dFNoYXJlTGluaydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGh0bWw6ICd0ZW1wbGF0ZXMvZGVmYXVsdC1ib29rLXZpZXcuaHRtbCcsXHJcbiAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICdjc3MvYmxhY2stYm9vay12aWV3LmNzcydcclxuICAgICAgXSxcclxuICAgICAgbGlua3M6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JyxcclxuICAgICAgICAgIGhyZWY6ICdjc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MnXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBzY3JpcHQ6ICdqcy9kZWZhdWx0LWJvb2stdmlldy5qcydcclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwiaW1wb3J0IEJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9Cb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IEltYWdlRmFjdG9yeSBmcm9tICdJbWFnZUZhY3RvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xiQm9va1Byb3BzQnVpbGRlciBleHRlbmRzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHBhZ2VDYWxsYmFjaywgcGFnZXMsIG9uUmVhZHksIHN0eWxlKSB7XHJcbiAgICBzdXBlcihvblJlYWR5LCBzdHlsZSk7XHJcbiAgICB0aGlzLmNhbGNTaGVldHMocGFnZXMpO1xyXG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBwYWdlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBwYWdlQ2FsbGJhY2s6IHBhZ2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KGNvbnRleHQpO1xyXG5cclxuICAgIGlmKHBhZ2VzPjApIHtcclxuICAgICAgY29uc3QgdGVzdCA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHBhZ2VDYWxsYmFjaygwKSwgMCwgdGhpcy5kZWZhdWx0cy5zaGVldC53aWR0aFRleGVscywgdGhpcy5kZWZhdWx0cy5zaGVldC5oZWlnaHRUZXhlbHMsIHRoaXMuZGVmYXVsdHMuc2hlZXQuY29sb3IpO1xyXG4gICAgICB0ZXN0Lm9uTG9hZCA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMuY2FsY1Byb3BzKHRlc3Qud2lkdGgsIHRlc3QuaGVpZ2h0KTtcclxuICAgICAgICB0ZXN0LmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuZGVmYXVsdHM7XHJcbiAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCBTaGVldEJsb2NrIGZyb20gJy4vU2hlZXRCbG9jayc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3ZlciBleHRlbmRzIFNoZWV0QmxvY2sge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHAsIGFuZ2xlLCBzdGF0ZSkge1xyXG4gICAgc3VwZXIodmlzdWFsLCBwLCAwLCAxLCBhbmdsZSwgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi50aGlzLnAuY292ZXIsXHJcbiAgICAgIHNoZWV0czogMVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGxvYWRQb2ludHMoKSB7XHJcbiAgICBjb25zdCBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIGxlZnQ6IFsyLDMsNF0sXHJcbiAgICAgICAgcmlnaHQ6IFsyLDMsNF1cclxuICAgICAgfVxyXG4gICAgXSxcclxuICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMCwxLDJdXHJcbiAgICBdLFxyXG4gICAgaW50ZXJwb2xhdGlvblBvaW50cyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHg6IFtcclxuICAgICAgICAgICAgIFswLDAuMjg3NywwLjYzNDcsMC44MTc0LDEuMDAwMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjI4MzEsMC42MjU2LDAuODA4MiwwLjk5MDldLFxyXG4gICAgICAgICAgICAgWzAsMC4yNjAzLDAuNTkzNiwwLjc3NjMsMC45NTg5XSxcclxuICAgICAgICAgICAgIFswLDAuMTM3MCwwLjM4ODEsMC41MzQyLDAuNjc1OF0sXHJcbiAgICAgICAgICAgICBbMCwwLDAsMCwwXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjAyLDAuMDA1LC0wLjAwMSwtMC4wMDI1XSxcclxuICAgICAgICAgICAgIFswLDAuMDQsMC4wMSwtMC4wMDIsLTAuMDA1XSxcclxuICAgICAgICAgICAgIFswLCAwLjI0NjYsIDAuNDc5NSwgMC41NzA4LCAwLjY3NThdLFxyXG4gICAgICAgICAgICAgWzAsIDAuMjg3NywgMC42MzQ3LCAwLjgxNzQsIDEuMDAwMF1cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbnRlcnBvbGF0aW9uUG9pbnRzLFxyXG4gICAgICBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyxcclxuICAgICAgY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXNcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ292ZXIuanMiLCJpbXBvcnQgU2hlZXRDc3NMYXllciBmcm9tICcuL1NoZWV0Q3NzTGF5ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3NzTGF5ZXJzTWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoYm9vaykge1xyXG4gICAgdGhpcy5ib29rID0gYm9vaztcclxuICAgIHRoaXMucHJvcHMgPSBib29rLnAuY3NzTGF5ZXJQcm9wcztcclxuICAgIHRoaXMudmlzdWFsID0gYm9vay52aXN1YWw7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyID0gYm9vay5wYWdlTWFuYWdlcjtcclxuICAgIHRoaXMud3JhcHBlcnMgPSB7fTtcclxuICAgIHRoaXMucGVuZGluZ3MgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldEFjdGl2ZXMoKSB7XHJcbiAgICBsZXQgcGFnZSA9IHRoaXMuYm9vay5nZXRQYWdlKCksIHBhZ2VzID0gdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLCBhY3MgPSBwYWdlPT09MCB8fCBwYWdlPT09cGFnZXMtMT8gW3BhZ2VdOiBbcGFnZSwgcGFnZSsxXTtcclxuICAgIGlmKCF0aGlzLndyYXBwZXJzWzBdICYmIHBhZ2UhPT0wKSB7XHJcbiAgICAgIGFjcyA9IFswLCAuLi5hY3NdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjcztcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IHcgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLndyYXBwZXJzKSkge1xyXG4gICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IGwuZGlzcG9zZSgpKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLndyYXBwZXJzO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XHJcbiAgICBmb3IobGV0IG4gb2YgdGhpcy5nZXRBY3RpdmVzKCkpIHtcclxuICAgICAgY29uc3QgdyA9IHRoaXMud3JhcHBlcnNbbl07XHJcbiAgICAgIGlmKHcpIHtcclxuICAgICAgICBpZih3LnN0YXRlPT09J3JlYWR5JyAmJiB3LmxheWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5ib29rLmdldEJsb2NrQnlQYWdlKG4pO1xyXG4gICAgICAgICAgdy5sYXllcnMuZm9yRWFjaCgobCk9PiB7XHJcbiAgICAgICAgICAgIGlmKGwuaXNIaWRkZW4oKSkge1xyXG4gICAgICAgICAgICAgIGwudXBkYXRlKGJsb2NrKTtcclxuICAgICAgICAgICAgICBsLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndyYXBwZXJzW25dID0ge1xyXG4gICAgICAgICAgc3RhdGU6ICdsb2FkaW5nJyxcclxuICAgICAgICAgIGxheWVyczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLmdldExheWVycyhuLCAobGF5ZXJzKT0+IHtcclxuICAgICAgICAgICAgY29uc3QgZmluaXNoID0gKCk9PiB7XHJcbiAgICAgICAgICAgICAgaWYobGF5ZXJzLmxlbmd0aCAmJiB0aGlzLndyYXBwZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuYm9vay5nZXRCbG9ja0J5UGFnZShuKTtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgbCBvZiBsYXllcnMpIHtcclxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2wgPSBuZXcgU2hlZXRDc3NMYXllcih0aGlzLnZpc3VhbCwgYmxvY2ssIHsuLi50aGlzLnByb3BzLCBwYWdlTnVtYmVyOiBufSk7XHJcbiAgICAgICAgICAgICAgICAgIHcubGF5ZXJzLnB1c2goc2wpO1xyXG4gICAgICAgICAgICAgICAgICBzbC5zZXQobC5jc3MsIGwuaHRtbCwgbC5qcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZighdGhpcy5oaWRkZW4gJiYgfnRoaXMuZ2V0QWN0aXZlcygpLmluZGV4T2YobikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IGwuc2hvdygpKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgMTApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB3LnN0YXRlID0gJ3JlYWR5JztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYodGhpcy53cmFwcGVycyAmJiAobj09PTAgfHwgdGhpcy53cmFwcGVyc1swXS5zdGF0ZSE9PSdsb2FkaW5nJykpIHtcclxuICAgICAgICAgICAgICBmaW5pc2goKTtcclxuICAgICAgICAgICAgICBpZihuPT09MCkge1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBmIG9mIHRoaXMucGVuZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgZigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5ncyA9IFtdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdzLnB1c2goZmluaXNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcclxuICAgIGNvbnN0IHdhaXQgPSBbXTtcclxuICAgIGZvcihsZXQgdyBvZiBPYmplY3QudmFsdWVzKHRoaXMud3JhcHBlcnMpKSB7XHJcbiAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4gd2FpdC5wdXNoKGwuaGlkZSgpKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwod2FpdCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ3NzTGF5ZXJzTWFuYWdlci5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnXHJcbmltcG9ydCBDYWNoZSBmcm9tICdDYWNoZSc7XHJcbmltcG9ydCBMb2FkaW5nQW5pbWF0aW9uIGZyb20gJ0xvYWRpbmdBbmltYXRpb24nO1xyXG5pbXBvcnQgSW1hZ2VGYWN0b3J5IGZyb20gJ0ltYWdlRmFjdG9yeSc7XHJcbmltcG9ydCBUZXh0dXJlQW5pbWF0b3IgZnJvbSAnVGV4dHVyZUFuaW1hdG9yJztcclxuaW1wb3J0IEdyYXBoVXRpbHMgZnJvbSAnR3JhcGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlTWFuYWdlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm9vaywgcCkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5wYWdlUXVlcnkgPSAnJztcclxuICAgIHRoaXMucCA9IHA7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZSA9IG5ldyBDYWNoZShwLmNhY2hlZFBhZ2VzKTtcclxuICAgIHRoaXMucmVzb3VyY2VzQ2FjaGUgPSBuZXcgQ2FjaGUoKTtcclxuXHJcbiAgICB0aGlzLmNhbnZhc2VzID0gW107XHJcbiAgICBmb3IobGV0IGk9MDsgaTw1OyArK2kpIHtcclxuICAgICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKCk7XHJcbiAgICAgIHRoaXMuY2FudmFzZXMucHVzaCh7YywgY3R4OiBjLmdldENvbnRleHQoJzJkJywge3dpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSwgZGVzeW5jaHJvbml6ZWQ6IGZhbHNlfSl9KTtcclxuICAgIH1cclxuICAgIHRoaXMubmV4dENhbnZhcyA9IDA7XHJcblxyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KHsuLi52aXN1YWwsIGRpc3BhdGNoRXZlbnQ6IGJvb2suZGlzcGF0Y2hFdmVudC5iaW5kKGJvb2spLCByZW5kZXJDYW52YXM6IHRoaXMuY2FudmFzZXNbMF0uYywgcmVuZGVyQ2FudmFzQ3R4OiB0aGlzLmNhbnZhc2VzWzBdLmN0eH0sIHRoaXMucmVzb3VyY2VzQ2FjaGUpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZ3MgPSBbXTtcclxuICAgIHRoaXMucmVuZGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucHJlZGljdGVkUmVxdWVzdHMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnRtcE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCk7XHJcbiAgICB2aXN1YWwuYWRkT2JqZWN0KG5ldyBUSFJFRS5NZXNoKG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDFlLTMsIDFlLTMpLCB0aGlzLnRtcE1hdGVyaWFsKSk7XHJcblxyXG4gICAgdGhpcy5sb2FkaW5nQW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgIHRoaXMubG9hZGluZyA9IHt9O1xyXG4gICAgdGhpcy5sb2FkaW5nW3AuY292ZXIuY29sb3JdID0gdGhpcy5jcmVhdGVMb2FkaW5nVGV4dHVyZShwLmNvdmVyKTtcclxuICAgIGlmKHAucGFnZS5jb2xvciE9PXAuY292ZXIuY29sb3IpIHtcclxuICAgICAgdGhpcy5sb2FkaW5nW3AucGFnZS5jb2xvcl0gPSB0aGlzLmNyZWF0ZUxvYWRpbmdUZXh0dXJlKHAucGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgdGhpcy5sb2FkUHJlZGljdGVkUGFnZXMuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy50dXJuT25FdmVudHMoKTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbih0aGlzLnVwZGF0ZVJlbmRlclF1ZXVlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTG9hZGluZ1RleHR1cmUocCkge1xyXG4gICAgY29uc3Qgc3ByaXRlVGlsZXMgPSA2LCBoZWlnaHRUZXhlbHMgPSBwLmhlaWdodC9wLndpZHRoKnAud2lkdGhUZXhlbHMsXHJcbiAgICAgIHNjYWxlID0gTWF0aC5zcXJ0KDQuNSoyMTAqNC41KjI5Ny8ocC53aWR0aFRleGVscypoZWlnaHRUZXhlbHMpKSxcclxuICAgICAgYW5pbWF0aW9uID0gbmV3IExvYWRpbmdBbmltYXRpb24oc2NhbGUqcC53aWR0aFRleGVscywgc2NhbGUqaGVpZ2h0VGV4ZWxzLCBwLmNvbG9yKSxcclxuICAgICAgYW5pbWF0b3IgPSBuZXcgVGV4dHVyZUFuaW1hdG9yKGFuaW1hdGlvbi5jcmVhdGVTcHJpdGUoc3ByaXRlVGlsZXMpLCBzcHJpdGVUaWxlcywgMSwgc3ByaXRlVGlsZXMsIDAuMik7XHJcbiAgICBhbmltYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgcmV0dXJuIGFuaW1hdG9yO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMudHVybk9mZkV2ZW50cygpO1xyXG4gICAgZm9yKGxldCBjb2xvciBvZiBPYmplY3Qua2V5cyh0aGlzLmxvYWRpbmcpKSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMubG9hZGluZztcclxuICAgIHRoaXMucmVzb3VyY2VzQ2FjaGUuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUuZGlzcG9zZSgpO1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMuY2FudmFzZXMpIHtcclxuICAgICAgby5jLmhlaWdodCA9IG8uYy53aWR0aCA9IDA7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5jYW52YXNlcztcclxuICB9XHJcblxyXG4gIGlzQ292ZXIobikge1xyXG4gICAgcmV0dXJuIG48MiB8fCBuPj0yKih0aGlzLnAuc2hlZXRzKzEpO1xyXG4gIH1cclxuXHJcbiAgaXNNb2JpbGUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZpc3VhbC5pc01vYmlsZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVN0YXRlKG4pIHtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgIHJldHVybiBvYmplY3Q/IG9iamVjdC5zdGF0ZTogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpIHtcclxuICAgIHRoaXMubG9hZGluZ0FuaW1hdGlvbiA9IGVuYWJsZTtcclxuICAgIGZvcihsZXQgbyBvZiB0aGlzLmxvYWRpbmdzKSB7XHJcbiAgICAgIHRoaXMuc2V0dXBNYXRlcmlhbChvKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgaWYodGhpcy5sb2FkaW5nQW5pbWF0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGxvYWRpbmcgPSB7fTtcclxuICAgICAgZm9yKGxldCBvIG9mIHRoaXMubG9hZGluZ3MpIHtcclxuICAgICAgICBpZihvLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgIGxvYWRpbmdbby5jb2xvcl0gPSB0cnVlOztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZm9yKGxldCBjb2xvciBvZiBPYmplY3Qua2V5cyhsb2FkaW5nKSkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0udXBkYXRlKGR0KTtcclxuICAgICAgICB0aGlzLmJvb2sudXBkYXRlVGhyZWUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRnJvbUxvYWRpbmdzKG8pIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLmxvYWRpbmdzLmluZGV4T2Yobyk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLmxvYWRpbmdzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZUZyb21SZW5kZXJRdWV1ZShvKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy5yZW5kZXJRdWV1ZS5pbmRleE9mKG8pO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy5yZW5kZXJRdWV1ZS5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWZyZXNoUGFnZVF1ZXJ5KG4sIHF1ZXJ5PScnKSB7XHJcbiAgICB0aGlzLnBhZ2VRdWVyeSA9IHF1ZXJ5O1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgaWYob2JqZWN0ICYmIG9iamVjdC53cmFwcGVyICYmIG9iamVjdC53cmFwcGVyLnNldFF1ZXJ5KSB7XHJcbiAgICAgIGlmKCF0aGlzLnBhZ2VDYWNoZS5yZW1vdmUobikpIHtcclxuICAgICAgICBvYmplY3Qud3JhcHBlci5zZXRRdWVyeShxdWVyeSk7XHJcbiAgICAgICAgdGhpcy5wdXNoSW5SZW5kZXJRdWV1ZShvYmplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWZyZXNoWm9vbSgpIHtcclxuICAgIGlmKHRoaXMucC5hdXRvUmVzb2x1dGlvbi5lbmFibGVkKSB7XHJcbiAgICAgIGlmKHRoaXMucmVuZGVyaW5nICYmIHRoaXMucmVuZGVyaW5nLndyYXBwZXIpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmluZy53cmFwcGVyLmNhbmNlbFJlbmRlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGVzID0gW107XHJcbiAgICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGUpPT4ge1xyXG4gICAgICAgIGVzLnB1c2goZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBlcy5mb3JFYWNoKChlKT0+IHtcclxuICAgICAgICBjb25zdCBvYmplY3QgPSBlWzFdO1xyXG4gICAgICAgIGlmKG9iamVjdCAmJiBvYmplY3Qud3JhcHBlcikge1xyXG4gICAgICAgICAgaWYoIXRoaXMucGFnZUNhY2hlLnJlbW92ZShlWzBdKSkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hJblJlbmRlclF1ZXVlKG9iamVjdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldExheWVycyhuLCBjbGIpIHtcclxuICAgIGNvbnN0IGNzc0xheWVyc0xvYWRlciA9IHRoaXMucC5jc3NMYXllcnNMb2FkZXI/IHRoaXMucC5jc3NMYXllcnNMb2FkZXI6IChuLCBmKT0+IGYoW10pO1xyXG4gICAgY3NzTGF5ZXJzTG9hZGVyKG4sIChsYXllcnMpPT4ge1xyXG4gICAgICBjb25zdCBvYmplY3QgPSB0aGlzLnBhZ2VDYWNoZS5nZXQobik7XHJcbiAgICAgIGlmKG9iamVjdCkge1xyXG4gICAgICAgIChvYmplY3Qud3JhcHBlci5nZXRDU1NMYXllciAmJiB0aGlzLnAuaGlnaGxpZ2h0TGlua3M/IG9iamVjdC53cmFwcGVyLmdldENTU0xheWVyKCk6IFByb21pc2UucmVzb2x2ZSgpKS5cclxuICAgICAgICB0aGVuKChsKT0+IHtcclxuICAgICAgICAgIGlmKGwgfHwgbGF5ZXJzWzBdKSB7XHJcbiAgICAgICAgICAgIGwgPSBsIHx8IHt9O1xyXG4gICAgICAgICAgICBsYXllcnNbMF0gPSBsYXllcnNbMF0gfHwge307XHJcbiAgICAgICAgICAgIGxheWVyc1swXSA9IHtcclxuICAgICAgICAgICAgICBodG1sOiAobC5odG1sfHwnJykrKGxheWVyc1swXS5odG1sfHwnJyksXHJcbiAgICAgICAgICAgICAgY3NzOiAobC5jc3N8fCcnKSsobGF5ZXJzWzBdLmNzc3x8JycpLFxyXG4gICAgICAgICAgICAgIGpzOiBsYXllcnNbMF0uanNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKG9iamVjdC5zdGF0ZSE9PSdhY3RpdmUnKSB7XHJcbiAgICAgICAgICAgIG9iamVjdC5wZW5kaW5ncy5wdXNoKHtjbGIsIGFyZ3M6IFtsYXllcnNdfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2xiKGxheWVycyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVzb2x2ZVBlbmRpbmdzKHBlbmRpbmdzKSB7XHJcbiAgICBmb3IobGV0IHAgb2YgcGVuZGluZ3MpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBwLmNsYiguLi5wLmFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwZW5kaW5ncy5zcGxpY2UoMCwgcGVuZGluZ3MubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIHJ0bFBhZ2VOKG4pIHtcclxuICAgIHJldHVybiB0aGlzLnAucnRsPyB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktMS1uOiBuO1xyXG4gIH1cclxuXHJcbiAgbG9hZChtYXRlcmlhbCwgbikge1xyXG4gICAgY29uc3QgcGkgPSB0aGlzLnJ0bFBhZ2VOKG4pPHRoaXMuYm9vay5nZXRQYWdlcygpPyB0aGlzLnAucGFnZUNhbGxiYWNrKHRoaXMucnRsUGFnZU4obikpOiB7dHlwZTogJ2JsYW5rJ30sIHAgPSB0aGlzLmlzQ292ZXIobik/IHRoaXMucC5jb3ZlcjogdGhpcy5wLnBhZ2U7XHJcbiAgICBjb25zdCBvID0ge1xyXG4gICAgICBuLFxyXG4gICAgICB0ZXh0dXJlOiBuZXcgVEhSRUUuVGV4dHVyZSgpLFxyXG4gICAgICB3cmFwcGVyOiBudWxsLFxyXG4gICAgICBzdGF0ZTogJ2xvYWRpbmcnLFxyXG4gICAgICBsb2NrZWQ6IChuKT0+IG8uc3RhdGUgPT09ICdsb2FkaW5nJyB8fCBvLnN0YXRlID09PSAncmVuZGVyaW5nJyB8fCB0aGlzLmJvb2suaXNBY3RpdmVQYWdlKG4pLFxyXG4gICAgICBjb2xvcjogcC5jb2xvcixcclxuICAgICAgaXNBY3RpdmU6ICgpPT4gdGhpcy5ib29rLmlzQWN0aXZlUGFnZShuKSxcclxuICAgICAgaXNUb3A6ICgpPT4gfnRoaXMuYm9vay5nZXRUb3BQYWdlcygpLmluZGV4T2YobiksXHJcbiAgICAgIGRpc3Bvc2U6ICgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRnJvbUxvYWRpbmdzKG8pO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRnJvbVJlbmRlclF1ZXVlKG8pO1xyXG4gICAgICAgIGlmKG8ud3JhcHBlciAmJiBvLndyYXBwZXIuZGlzcG9zZSkge1xyXG4gICAgICAgICAgby53cmFwcGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgby50ZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgby50ZXh0dXJlO1xyXG4gICAgICAgIGRlbGV0ZSBvLndyYXBwZXI7XHJcbiAgICAgIH0sXHJcbiAgICAgIHBlbmRpbmdzOiBbXVxyXG4gICAgfTtcclxuICAgIG8udGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5MaW5lYXJGaWx0ZXI7XHJcbiAgICB0aGlzLmxvYWRpbmdzLnB1c2gobyk7XHJcbiAgICB0aGlzLnNldE1hdGVyaWFsKG8sIG1hdGVyaWFsKTtcclxuXHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICBvLndpZHRoVGV4ZWxzID0gcGkud2lkdGhUZXhlbHMgfHwgcC53aWR0aFRleGVscztcclxuICAgICAgICBvLmhlaWdodFRleGVscyA9IHAuaGVpZ2h0L3Aud2lkdGgqcC53aWR0aFRleGVscztcclxuICAgICAgICBjb25zdCByZXMgPSB0aGlzLmNhbGNSZXNvbHV0aW9uKG8pO1xyXG4gICAgICAgIG8ud3JhcHBlciA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHBpLCBwaS5udW1iZXI9PT11bmRlZmluZWQ/IHRoaXMucnRsUGFnZU4obik6IHBpLm51bWJlciwgcmVzLndpZHRoLCByZXMuaGVpZ2h0LCBwLmNvbG9yLCB0aGlzLnAuaW5qZWN0b3IpO1xyXG4gICAgICAgIGlmKG8ud3JhcHBlci5zZXRRdWVyeSkge1xyXG4gICAgICAgICAgby53cmFwcGVyLnNldFF1ZXJ5KHRoaXMucGFnZVF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgby5zaW11bGF0ZSA9IHBpLmludGVyYWN0aXZlPyAoby53cmFwcGVyLnNpbXVsYXRlIHx8ICgoKT0+IHVuZGVmaW5lZCkpLmJpbmQoby53cmFwcGVyKTogdW5kZWZpbmVkO1xyXG4gICAgICAgIG8ud3JhcHBlci5vbkxvYWQgPSAoKT0+IHtcclxuICAgICAgICAgIG8uc3RhdGUgPSAnbG9hZGVkJztcclxuICAgICAgICAgIHRoaXMucHVzaEluUmVuZGVyUXVldWUobyk7XHJcbiAgICAgICAgICAvLyB0aGlzLmJvb2suZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgICAvLyAgIHR5cGU6ICdsb2FkZWRQYWdlJyxcclxuICAgICAgICAgIC8vICAgcGFnZTogblxyXG4gICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvLndyYXBwZXIub25DaGFuZ2UgPSAoaW1hZ2UsIGNhbmNlbGVkKT0+IHtcclxuICAgICAgICAgIGlmKGNhbmNlbGVkKSB7XHJcbiAgICAgICAgICAgIGlmKG8uc3RhdGUgIT09ICdxdWV1ZWRGb3JSZW5kZXInKSB7XHJcbiAgICAgICAgICAgICAgby5zdGF0ZSA9ICdsb2FkZWQnO1xyXG4gICAgICAgICAgICAgIGlmKG8ud3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoSW5SZW5kZXJRdWV1ZSh0aGlzLnJlbmRlcmluZyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlbmRlcmluZztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICAgICAgICBpZihvLm1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBvLm1hdGVyaWFsLm1hcCA9IG8udGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIG8ubWF0ZXJpYWwuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoMHhGRkZGRkYpO1xyXG4gICAgICAgICAgICAgICAgby5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIG8udGV4dHVyZS5pbWFnZSA9IGltYWdlO1xyXG4gICAgICAgICAgICAgIG8udGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgby50ZXh0dXJlLm9uVXBkYXRlID0gKCk9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgby50ZXh0dXJlLm9uVXBkYXRlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubWFwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICAgICAgICBpZihvLnN0YXRlICE9PSAncXVldWVkRm9yUmVuZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc3RhdGUgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVQZW5kaW5ncyhvLnBlbmRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJpbmc7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuYm9vay5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZW5kUmVuZGVyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlOiBvLm5cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIC8vdGhpcy51cGRhdGVSZW5kZXJRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gfSwgMTAwKTtcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubWFwID0gby50ZXh0dXJlO1xyXG4gICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyB0aGlzLmJvb2suZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAvLyAgIHR5cGU6ICdsb2FkUGFnZScsXHJcbiAgICAvLyAgIHBhZ2U6IG5cclxuICAgIC8vIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZUNhY2hlLnB1dChuLCBvKTtcclxuICB9XHJcblxyXG4gIGlzU2luZ2xlUGFnZShvKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnNpbmdsZVBhZ2UvKiB8fCAhby5uIHx8IG8ubj09PXRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKi87XHJcbiAgfVxyXG5cclxuICBjYWxjUmVzb2x1dGlvbihvKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5wLmF1dG9SZXNvbHV0aW9uLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgayA9IHRoaXMucC5hdXRvUmVzb2x1dGlvbi5jb2VmZmljaWVudCp0aGlzLnAuem9vbSpNYXRoLnNxcnQodGhpcy52aXN1YWwud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMSkqTWF0aC5taW4oKHRoaXMuaXNTaW5nbGVQYWdlKG8pPyAxOiAwLjUpKnRoaXMudmlzdWFsLndpZHRoKCkvby53aWR0aFRleGVscywgdGhpcy52aXN1YWwuaGVpZ2h0KCkvby5oZWlnaHRUZXhlbHMpO1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgd2lkdGg6IGsqby53aWR0aFRleGVscyxcclxuICAgICAgICBoZWlnaHQ6IGsqby5oZWlnaHRUZXhlbHNcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbWluUmVzID0gdGhpcy5wLmF1dG9SZXNvbHV0aW9uLm1pbiwgbWF4UmVzID0gdGhpcy5wLmF1dG9SZXNvbHV0aW9uLm1heDtcclxuICAgICAgaWYocmVzLndpZHRoPG1pblJlcykge1xyXG4gICAgICAgIHJlcyA9IHtcclxuICAgICAgICAgIHdpZHRoOiBtaW5SZXMsXHJcbiAgICAgICAgICBoZWlnaHQ6IG1pblJlcypvLmhlaWdodFRleGVscy9vLndpZHRoVGV4ZWxzXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBpZihyZXMuaGVpZ2h0PG1pblJlcykge1xyXG4gICAgICAgIHJlcyA9IHtcclxuICAgICAgICAgIHdpZHRoOiBtaW5SZXMqby53aWR0aFRleGVscy9vLmhlaWdodFRleGVscyxcclxuICAgICAgICAgIGhlaWdodDogbWluUmVzXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBpZihyZXMud2lkdGg+bWF4UmVzKSB7XHJcbiAgICAgICAgcmVzID0ge1xyXG4gICAgICAgICAgd2lkdGg6IG1heFJlcyxcclxuICAgICAgICAgIGhlaWdodDogbWF4UmVzKm8uaGVpZ2h0VGV4ZWxzL28ud2lkdGhUZXhlbHNcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHJlcy5oZWlnaHQ+bWF4UmVzKSB7XHJcbiAgICAgICAgcmVzID0ge1xyXG4gICAgICAgICAgd2lkdGg6IG1heFJlcypvLndpZHRoVGV4ZWxzL28uaGVpZ2h0VGV4ZWxzLFxyXG4gICAgICAgICAgaGVpZ2h0OiBtYXhSZXNcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmVzID0ge1xyXG4gICAgICAgIHdpZHRoOiBvLndpZHRoVGV4ZWxzLFxyXG4gICAgICAgIGhlaWdodDogby5oZWlnaHRUZXhlbHNcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBwdXNoSW5SZW5kZXJRdWV1ZShvKSB7XHJcbiAgICBpZihvLnN0YXRlIT09J3F1ZXVlZEZvclJlbmRlcicgJiYgby5zdGF0ZSE9PSdsb2FkaW5nJykge1xyXG4gICAgICBvLnN0YXRlID0gJ3F1ZXVlZEZvclJlbmRlcic7XHJcbiAgICAgIHRoaXMucmVuZGVyUXVldWUucHVzaChvKTtcclxuICAgICAgLy8gdGhpcy51cGRhdGVSZW5kZXJRdWV1ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUmVuZGVyUXVldWUoKSB7XHJcbiAgICBpZih0aGlzLmNhbnZhc2VzKSB7XHJcbiAgICAgIGNvbnN0IHAgPSB0aGlzLnA7XHJcbiAgICAgIGlmKCF0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgIGlmKHAucmVuZGVyV2hpbGVGbGlwcGluZyB8fCAhdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpICYmICF0aGlzLnZpc3VhbC5nZXRPcmJpdCgpLmlzTW92aW5nKCkpIHtcclxuICAgICAgICAgIGxldCBhY3RpdmUsIHRvcDtcclxuICAgICAgICAgIGZvcihsZXQgbyBvZiB0aGlzLnJlbmRlclF1ZXVlKSB7XHJcbiAgICAgICAgICAgIGlmKCFhY3RpdmUgJiYgby5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgYWN0aXZlID0gbztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihvLmlzVG9wKCkpIHtcclxuICAgICAgICAgICAgICB0b3AgPSBvO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmluZyA9IHRvcCB8fCBhY3RpdmU7XHJcblxyXG4gICAgICAgICAgaWYodGhpcy5pc01vYmlsZSgpICYmIHAucmVuZGVySW5hY3RpdmVQYWdlc09uTW9iaWxlIHx8ICF0aGlzLmlzTW9iaWxlKCkgJiYgcC5yZW5kZXJJbmFjdGl2ZVBhZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHVkID0gdGhpcy5ib29rLmdldFVzZXJEaXJlY3Rpb24oKSwgbmVhciA9IHt9O1xyXG4gICAgICAgICAgICAgIGZvcihsZXQgbyBvZiB0aGlzLnJlbmRlclF1ZXVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHVkLmxhc3RUb3BQYWdlPG8ubjtcclxuICAgICAgICAgICAgICAgIGlmKCFuZWFyW2lkXSB8fCBNYXRoLmFicyhuZWFyW2lkXS5uLXVkLmxhc3RUb3BQYWdlKT5NYXRoLmFicyhvLm4tdWQubGFzdFRvcFBhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5lYXJbaWRdID0gbztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nID0gbmVhclt1ZC5kaXJlY3Rpb249PT0xXSB8fCBuZWFyW3VkLmRpcmVjdGlvbiE9PTFdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcud3JhcHBlciAmJiB0aGlzLnJlbmRlcmluZy53cmFwcGVyLnN0YXJ0UmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tUmVuZGVyUXVldWUodGhpcy5yZW5kZXJpbmcpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLnN0YXRlID0gJ3JlbmRlcmluZyc7XHJcbiAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuY2FudmFzZXNbdGhpcy5uZXh0Q2FudmFzXTtcclxuICAgICAgICAgICAgICB0aGlzLm5leHRDYW52YXMgPSAodGhpcy5uZXh0Q2FudmFzKzEpJXRoaXMuY2FudmFzZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc2V0UmVuZGVyQ2FudmFzKG8uYywgby5jdHgpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc2V0UmVzb2x1dGlvbih0aGlzLmNhbGNSZXNvbHV0aW9uKHRoaXMucmVuZGVyaW5nKSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJpbmcud3JhcHBlci5zdGFydFJlbmRlcigpO1xyXG4gICAgICAgICAgICAgIHRoaXMuYm9vay5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydFJlbmRlcmluZycsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiBvLm5cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcud3JhcHBlcikge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJpbmcud3JhcHBlci5zZXRSZW5kZXJQYXVzZSghcC5yZW5kZXJXaGlsZUZsaXBwaW5nICYmICh0aGlzLmJvb2suaXNQcm9jZXNzaW5nKCkgfHwgdGhpcy52aXN1YWwuZ2V0T3JiaXQoKS5pc01vdmluZygpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm9vay51cGRhdGVUaHJlZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldFRpbWVvdXQodGhpcy51cGRhdGVSZW5kZXJRdWV1ZS5iaW5kKHRoaXMpLCAxMDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdHVybk9uRXZlbnRzKCkge1xyXG4gICAgdGhpcy50cmFuc2ZlckV2ZW50cyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICB0dXJuT2ZmRXZlbnRzKCkge1xyXG4gICAgY29uc3QgbW91c2V1cCA9ICQuRXZlbnQoJ21vdXNldXAnKSwgbW91c2VvdXQgPSAkLkV2ZW50KCdtb3VzZW91dCcpO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUuZm9yRWFjaCgoZW50KT0+IHtcclxuICAgICAgY29uc3Qgb2JqZWN0ID0gZW50WzFdO1xyXG4gICAgICBpZihvYmplY3Quc2ltdWxhdGUpIHtcclxuICAgICAgICBvYmplY3Quc2ltdWxhdGUobW91c2V1cCwgdW5kZWZpbmVkLCAwLCAwKTtcclxuICAgICAgICBvYmplY3Quc2ltdWxhdGUobW91c2VvdXQsIHVuZGVmaW5lZCwgMCwgMCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy50cmFuc2ZlckV2ZW50cyA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdHJhbnNmZXJFdmVudFRvVGV4dHVyZShuLCBlLCBkYXRhKSB7XHJcbiAgICBpZih0aGlzLnRyYW5zZmVyRXZlbnRzKSB7XHJcbiAgICAgIGNvbnN0IHRvT2JqZWN0ID0gdGhpcy5nZXRPckxvYWRUZXh0dXJlT2JqZWN0KHVuZGVmaW5lZCwgbik7XHJcbiAgICAgIGlmKHRvT2JqZWN0LndyYXBwZXIpIHtcclxuICAgICAgICBjb25zdCB7dXZ9ID0gZGF0YSwgdG9Eb2MgPSB0b09iamVjdC53cmFwcGVyLmdldFNpbXVsYXRlZERvYygpO1xyXG4gICAgICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGVudCk9PiB7XHJcbiAgICAgICAgICBjb25zdCBvYmplY3QgPSBlbnRbMV07XHJcbiAgICAgICAgICBpZihvYmplY3Quc2ltdWxhdGUpIHtcclxuICAgICAgICAgICAgb2JqZWN0LnNpbXVsYXRlKGUsIHRvRG9jLCB1di54LCB1di55KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZFByZWRpY3RlZFBhZ2VzKCkge1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgY29uc3QgdWQgPSB0aGlzLmJvb2suZ2V0VXNlckRpcmVjdGlvbigpO1xyXG4gICAgICB0aGlzLnByZWRpY3RlZFJlcXVlc3RzID0gW107XHJcbiAgICAgIGZvcihsZXQgaSA9IDAsIHAgPSB1ZC5sYXN0VG9wUGFnZSArIHVkLmRpcmVjdGlvbjsgaTx0aGlzLnAucHJlbG9hZFBhZ2VzOyArK2ksIHArPXVkLmRpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMucHJlZGljdGVkUmVxdWVzdHMucHVzaChwKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IobGV0IHAgb2YgdGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cykge1xyXG4gICAgICAgIGlmKHA+PTAgJiYgcDx0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCkgJiYgIXRoaXMucGFnZUNhY2hlLmdldChwKSkge1xyXG4gICAgICAgICAgdGhpcy5sb2FkKHVuZGVmaW5lZCwgcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldE1hdGVyaWFsKG8sIG1hdGVyaWFsKSB7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZS5mb3JFYWNoKChlKT0+IHtcclxuICAgICAgY29uc3Qgb2IgPSBlWzFdO1xyXG4gICAgICBpZihvIT09b2IgJiYgb2IubWF0ZXJpYWw9PT1tYXRlcmlhbCkge1xyXG4gICAgICAgIGRlbGV0ZSBvYi5tYXRlcmlhbDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZihtYXRlcmlhbCAmJiBtYXRlcmlhbCE9PW8ubWF0ZXJpYWwpIHtcclxuICAgICAgby5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG4gICAgICB0aGlzLnNldHVwTWF0ZXJpYWwobyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXR1cE1hdGVyaWFsKG8pIHtcclxuICAgIG8ubWF0ZXJpYWwubWFwID0gby50ZXh0dXJlLmltYWdlPyBvLnRleHR1cmU6ICh0aGlzLmxvYWRpbmdBbmltYXRpb24/IHRoaXMubG9hZGluZ1tvLmNvbG9yXS50ZXh0dXJlOiBudWxsKTtcclxuICAgIGlmKCFvLm1hdGVyaWFsLm1hcCkge1xyXG4gICAgICBvLm1hdGVyaWFsLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKG8uY29sb3IpO1xyXG4gICAgfVxyXG4gICAgby5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBnZXRPckxvYWRUZXh0dXJlT2JqZWN0KG1hdGVyaWFsLCBuKSB7XHJcbiAgICBsZXQgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgaWYoIW9iamVjdCkge1xyXG4gICAgICBvYmplY3QgPSB0aGlzLmxvYWQobWF0ZXJpYWwsIG4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc2V0TWF0ZXJpYWwob2JqZWN0LCBtYXRlcmlhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcblxyXG4gIHNldFRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuZ2V0T3JMb2FkVGV4dHVyZU9iamVjdChtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvUGFnZU1hbmFnZXIuanMiLCJpbXBvcnQgQm9va1Byb3BzQnVpbGRlciBmcm9tICcuL0Jvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgUGRmIGZyb20gJ1BkZic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZCb29rUHJvcHNCdWlsZGVyIGV4dGVuZHMgQm9va1Byb3BzQnVpbGRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNyYywgb25SZWFkeSwgc3R5bGUsIHBkZk9wZW5PcHRpb25zKSB7XHJcbiAgICBzdXBlcihvblJlYWR5LCBzdHlsZSk7XHJcbiAgICB0aGlzLnBkZiA9IG5ldyBQZGYoc3JjLCB1bmRlZmluZWQsIHBkZk9wZW5PcHRpb25zKTtcclxuICAgIHRoaXMucGFnZURlc2NyaXB0aW9uID0ge1xyXG4gICAgICB0eXBlOiAncGRmJyxcclxuICAgICAgc3JjOiB0aGlzLnBkZixcclxuICAgICAgaW50ZXJhY3RpdmU6IHRydWVcclxuICAgIH07XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBwYWdlQ2FsbGJhY2s6IHRoaXMucGFnZUNhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLnBkZi5nZXRIYW5kbGVyKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnBkZi5kaXNwb3NlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBpbml0KGhhbmRsZXIpIHtcclxuICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5wZGYuZ2V0UGFnZXNOdW0oKTtcclxuICAgIHRoaXMucGFnZXMgPSBwYWdlcztcclxuICAgIHRoaXMuY2FsY1NoZWV0cyhwYWdlcyk7XHJcbiAgICBpZihwYWdlcz4wKSB7XHJcbiAgICAgIGhhbmRsZXIuZ2V0UGFnZSgxKS5cclxuICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBwYWdlLmdldFZpZXdwb3J0KHtzY2FsZTogMX0pLCBzaXplID0ge3dpZHRoOiB2aWV3cG9ydC53aWR0aCwgaGVpZ2h0OiB2aWV3cG9ydC5oZWlnaHR9O1xyXG4gICAgICAgIHRoaXMuY2FsY1Byb3BzKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICAgIH0pLlxyXG4gICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuZGVmYXVsdHM7XHJcbiAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBhZ2VDYWxsYmFjayhuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYWdlRGVzY3JpcHRpb247XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1BkZkJvb2tQcm9wc0J1aWxkZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZMaW5rc0hhbmRsZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihwZGYsIGN0cmwsIGVsZW1lbnQpIHtcclxuICAgIHRoaXMucGRmID0gcGRmO1xyXG4gICAgdGhpcy5jdHJsID0gY3RybDtcclxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICB0aGlzLmN1cnNvcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgc2V0SGFuZGxlcihoYW5kbGVyKSB7XHJcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgZGVmYXVsdEhhbmRsZXIodHlwZSwgZGVzdGluYXRpb24pIHtcclxuICAgIGlmKHR5cGU9PT0naW50ZXJuYWwnKSB7XHJcbiAgICAgIHRoaXMuY3RybC5nb1RvUGFnZShkZXN0aW5hdGlvbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHR5cGU9PT0nZXh0ZXJuYWwnKSB7XHJcbiAgICAgIHdpbmRvdy5vcGVuKGRlc3RpbmF0aW9uLCAnX2JsYW5rJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxsSGFuZGxlcnModHlwZSwgZGVzdGluYXRpb24pIHtcclxuICAgIGlmKCF0aGlzLmhhbmRsZXIgfHwgIXRoaXMuaGFuZGxlcih0eXBlLCBkZXN0aW5hdGlvbikpIHtcclxuICAgICAgdGhpcy5kZWZhdWx0SGFuZGxlcih0eXBlLCBkZXN0aW5hdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVFdmVudChkYXRhKSB7XHJcbiAgICBjb25zdCBlID0gZGF0YS5ldmVudCwgYW5ubyA9IGRhdGEuYW5ub3RhdGlvbjtcclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2VvdmVyJzoge1xyXG4gICAgICAgIHRoaXMuY3Vyc29ycy5wdXNoKHRoaXMuZWxlbWVudC5jc3MoJ2N1cnNvcicpKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlb3V0Jzoge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jc3MoJ2N1cnNvcicsIHRoaXMuY3Vyc29ycy5wb3AoKSB8fCAnJyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAndG91Y2h0YXAnOlxyXG4gICAgICBjYXNlICdjbGljayc6IHtcclxuICAgICAgICBpZihhbm5vLnVybCkge1xyXG4gICAgICAgICAgdGhpcy5jYWxsSGFuZGxlcnMoJ2V4dGVybmFsJywgYW5uby51cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGFubm8uZGVzdCkge1xyXG4gICAgICAgICAgdGhpcy5wZGYuZ2V0RGVzdGluYXRpb24oYW5uby5kZXN0KS5cclxuICAgICAgICAgICAgdGhlbigobnVtYmVyKT0+IHRoaXMuY2FsbEhhbmRsZXJzKCdpbnRlcm5hbCcsIG51bWJlcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9QZGZMaW5rc0hhbmRsZXIuanMiLCJpbXBvcnQgRmluZGVyIGZyb20gJ0ZpbmRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hFbmdpbmUge1xyXG4gIGNvbnN0cnVjdG9yKHBhZ2VDYWxsYmFjaywgcGFnZXMpIHtcclxuICAgIHRoaXMucGFnZUNhbGxiYWNrID0gcGFnZUNhbGxiYWNrO1xyXG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xyXG4gICAgdGhpcy5yZXN1bHRzID0gW107XHJcbiAgfVxyXG5cclxuICBzZXRRdWVyeShxdWVyeSkge1xyXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgdGhpcy51cGRhdGUgPSB0cnVlO1xyXG4gICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKCkge1xyXG4gICAgaWYodGhpcy51cGRhdGUpIHtcclxuICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMucmVzdWx0cztcclxuICAgICAgdGhpcy5yZXN1bHRzID0gW107XHJcbiAgICAgIGlmKHRoaXMub25QYWdlSGl0c0NoYW5nZWQpIHtcclxuICAgICAgICBmb3IobGV0IHJlcyBvZiByZXN1bHRzKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUGFnZUhpdHNDaGFuZ2VkKHVuZGVmaW5lZCwgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnBhZ2UgPSAwO1xyXG4gICAgICB0aGlzLnN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgaWYodGhpcy5xdWVyeS5sZW5ndGg+MSkge1xyXG4gICAgICAgIHRoaXMucHJvY2VzcygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYodGhpcy5wYWdlPHRoaXMucGFnZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFtcCA9IHRoaXMuc3RhbXA7XHJcbiAgICAgICAgdGhpcy5maW5kKHRoaXMucGFnZUNhbGxiYWNrKHRoaXMucGFnZSkpLlxyXG4gICAgICAgICAgdGhlbigoY29udGV4dHMpPT4ge1xyXG4gICAgICAgICAgICBpZihzdGFtcCA9PT0gdGhpcy5zdGFtcCkge1xyXG4gICAgICAgICAgICAgIGlmKGNvbnRleHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICBwYWdlOiB0aGlzLnBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIGNvbnRleHRzXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCh0aGlzLnBhZ2UsIHRoaXMucXVlcnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICArK3RoaXMucGFnZTtcclxuICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmQocGkpIHtcclxuICAgIGxldCBuZXh0O1xyXG4gICAgaWYocGkudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIG5leHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgcGkuc3JjLmdldEhhbmRsZXIoKCk9PiB7XHJcbiAgICAgICAgICBjb25zdCBuID0gcGkubnVtYmVyPT09dW5kZWZpbmVkPyB0aGlzLnBhZ2U6IHBpLm51bWJlcjtcclxuICAgICAgICAgIGlmKHBpLnNyYy5nZXRQYWdlVHlwZShuKT09PSdyaWdodCcpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShbXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGkuc3JjLmdldFBhZ2UobikuXHJcbiAgICAgICAgICAgIHRoZW4oKHBhZ2UpPT4ge1xyXG4gICAgICAgICAgICAgIHBhZ2UuZ2V0VGV4dENvbnRlbnQoKS5cclxuICAgICAgICAgICAgICB0aGVuKCh0ZXh0Q29udGVudCk9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBGaW5kZXIodGV4dENvbnRlbnQuaXRlbXMubWFwKChpdGVtKT0+IGl0ZW0uc3RyKSwgdGhpcy5xdWVyeSwge2hpdHM6IGZhbHNlfSkuZ2V0Q29udGV4dHMoKSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLlxyXG4gICAgICAgICAgICBjYXRjaCgoKT0+IHJlc29sdmUoW10pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbmV4dCA9IFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2VhcmNoRW5naW5lLmpzIiwiaW1wb3J0IHskLCB0cn0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBXaWRnZXRDb250cm9sbGVyIGZyb20gJ1dpZGdldENvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcmVDb250cm9sbGVyIGV4dGVuZHMgV2lkZ2V0Q29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGJvb2tDdHJsLCBsaW5rQnVpbGRlcj0ocGFnZSk9PiBwYWdlKSB7XHJcbiAgICBzdXBlcih2aWV3LCAnd2lkU2hhcmUnKTtcclxuICAgIHRoaXMuYm9va0N0cmwgPSBib29rQ3RybDtcclxuICAgIHRoaXMubGlua0J1aWxkZXIgPSBsaW5rQnVpbGRlcjtcclxuICAgIGJvb2tDdHJsLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZEZsaXAnLCB0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBjbWRDbG9zZVNoYXJlKCkge1xyXG4gICAgdGhpcy5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBjbGlja0xpbmsodSwgYmxhbms9dHJ1ZSkge1xyXG4gICAgY29uc3QgYSA9ICQoJzxhIGhyZWY9XCInK3UrJ1wiJysoYmxhbms/ICcgdGFyZ2V0PVwiX2JsYW5rXCInOiAnJykrJz48L2E+JykuYXBwZW5kVG8odGhpcy52aWV3LmdldENvbnRhaW5lcigpKTtcclxuICAgIGFbMF0uY2xpY2soKTtcclxuICAgIGEucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBjbWRGYWNlYm9vaygpIHtcclxuICAgIHRoaXMuY2xpY2tMaW5rKCdodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT0nK2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLmdldExpbmsoKSkpO1xyXG4gIH1cclxuXHJcbiAgY21kVHdpdHRlcigpIHtcclxuICAgIHRoaXMuY2xpY2tMaW5rKCdodHRwOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPScrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuZ2V0TGluaygpKSk7XHJcbiAgfVxyXG5cclxuICBjbWRFbWFpbCgpIHtcclxuICAgIHRoaXMuY2xpY2tMaW5rKCdtYWlsdG86P3N1YmplY3Q9Jyt0cignV2Ugd2FudGVkIHlvdSB0byBzZWUgdGhpcyBib29rJykrJyZib2R5PScrdHIoJ0NoZWNrIG91dCB0aGlzIHNpdGUnKSsnICcrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuZ2V0TGluaygpKSwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGluaygpIHtcclxuICAgIHJldHVybiB0aGlzLmxpbmtCdWlsZGVyKHRoaXMuYm9va0N0cmwuZ2V0UGFnZUZvckdVSSgpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZih0aGlzLnZpZXcpIHtcclxuICAgICAgZm9yKGxldCBjbWQgb2YgWydjbWRDbG9zZVNoYXJlJywgJ2NtZEZhY2Vib29rJywgJ2NtZFR3aXR0ZXInLCAnY21kRW1haWwnXSkge1xyXG4gICAgICAgIHRoaXMudmlldy5zZXRTdGF0ZShjbWQsIHtcclxuICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd0eHRTaGFyZUxpbmsnLCB7XHJcbiAgICAgICAgdmFsdWU6IHRoaXMuZ2V0TGluaygpLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICAgIHN1cGVyLnVwZGF0ZVZpZXcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hhcmVDb250cm9sbGVyLmpzIiwiaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoZWV0Q3NzTGF5ZXIge1xyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYmxvY2ssIHByb3BzKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIGNvbnN0IHNpemUgPSBibG9jay5nZXRUb3BTaXplKCk7XHJcbiAgICB0aGlzLmxheWVyID0gbmV3IENTU0xheWVyKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCBwcm9wcyk7XHJcblxyXG4gICAgdGhpcy51cGRhdGUoYmxvY2spO1xyXG4gICAgdGhpcy52aXN1YWwuYWRkQ3NzT2JqZWN0KHRoaXMubGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMubGF5ZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy52aXN1YWwucmVtb3ZlQ3NzT2JqZWN0KHRoaXMubGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgaXNIaWRkZW4oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXllci5pc0hpZGRlbigpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmxheWVyLmhpZGUoKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXllci5zaG93KCk7XHJcbiAgfVxyXG5cclxuICBzZXQoY3NzLCBodG1sLCBqcykge1xyXG4gICAgdGhpcy5sYXllci5zZXREYXRhKGNzcywgaHRtbCwganMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGJsb2NrKSB7XHJcbiAgICB0aGlzLmJsb2NrID0gYmxvY2s7XHJcbiAgICBjb25zdCBzaXplID0gYmxvY2suZ2V0VG9wU2l6ZSgpO1xyXG4gICAgdGhpcy5sYXllci5zZXRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuICAgIHRoaXMuYmxvY2suZ2V0VG9wV29ybGRSb3RhdGlvbih0aGlzLmxheWVyLnJvdGF0aW9uKTtcclxuICAgIHRoaXMuYmxvY2suZ2V0VG9wV29ybGRQb3NpdGlvbih0aGlzLmxheWVyLnBvc2l0aW9uKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldENzc0xheWVyLmpzIiwiaW1wb3J0IE1hdGhVdGlscyBmcm9tICdNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hlZXRQaHlzaWNzIHtcclxuXHJcbiAgc3RhdGljIHRhcmdldEZvcmNlQ2xiKG8sYSx2LGNoKSB7XHJcbiAgICBjb25zdCBsID0gYSp0aGlzLnI7XHJcbiAgICByZXR1cm4gMTAwKnRoaXMubSp0aGlzLmcqKDIvKDErTWF0aC5leHAoMTAqKGwtdGhpcy50bCkpKS0xKS10aGlzLm0qNDAqdjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBob3ZlckNvcm5lckZvcmNlQ2xiKG8sdixsLGNoKSB7XHJcbiAgICByZXR1cm4gNTtcclxuICB9XHJcblxyXG4gIGdldFRhcmdldEZvcmNlQ2xiKG1hc3MsIHRhcmdldEFuZ2xlKSB7XHJcbiAgICByZXR1cm4gU2hlZXRQaHlzaWNzLnRhcmdldEZvcmNlQ2xiLmJpbmQoe1xyXG4gICAgICBnOiB0aGlzLnAuZ3Jhdml0eSxcclxuICAgICAgbTogbWFzcyxcclxuICAgICAgdGw6IHRhcmdldEFuZ2xlKnRoaXMucC5yLFxyXG4gICAgICByOiB0aGlzLnAuclxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZHJhZ0ZvcmNlQ2xiKG8sYSx2LGNoKSB7XHJcbiAgICByZXR1cm4gby5mbGJ0Km8ubSooMTAqby5nKmNoLTUwKnYvKDErTWF0aC5leHAoMy41Kk1hdGguYWJzKGNoKSkpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkcmFnQ29ybmVyRm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIHJldHVybiAxNSooMi8oMStNYXRoLmV4cCgxMCooYS10aGlzLnRhKSpvLnIpKS0xKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXREcmFnQ29ybmVyRm9yY2VDbGIodGFyZ2V0QW5nbGUpIHtcclxuICAgIHJldHVybiBTaGVldFBoeXNpY3MuZHJhZ0Nvcm5lckZvcmNlQ2xiLmJpbmQoe1xyXG4gICAgICB0YTogdGFyZ2V0QW5nbGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iocj0xLCBncmF2aXR5PTEsIGNvcm5lckRldmlhdGlvbj0wLjE1LCBmcHM9MjQwKSB7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHIsXHJcbiAgICAgIGNvcm5lckRldmlhdGlvbixcclxuICAgICAgbDogTWF0aC5QSSpyLFxyXG4gICAgICBzdGFydER0OiAxL2ZwcyxcclxuICAgICAgZ3Jhdml0eSxcclxuICAgICAgbWFyZ2luOiAwLjAwMipyLFxyXG4gICAgICBpbmZNOiAxZTQsXHJcbiAgICAgIGF0dGVtcHRzOiAxNixcclxuICAgICAgbWF4SXRlcmF0aW9uczogMTAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMub3MgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3QobWFzcywgYW5nbGUsIHZlbG9jaXR5LCBmbGV4aWJpbGl0eSwgY29ybmVySGVpZ2h0LCBzaW11bGF0ZUNsYiwgcmVtb3ZlQ2xiLCBmb3JjZUNsYj0oKT0+IDAsIGNvcm5lckZvcmNlQ2xiPSgpPT4gMCkge1xyXG4gICAgY29uc3Qgbm8gPSB7XHJcbiAgICAgIGlkOiBNYXRoVXRpbHMuZ2V0VW5pcXVlKCksXHJcbiAgICAgIG06IG1hc3MsXHJcbiAgICAgIHY6IHZlbG9jaXR5LFxyXG4gICAgICBsOiBhbmdsZSp0aGlzLnAucixcclxuICAgICAgZjogZm9yY2VDbGIsXHJcbiAgICAgIGNmOiBjb3JuZXJGb3JjZUNsYixcclxuICAgICAgY2g6IGNvcm5lckhlaWdodCxcclxuICAgICAgZmxidDogZmxleGliaWxpdHksXHJcbiAgICAgIHNpbXVsYXRlQ2xiLFxyXG4gICAgICByZW1vdmVDbGJcclxuICAgIH07XHJcbiAgICBsZXQgaSA9IHRoaXMub3MuZmluZEluZGV4KChvKT0+IG5vLmw8PW8ubCk7XHJcbiAgICBpID0gfmk/IGk6IHRoaXMub3MubGVuZ3RoO1xyXG4gICAgdGhpcy5vcy5zcGxpY2UoaSwgMCwgbm8pO1xyXG4gICAgcmV0dXJuIG5vLmlkO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFyYW1ldHJNYXAobmFtZSkge1xyXG4gICAgY29uc3QgbWFwID0ge1xyXG4gICAgICBtYXNzOiAnbScsXHJcbiAgICAgIHZlbG9jaXR5OiAndicsXHJcbiAgICAgIGZsZXhpYmlsaXR5OiAnZmxidCcsXHJcbiAgICAgIGNvcm5lckhlaWdodDogJ2NoJyxcclxuICAgICAgc2ltdWxhdGVDbGI6ICdzaW11bGF0ZUNsYicsXHJcbiAgICAgIHJlbW92ZUNsYjogJ3JlbW92ZUNsYicsXHJcbiAgICAgIGZvcmNlQ2xiOiAnZicsXHJcbiAgICAgIGNvcm5lckZvcmNlQ2xiOiAnY2YnXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG1hcFtuYW1lXTtcclxuICB9XHJcblxyXG4gIHNldFBhcmFtZXRyKGlkLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMub3MuZmluZCgobyk9PiBvLmlkPT09aWQpO1xyXG4gICAgaWYobmFtZSA9PT0gJ2FuZ2xlJykge1xyXG4gICAgICBvLmwgPSB2YWx1ZSp0aGlzLnAucjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBvW3RoaXMuZ2V0UGFyYW1ldHJNYXAobmFtZSldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0cihpZCwgbmFtZSkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMub3MuZmluZCgobyk9PiBvLmlkPT09aWQpO1xyXG4gICAgbGV0IHZhbHVlO1xyXG4gICAgaWYobmFtZSA9PT0gJ2FuZ2xlJykge1xyXG4gICAgICB2YWx1ZSA9IG8ubC90aGlzLnAucjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YWx1ZSA9IG9bdGhpcy5nZXRQYXJhbWV0ck1hcChuYW1lKV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLFxyXG4gICAgICAgIGR0PXRoaXMucC5zdGFydER0LFxyXG4gICAgICAgIGF0dGVtcHQ9MCxcclxuICAgICAgICBpdD0wO1xyXG5cclxuICAgIHdoaWxlKHQ8VCAmJiBpdDx0aGlzLnAubWF4SXRlcmF0aW9ucykge1xyXG4gICAgICBpZihkdD5ULXQpIHtcclxuICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBub3MgPSB0aGlzLmludGVncmF0ZSh0aGlzLm9zLCBkdCksXHJcbiAgICAgICAgICAgIGNpID0gdGhpcy5maW5kQ29sbGlzaW9ucyhub3MpO1xyXG4gICAgICBpZihjaS5udW0+MSAmJiBhdHRlbXB0PHRoaXMucC5hdHRlbXB0cykge1xyXG4gICAgICAgIGR0Lz0yO1xyXG4gICAgICAgICsrYXR0ZW1wdDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpZihjaS5udW09PT0xKSB7XHJcbiAgICAgICAgICBjb25zdCBzY29zID0gdGhpcy5zb2x2ZUNvbGxpc2lvbihub3NbY2kubGFzdC0xXSwgbm9zW2NpLmxhc3RdKTtcclxuICAgICAgICAgIG5vc1tjaS5sYXN0LTFdID0gc2Nvc1swXTtcclxuICAgICAgICAgIG5vc1tjaS5sYXN0XSA9IHNjb3NbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoY2kubnVtPjEpIHtcclxuICAgICAgICAgIGNvbnN0IGdzID0gW107XHJcbiAgICAgICAgICBsZXQgbGFzdCA9IC0yO1xyXG4gICAgICAgICAgZm9yKGxldCBpIG9mIGNpLmFsbCkge1xyXG4gICAgICAgICAgICBpZihpLWxhc3Q+MSkge1xyXG4gICAgICAgICAgICAgIGdzLnB1c2goW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdzW2dzLmxlbmd0aC0xXS5wdXNoKGkpO1xyXG4gICAgICAgICAgICBsYXN0ID0gaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvcihsZXQgZyBvZiBncykge1xyXG4gICAgICAgICAgICBsZXQgc2csIGkwO1xyXG4gICAgICAgICAgICBpZihub3NbZ1swXV0ubD5NYXRoLlBJLzIqdGhpcy5wLnIpIHtcclxuICAgICAgICAgICAgICBzZyA9IC0xO1xyXG4gICAgICAgICAgICAgIGkwID0gZ1tnLmxlbmd0aC0xXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBzZyA9IDE7XHJcbiAgICAgICAgICAgICAgaTAgPSBnWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaT1pMDsgaTxub3MubGVuZ3RoICYmIGk+LTE7IGkrPXNnKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbyA9IG5vc1tpK3NnXTtcclxuICAgICAgICAgICAgICBpZihvICYmIHNnKihvLmwtbm9zW2ldLmwpPD10aGlzLnAubWFyZ2luKSB7XHJcbiAgICAgICAgICAgICAgICBvLmw9bm9zW2ldLmwrc2cqMip0aGlzLnAubWFyZ2luO1xyXG4gICAgICAgICAgICAgICAgaWYoby5sPnRoaXMucC5sIHx8IG8ubDwwKSB7XHJcbiAgICAgICAgICAgICAgICAgIG8ubCA9IG8ubD50aGlzLnAubD8gdGhpcy5wLmw6IDA7XHJcbiAgICAgICAgICAgICAgICAgIG8uY2ggPSAwO1xyXG4gICAgICAgICAgICAgICAgICBvLnY9MDtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQmFkIGNvbGxpc2lvbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9zID0gbm9zO1xyXG4gICAgICAgIHRoaXMuZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucygpO1xyXG4gICAgICAgIHQrPWR0O1xyXG4gICAgICAgIGR0PXRoaXMucC5zdGFydER0O1xyXG4gICAgICAgIGF0dGVtcHQ9MDtcclxuICAgICAgfVxyXG4gICAgICArK2l0O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVtb3ZlU3RhdGljcygpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlU3RhdGljcygpIHtcclxuICAgIGNvbnN0IG5vcyA9IFtdLCBub3RpZnkgPSBbW10sW11dO1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMub3MpIHtcclxuICAgICAgaWYoby5zaW11bGF0ZUNsYikge1xyXG4gICAgICAgIG8uc2ltdWxhdGVDbGIoby5sL3RoaXMucC5yLCBvLmNoKTtcclxuICAgICAgfVxyXG4gICAgICBpZigoby5sPT09dGhpcy5wLmwgfHwgby5sPT09MCkgJiYgby52PT09MCkge1xyXG4gICAgICAgIGlmKG8ucmVtb3ZlQ2xiICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG5vdGlmeVsoby5sIT09dGhpcy5wLmwpKzBdLnB1c2gobyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIG5vcy5wdXNoKG8pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm9zID0gbm9zO1xyXG4gICAgZm9yKGxldCBvIG9mIG5vdGlmeVswXS5yZXZlcnNlKCkpIHtcclxuICAgICAgby5yZW1vdmVDbGIoTWF0aC5QSSwgby5jaCk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG8gb2Ygbm90aWZ5WzFdKSB7XHJcbiAgICAgIG8ucmVtb3ZlQ2xiKDAsIG8uY2gpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucygpIHtcclxuICAgIGlmKHRoaXMub3MubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IG9zID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIC4uLnRoaXMub3NbMF0sXHJcbiAgICAgICAgICBsOiAwLFxyXG4gICAgICAgICAgbTogdGhpcy5wLmluZk0sXHJcbiAgICAgICAgICBjaDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLi4udGhpcy5vcyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAuLi50aGlzLm9zWzBdLFxyXG4gICAgICAgICAgbDogMS4wNSp0aGlzLnAubCxcclxuICAgICAgICAgIG06IHRoaXMucC5pbmZNLFxyXG4gICAgICAgICAgY2g6IDBcclxuICAgICAgICB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICBmb3IobGV0IGk9MTsgaTxvcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGE9b3NbaS0xXSwgYj1vc1tpXSxcclxuICAgICAgICAgICAgICBhbD1hLmwrdGhpcy5wLmNvcm5lckRldmlhdGlvbiphLmNoKnRoaXMucC5yLFxyXG4gICAgICAgICAgICAgIGJsPWIubCt0aGlzLnAuY29ybmVyRGV2aWF0aW9uKmIuY2gqdGhpcy5wLnI7XHJcbiAgICAgICAgaWYoMS4wNSphbD5ibCAmJiBhLmNoPmIuY2gpIHtcclxuICAgICAgICAgIGNvbnN0IGRDaCA9IGEuY2gtYi5jaCwgZHY9YS5tL2EuZmxidCtiLm0vYi5mbGJ0LCBrYT1hLm0vYS5mbGJ0L2R2LCBrYj1iLm0vYi5mbGJ0L2R2O1xyXG4gICAgICAgICAgYS5jaD1hLmNoLWtiKmRDaDtcclxuICAgICAgICAgIGIuY2g9Yi5jaCtrYSpkQ2g7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzb2x2ZUNvbGxpc2lvbihhLCBiKSB7XHJcbiAgICBjb25zdCBtbT0oYi5tK2EubSksXHJcbiAgICAgIGF2ID0gKC1hLnYqYi5tK2EubSphLnYrMipiLm0qYi52KS9tbSxcclxuICAgICAgYnYgPSAoYi5tKmIudi1iLnYqYS5tKzIqYS5tKmEudikvbW07XHJcbiAgICByZXR1cm4gW3suLi5hLCB2OiBhdn0sIHsuLi5iLCB2OiBidn1dO1xyXG4gIH1cclxuXHJcbiAgZmluZENvbGxpc2lvbnMob3MpIHtcclxuICAgIGNvbnN0IGNpID0ge1xyXG4gICAgICBudW06IDAsXHJcbiAgICAgIGxhc3Q6IDAsXHJcbiAgICAgIGFsbDogW11cclxuICAgIH07XHJcbiAgICBmb3IobGV0IGkgPSAxOyBpPG9zLmxlbmd0aCAmJiBjaS5udW08MjsgKytpKSB7XHJcbiAgICAgIGlmKG9zW2ktMV0ubD5vc1tpXS5sIHx8IHRoaXMuaXNDb2xsaXNpb24ob3NbaS0xXSwgb3NbaV0pKSB7XHJcbiAgICAgICAgaWYob3NbaS0xXS5sPm9zW2ldLmwpIHtcclxuICAgICAgICAgICsrY2kubnVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK2NpLm51bTtcclxuICAgICAgICBjaS5sYXN0ID0gaTtcclxuICAgICAgICBpZihjaS5hbGwuaW5kZXhPZihpLTEpPT09LTEpIHtcclxuICAgICAgICAgIGNpLmFsbC5wdXNoKGktMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNpLmFsbC5pbmRleE9mKGkpPT09LTEpIHtcclxuICAgICAgICAgIGNpLmFsbC5wdXNoKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNpO1xyXG4gIH1cclxuXHJcbiAgaXNDb2xsaXNpb24oYSwgYikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKGEubC1iLmwpPHRoaXMucC5tYXJnaW4gJiYgYS52PmIudjtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShvcywgZHQpIHtcclxuICAgIGNvbnN0IG5vcyA9IFtdO1xyXG4gICAgZm9yKGxldCBvIG9mIG9zKSB7XHJcbiAgICAgIGNvbnN0IHZsID0gTWF0aFV0aWxzLnJrNChcclxuICAgICAgICB0aGlzLmR5LmJpbmQoe1xyXG4gICAgICAgICAgZzogdGhpcy5wLmdyYXZpdHksXHJcbiAgICAgICAgICByOiB0aGlzLnAucixcclxuICAgICAgICAgIG06IG8ubSxcclxuICAgICAgICAgIGY6IG8uZixcclxuICAgICAgICAgIGNmOiBvLmNmLFxyXG4gICAgICAgICAgY2g6IG8uY2gsXHJcbiAgICAgICAgICBmbGJ0OiBvLmZsYnRcclxuICAgICAgICB9KSxcclxuICAgICAgICAwLFxyXG4gICAgICAgIGR0LFxyXG4gICAgICAgIFtvLnYsIG8ubCwgby5jaF1cclxuICAgICAgKTtcclxuICAgICAgY29uc3Qgbm8gPSB7XHJcbiAgICAgICAgLi4ubyxcclxuICAgICAgICB2OiB2bFswXSxcclxuICAgICAgICBsOiB2bFsxXSxcclxuICAgICAgICBjaDogdmxbMl1cclxuICAgICAgfTtcclxuICAgICAgaWYobm8ubDw9MCB8fCBuby5sPj10aGlzLnAubCkge1xyXG4gICAgICAgIG5vLmw9bm8ubDw9MD8gMDogdGhpcy5wLmw7XHJcbiAgICAgICAgbm8udj0wO1xyXG4gICAgICAgIG5vLmNoPTA7XHJcbiAgICAgIH1cclxuICAgICAgbm9zLnB1c2gobm8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcztcclxuICB9XHJcblxyXG4gIGR5KHQseSkge1xyXG4gICAgY29uc3Qgdj15WzBdLCBsPXlbMV0sIGNoPXlbMl0sIGFsZiA9IGwvdGhpcy5yLCBmPXRoaXMuZih0aGlzLGFsZix2LGNoKSwgY2Y9dGhpcy5jZih0aGlzLGFsZix2LGNoKSwgY29zQWxmPU1hdGguY29zKGFsZiksXHJcbiAgICBicmY9Ni42NSpNYXRoLmFicygoTWF0aC5zaWduKGNvc0FsZiktTWF0aC5zaWduKHYpKSp2KSpNYXRoLnBvdyhjb3NBbGYsNSk7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAtdGhpcy5nKmNvc0FsZiticmYrZi90aGlzLm0sXHJcbiAgICAgIHYrMC4wMSooTWF0aC5yYW5kb20oKS0wLjUpLFxyXG4gICAgICB0aGlzLmZsYnQqKCgyLygxK01hdGguZXhwKC0wLjIqY2YpKS0xKSooMS0yLygxK01hdGguZXhwKC01KihNYXRoLmFicyhjaCktMikpKSktY2gpXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kc0Vudmlyb21lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZT17fSkge1xyXG4gICAgdGVtcGxhdGUgPSB0eXBlb2YgdGVtcGxhdGU9PT0nZnVuY3Rpb24nPyB0ZW1wbGF0ZSgpOiB0ZW1wbGF0ZTtcclxuICAgIHRoaXMuc291bmRzID0gdGVtcGxhdGUuc291bmRzIHx8IHt9O1xyXG4gICAgdGhpcy5hdWRpbyA9IHt9O1xyXG4gICAgaWYodGhpcy5zb3VuZHMuc3RhcnRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLnN0YXJ0RmxpcCk7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwLnZvbHVtZSA9IDAuNTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuc291bmRzLmVuZEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5lbmRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLmVuZEZsaXApO1xyXG4gICAgICB0aGlzLmF1ZGlvLmVuZEZsaXAudm9sdW1lID0gMC41O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RW5hYmxlZChlbmFibGVkKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSBlbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLnN0YXJ0RmxpcDtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLmVuZEZsaXA7XHJcbiAgfVxyXG5cclxuICBwbGF5KHBsYXllcikge1xyXG4gICAgcGxheWVyLnBsYXkoKS5jYXRjaCgoKT0+IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICBzdGFydEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5wbGF5KHRoaXMuYXVkaW8uc3RhcnRGbGlwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVuZEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAucGF1c2UoKTtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAuY3VycmVudFRpbWUgPSAwO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYXVkaW8uZW5kRmxpcCkge1xyXG4gICAgICB0aGlzLnBsYXkodGhpcy5hdWRpby5lbmRGbGlwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN1YnNjcmliZUZsaXBzKGVtaXR0ZXIpIHtcclxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcignc3RhcnRGbGlwJywgdGhpcy5zdGFydEZsaXAuYmluZCh0aGlzKSk7XHJcbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZEZsaXAnLCB0aGlzLmVuZEZsaXAuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NvdW5kc0Vudmlyb21lbnQuanMiLCJpbXBvcnQgV2lkZ2V0Q29udHJvbGxlciBmcm9tICdXaWRnZXRDb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvY0NvbnRyb2xsZXIgZXh0ZW5kcyBXaWRnZXRDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlldywgYm9va0N0cmwpIHtcclxuICAgIHN1cGVyKHZpZXcsICd3aWRGbG9hdFduZCcpO1xyXG4gICAgdGhpcy5ib29rQ3RybCA9IGJvb2tDdHJsO1xyXG4gICAgdGhpcy50YWIgPSAnbm9uZSc7XHJcbiAgfVxyXG5cclxuICBzZXRUaHVtYm5haWxzKHRodW1ibmFpbHMpIHtcclxuICAgIHRoaXMudGh1bWJuYWlscyA9IHRodW1ibmFpbHM7XHJcbiAgICB0aHVtYm5haWxzLm9uTmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlVGh1bWJuYWlscy5iaW5kKHRoaXMpO1xyXG4gICAgaWYodGhpcy50YWIgPT09ICdub25lJykge1xyXG4gICAgICB0aGlzLnRhYiA9ICd0aHVtYm5haWxzJztcclxuICAgIH1cclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2VhcmNoKHNlYXJjaCkge1xyXG4gICAgdGhpcy5zZWFyY2ggPSBzZWFyY2g7XHJcbiAgICBzZWFyY2gub25OYXZpZ2F0ZSA9IHRoaXMubmF2aWdhdGVTZWFyY2guYmluZCh0aGlzKTtcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0Qm9va21hcmtzKGJvb2ttYXJrcywgcGRmKSB7XHJcbiAgICBpZihib29rbWFya3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgIHRoaXMuYm9va21hcmtzID0gYm9va21hcmtzO1xyXG4gICAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgICAgYm9va21hcmtzLm9uTmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlQm9va21hcmtzLmJpbmQodGhpcyk7XHJcbiAgICAgIHRoaXMuaXNCb29rbWFya3MgPSB0cnVlO1xyXG4gICAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZEJvb2ttYXJrcygpIHtcclxuICAgIHRoaXMuc2V0QWN0aXZlVGFiKCdib29rbWFya3MnKTtcclxuICB9XHJcblxyXG4gIGNtZFRodW1ibmFpbHMoKSB7XHJcbiAgICB0aGlzLnNldEFjdGl2ZVRhYigndGh1bWJuYWlscycpO1xyXG4gIH1cclxuXHJcbiAgY21kU2VhcmNoKCkge1xyXG4gICAgdGhpcy5zZXRBY3RpdmVUYWIoJ3NlYXJjaCcpO1xyXG4gIH1cclxuXHJcbiAgc2V0QWN0aXZlVGFiKHRhYikge1xyXG4gICAgaWYodGhpc1t0YWJdKSB7XHJcbiAgICAgIHRoaXMudGFiID0gdGFiO1xyXG4gICAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZENsb3NlVG9jKCkge1xyXG4gICAgdGhpcy5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVRodW1ibmFpbHMobnVtYmVyKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKG51bWJlcik7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVNlYXJjaChudW1iZXIpIHtcclxuICAgIHRoaXMuZ29Ub1BhZ2UobnVtYmVyKTtcclxuICB9XHJcblxyXG4gIG9wZW5VcmwodXJsKSB7XHJcbiAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcclxuICB9XHJcblxyXG4gIGdvVG9QYWdlKG51bWJlcikge1xyXG4gICAgdGhpcy5ib29rQ3RybC5nb1RvUGFnZShudW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgZHN0RGF0YUhhbmRsZXIoZGF0YSkge1xyXG4gICAgZGF0YSA9IChkYXRhKycnKS50cmltKCk7XHJcbiAgICBsZXQgbnVtYmVyO1xyXG4gICAgaWYoKG51bWJlcj1wYXJzZUludChkYXRhKSk9PWRhdGEpIHtcclxuICAgICAgdGhpcy5nb1RvUGFnZShudW1iZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3BlblVybChkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5hdmlnYXRlQm9va21hcmtzKGl0ZW0pIHtcclxuICAgIGlmKGl0ZW0udXJsKSB7XHJcbiAgICAgIHRoaXMub3BlblVybChpdGVtLnVybCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGl0ZW0uZGVzdCkge1xyXG4gICAgICB0aGlzLnBkZi5nZXREZXN0aW5hdGlvbihpdGVtLmRlc3QpLlxyXG4gICAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmdvVG9QYWdlKG51bWJlcikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihpdGVtLmRzdERhdGEhPT11bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5kc3REYXRhSGFuZGxlcihpdGVtLmRzdERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFRvY01lbnUnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRUaHVtYm5haWxzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFNlYXJjaCcsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0nc2VhcmNoJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZEJvb2ttYXJrcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0nYm9va21hcmtzJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZEJvb2ttYXJrcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogISF0aGlzLmJvb2ttYXJrcyxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J2Jvb2ttYXJrcydcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kQ2xvc2VUb2MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRUaHVtYm5haWxzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiAhIXRoaXMudGh1bWJuYWlscyAmJiAhISh0aGlzLnNlYXJjaCB8fCB0aGlzLmJvb2ttYXJrcyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJ1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRTZWFyY2gnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6ICEhdGhpcy5zZWFyY2gsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSdzZWFyY2gnXHJcbiAgICAgIH0pO1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy50aHVtYm5haWxzLnNldEVuYWJsZSh0aGlzLnZpc2libGUgJiYgdGhpcy50YWI9PT0ndGh1bWJuYWlscycpKTtcclxuICAgICAgc3VwZXIudXBkYXRlVmlldygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Ub2NDb250cm9sbGVyLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBUaHJlZVV0aWxzIGZyb20gJ1RocmVlVXRpbHMnO1xyXG5cclxuY29uc3QgcmVzWCA9IDExLFxyXG4gICAgICByZXNZID0gMixcclxuICAgICAgcmVzWiA9IDE1LFxyXG4gICAgICBzY2FsZSA9IDEsXHJcbiAgICAgIGZhY2VzID0gW107XHJcblxyXG5jb25zdCBmcm9udEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNYLTEsIHJlc1ktMSk7XHJcbmZyb250R2VvbWV0cnkudHJhbnNsYXRlKDAuNSpzY2FsZSwwLjUqc2NhbGUsc2NhbGUpO1xyXG5jb25zdCBiYWNrR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1gtMSwgcmVzWS0xKTtcclxuYmFja0dlb21ldHJ5LnJvdGF0ZVkoTWF0aC5QSSk7XHJcbmJhY2tHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLDAuNSpzY2FsZSwwKTtcclxuY29uc3QgbGVmdEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNaLTEsIHJlc1ktMSk7XHJcbmxlZnRHZW9tZXRyeS5yb3RhdGVZKC1NYXRoLlBJLzIpO1xyXG5sZWZ0R2VvbWV0cnkudHJhbnNsYXRlKDAsMC41KnNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IHJpZ2h0R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1otMSwgcmVzWS0xKTtcclxucmlnaHRHZW9tZXRyeS5yb3RhdGVZKE1hdGguUEkvMik7XHJcbnJpZ2h0R2VvbWV0cnkudHJhbnNsYXRlKHNjYWxlLDAuNSpzY2FsZSwwLjUqc2NhbGUpO1xyXG5jb25zdCB0b3BHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWC0xLCByZXNaLTEpO1xyXG50b3BHZW9tZXRyeS5yb3RhdGVYKC1NYXRoLlBJLzIpO1xyXG50b3BHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLHNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IGJvdHRvbUdlb21ldHJ5ID0gdG9wR2VvbWV0cnkuY2xvbmUoKTtcclxuYm90dG9tR2VvbWV0cnkudHJhbnNsYXRlKDAsLXNjYWxlLDApO1xyXG5mb3IobGV0IGYgb2YgYm90dG9tR2VvbWV0cnkuZmFjZXMpIHtcclxuICBbZi5hLCBmLmJdID0gW2YuYiwgZi5hXTtcclxufVxyXG5cclxuY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuZ2VvbWV0cnkudmVydGljZXMgPSBbLi4uYm90dG9tR2VvbWV0cnkudmVydGljZXMsIC4uLnRvcEdlb21ldHJ5LnZlcnRpY2VzXTtcclxuXHJcbmNvbnN0IGFkZEZhY2VzID0gKGZzLCBtYXApPT4ge1xyXG4gIGZvcihsZXQgZiBvZiBmcykge1xyXG4gICAgZ2VvbWV0cnkuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMobWFwKGYuYSksIG1hcChmLmIpLCBtYXAoZi5jKSkpO1xyXG4gIH1cclxuICBmYWNlcy5wdXNoKGdlb21ldHJ5LmZhY2VzLmxlbmd0aCk7XHJcbn07XHJcblxyXG5jb25zdCBtYXBWZXJ0aWNlcyA9IChzcmMsIGRzdCk9PiB7XHJcbiAgY29uc3QgbWFwID0gW107XHJcbiAgY29uc3QgZXEgPSAoYSwgYik9PiBNYXRoLmFicyhhLngtYi54KStNYXRoLmFicyhhLnktYi55KStNYXRoLmFicyhhLnotYi56KTwxZS00O1xyXG4gIGZvcihsZXQgaT0wOyBpPHNyYy5sZW5ndGg7ICsraSkge1xyXG4gICAgZm9yKGxldCBqPTA7IGo8ZHN0Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIGlmKGVxKHNyY1tpXSwgZHN0W2pdKSkge1xyXG4gICAgICAgIG1hcFtpXT1qO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtYXA7XHJcbn07XHJcblxyXG5jb25zdCBmcm9udE1hcCA9IG1hcFZlcnRpY2VzKGZyb250R2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LnZlcnRpY2VzKTtcclxuY29uc3QgYmFja01hcCA9IG1hcFZlcnRpY2VzKGJhY2tHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5jb25zdCBsZWZ0TWFwID0gbWFwVmVydGljZXMobGVmdEdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcbmNvbnN0IHJpZ2h0TWFwID0gbWFwVmVydGljZXMocmlnaHRHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5cclxuYWRkRmFjZXModG9wR2VvbWV0cnkuZmFjZXMsIChpKT0+IGkrYm90dG9tR2VvbWV0cnkudmVydGljZXMubGVuZ3RoKTtcclxuYWRkRmFjZXMoYm90dG9tR2VvbWV0cnkuZmFjZXMsIChpKT0+IGkpO1xyXG5hZGRGYWNlcyhmcm9udEdlb21ldHJ5LmZhY2VzLCAoaSk9PiBmcm9udE1hcFtpXSk7XHJcbmFkZEZhY2VzKGJhY2tHZW9tZXRyeS5mYWNlcywgKGkpPT4gYmFja01hcFtpXSk7XHJcbmFkZEZhY2VzKGxlZnRHZW9tZXRyeS5mYWNlcywgKGkpPT4gbGVmdE1hcFtpXSk7XHJcbmFkZEZhY2VzKHJpZ2h0R2VvbWV0cnkuZmFjZXMsIChpKT0+IHJpZ2h0TWFwW2ldKTtcclxuZmFjZXMucG9wKCk7XHJcblxyXG5UaHJlZVV0aWxzLmNvbXB1dGVGYWNlVmVydGV4VXZzKGdlb21ldHJ5LCBmYWNlcyk7XHJcblxyXG5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4vL2dlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xyXG5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuLy9nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRyZXNYLFxyXG5cdHJlc1ksXHJcblx0cmVzWixcclxuXHRmYWNlcyxcclxuXHRnZW9tZXRyeVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9tb2RlbHMvc2hlZXRCbG9jay5qcyIsImNvbnN0IG1vdXNlQnV0dG9ucyA9IHtcclxuICBMZWZ0OiAwLFxyXG4gIE1pZGRsZTogMSxcclxuICBSaWdodDogMlxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBlcHM6IDFlLTQsXHJcbiAgICBzY2FsZToge1xyXG4gICAgICBkZWZhdWx0OiAwLjksXHJcbiAgICAgIG1pbjogMC45LFxyXG4gICAgICBtYXg6IDIsXHJcbiAgICAgIGxldmVsczogNVxyXG4gICAgfSxcclxuICAgIHBhbjoge1xyXG4gICAgICBzcGVlZDogNTBcclxuICAgIH0sXHJcbiAgICBsb2FkaW5nQW5pbWF0aW9uOiB7XHJcbiAgICAgIHNraW46IHRydWUsXHJcbiAgICAgIGJvb2s6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYXV0b1Jlc29sdXRpb246IHtcclxuICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgY29lZmZpY2llbnQ6IDEuNSxcclxuICAgICAgbWluOiA4MDAsXHJcbiAgICAgIG1heDogMTkyMFxyXG4gICAgfSxcclxuICAgIG5hcnJvd1ZpZXc6IHtcclxuICAgICAgd2lkdGg6IDUwMFxyXG4gICAgfSxcclxuICAgIGFjdGlvbnM6IHtcclxuICAgICAgY21kWm9vbUluOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kWm9vbU91dDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZERlZmF1bHRab29tOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICB0eXBlOiAnZGJsY2xpY2snLFxyXG4gICAgICAgIGNvZGU6IDBcclxuICAgICAgfSxcclxuICAgICAgY21kVG9jOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBkZWZhdWx0VGFiOiAnYm9va21hcmtzJ1xyXG4gICAgICB9LFxyXG4gICAgICBjbWRBdXRvUGxheToge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICBjb2RlOiAzN1xyXG4gICAgICB9LFxyXG4gICAgICBjbWRCaWdCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZvcndhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgY29kZTogMzlcclxuICAgICAgfSxcclxuICAgICAgY21kQmlnRm9yd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNhdmU6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQcmludDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZ1bGxTY3JlZW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICB3aWRTZXR0aW5nczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZFRvb2xiYXI6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTbWFydFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTaW5nbGVQYWdlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVGb3JNb2JpbGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kU291bmRzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFN0YXRzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEdvdG9GaXJzdFBhZ2U6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRHb3RvTGFzdFBhZ2U6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTaGFyZToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhbkxlZnQ6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5SaWdodDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblVwOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuRG93bjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kUm90YXRlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbW91c2VkcmFnJyxcclxuICAgICAgICBjb2RlOiBtb3VzZUJ1dHRvbnMuUmlnaHRcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWREcmFnWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLk1pZGRsZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLkxlZnRcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRXaGVlbFpvb206IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICdtb3VzZXdoZWVsJyxcclxuICAgICAgICBjb2RlOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kUm90YXRlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAzXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogMlxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogMVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFN3aXBlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAxXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9wcm9wcy9ib29rQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxhbmtJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkuXHJcbiAgICAgIHRoZW4oKCk9PiB7XHJcbiAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0JsYW5rSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va21hcmtzIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBpdGVtcywgZ2V0VGl0bGU9KGkpPT4gaS50aXRsZSwgZ2V0SXRlbXM9KGkpPT5pLml0ZW1zKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMubWFwID0gW107XHJcbiAgICB0aGlzLmdldFRpdGxlID0gZ2V0VGl0bGU7XHJcbiAgICB0aGlzLmdldEl0ZW1zID0gZ2V0SXRlbXM7XHJcbiAgICB0aGlzLm5vZGVzID0gdGhpcy5tYXBOb2RlcyhpdGVtcywgdGhpcy5tYXApO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHRvZ2xlOiAoZSk9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGxldCBsaSA9ICQoZS50YXJnZXQpO1xyXG4gICAgICAgIHdoaWxlKGxpWzBdICYmIGxpWzBdIT09Y29udGFpbmVyWzBdICYmICFsaS5oYXNDbGFzcygnaXRlbScpKSB7XHJcbiAgICAgICAgICBsaSA9ICQobGlbMF0ucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGxpLmhhc0NsYXNzKCdpdGVtJykpIHtcclxuICAgICAgICAgIGxldCBjbWQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgICAgIHdoaWxlKGNtZFswXSAmJiBjbWRbMF0hPT1saVswXSAmJiAhY21kLmhhc0NsYXNzKCdjbWQnKSkge1xyXG4gICAgICAgICAgICBjbWQgPSAkKGNtZFswXS5wYXJlbnROb2RlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKGNtZC5oYXNDbGFzcygnY21kJykpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMubWFwW2xpLmF0dHIoJ2RhdGEtaWQnKV07XHJcbiAgICAgICAgICAgIGlmKGNtZC5oYXNDbGFzcygndG9nbGUnKSkge1xyXG4gICAgICAgICAgICAgIG5vZGUubWluaW1pemVkID0gIW5vZGUubWluaW1pemVkO1xyXG4gICAgICAgICAgICAgIGlmKG5vZGUubWluaW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBsaS5maW5kKCd1bCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgbGkuZmluZCgnLnRvZ2xlJykuYWRkQ2xhc3MoJ21pbmltaXplZCcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxpLmZpbmQoJy50b2dsZScpLnJlbW92ZUNsYXNzKCdtaW5pbWl6ZWQnKTtcclxuICAgICAgICAgICAgICAgIGxpLmFwcGVuZCgodGhpcy5yZW5kZXJOb2RlKG5vZGUpLm1hdGNoKC88dWwoLnxcXG4pKjxcXC91bD4vZykgfHwgWycnXSlbMF0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLml0ZW0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xpY2snLCB0aGlzLmJpbmRzLnRvZ2xlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubWFwLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy50b2dsZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMuY29udGFpbmVyLmh0bWwodGhpcy5yZW5kZXJOb2Rlcyh0aGlzLm5vZGVzKSk7XHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGYsIG5vZGVzPXRoaXMubm9kZXMpIHtcclxuICAgIGZvcihsZXQgbm9kZSBvZiAobm9kZXMgfHwgW10pKSB7XHJcbiAgICAgIGYobm9kZSk7XHJcbiAgICAgIHRoaXMuZm9yRWFjaChmLCBub2RlLmNoaWxkcmVuKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4cGFuZCgpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgobik9PiBuLm1pbmltaXplZCA9IGZhbHNlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBtaW5pbWl6ZSgpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgobik9PiBuLm1pbmltaXplZCA9IHRydWUpO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck5vZGUobm9kZSkge1xyXG4gICAgcmV0dXJuIFsnPGRpdiBjbGFzcz1cImFyZWFcIj4nLFxyXG4gICAgICBub2RlLmNoaWxkcmVuPyAnPGEgY2xhc3M9XCJjbWQgdG9nbGUnICsgKG5vZGUubWluaW1pemVkPyAnIG1pbmltaXplZCc6ICcnKSArICdcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLXJpZ2h0XCI+PC9pPjwvYT4gJzogJzxpIGNsYXNzPVwid2hpdGUtc3BhY2VcIj48L2k+ICcsXHJcbiAgICAgICc8YSBjbGFzcz1cImNtZFwiIHRpdGxlPVwiJywgbm9kZS50aXRsZSwnXCI+Jywgbm9kZS50aXRsZSwgJzwvYT48L2Rpdj4nLFxyXG4gICAgICBub2RlLm1pbmltaXplZD8gJyc6IHRoaXMucmVuZGVyTm9kZXMobm9kZS5jaGlsZHJlbilcclxuICAgIF0uam9pbignJyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb2Rlcyhub2Rlcykge1xyXG4gICAgbGV0IHJlcyA9IFsnPGRpdiBjbGFzcz1cImJvb2ttYXJrc1wiPiddO1xyXG4gICAgaWYobm9kZXMgJiYgbm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJlcy5wdXNoKCc8dWwgY2xhc3M9XCJsZXZlbC0nLCBub2Rlc1swXS5sZXZlbCwgJ1wiPicpO1xyXG4gICAgICBmb3IobGV0IG5vZGUgb2Ygbm9kZXMpIHtcclxuICAgICAgICByZXMucHVzaChbXHJcbiAgICAgICAgICAnPGxpIGNsYXNzPVwiaXRlbVwiIGRhdGEtaWQ9XCInLCBub2RlLmlkLCdcIj4nLFxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlck5vZGUobm9kZSksXHJcbiAgICAgICAgICAnPC9saT4nXS5qb2luKCcnKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnB1c2goJzwvdWw+Jyk7XHJcbiAgICB9XHJcbiAgICByZXMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICByZXR1cm4gcmVzLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgbWFwTm9kZXMoaXRlbXMsIG1hcD1bXSwgbGV2ZWw9MCkge1xyXG4gICAgbGV0IG5vZGVzID0gbnVsbDtcclxuICAgIGlmKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICBub2Rlcz1bXTtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBtYXAubGVuZ3RoO1xyXG4gICAgICAgIG1hcC5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IHtcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgdGl0bGU6IHRoaXMuZ2V0VGl0bGUoaXRlbSksXHJcbiAgICAgICAgICBsZXZlbCxcclxuICAgICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICBtaW5pbWl6ZWQ6IHRydWUsXHJcbiAgICAgICAgICBjaGlsZHJlbjogdGhpcy5tYXBOb2Rlcyh0aGlzLmdldEl0ZW1zKGl0ZW0pLCBtYXAsIGxldmVsKzEpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIG1hcFtpZF0gPSBub2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Cb29rbWFya3MuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV0ZWN0b3Ige1xyXG5cclxuXHRzdGF0aWMgY2FudmFzID0gISEgd2luZG93LkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcblx0c3RhdGljIHdlYmdsID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblx0XHRcdHJldHVybiAhISAod2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCAmJiAoY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpKSk7XHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fSkoKTtcclxuXHJcblx0c3RhdGljIHdvcmtlcnMgPSAhISB3aW5kb3cuV29ya2VyO1xyXG5cclxuXHRzdGF0aWMgZmlsZWFwaSA9IHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5GaWxlTGlzdCAmJiB3aW5kb3cuQmxvYjtcclxuXHJcblx0c3RhdGljIGdldFdlYkdMRXJyb3JNZXNzYWdlKCkge1xyXG5cdFx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0ZWxlbWVudC5pZCA9ICd3ZWJnbC1lcnJvci1tZXNzYWdlJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdtb25vc3BhY2UnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9ICcjZmZmJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuY29sb3IgPSAnIzAwMCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMS41ZW0nO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS53aWR0aCA9ICc0MDBweCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLm1hcmdpbiA9ICc1ZW0gYXV0byAwJztcclxuXHJcblx0XHRpZiAoIURldGVjdG9yLndlYmdsKSB7XHJcblx0XHRcdGVsZW1lbnQuaW5uZXJIVE1MID0gd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCA/IFtcclxuXHRcdFx0XHQnWW91ciBncmFwaGljcyBjYXJkIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+LjxiciAvPicsXHJcblx0XHRcdFx0J0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMFwiPmhlcmU8L2E+LidcclxuXHRcdFx0XS5qb2luKCdcXG4nKSA6IFtcclxuXHRcdFx0XHQnWW91ciBicm93c2VyIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+Ljxici8+JyxcclxuXHRcdFx0XHQnRmluZCBvdXQgaG93IHRvIGdldCBpdCA8YSBocmVmPVwiaHR0cDovL2dldC53ZWJnbC5vcmcvXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+aGVyZTwvYT4uJ1xyXG5cdFx0XHRdLmpvaW4oJ1xcbicpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGVsZW1lbnQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkR2V0V2ViR0xNZXNzYWdlKHBhcmFtZXRlcnMpIHtcclxuXHRcdGxldCBwYXJlbnQsIGlkLCBlbGVtZW50O1xyXG5cdFx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XHJcblxyXG5cdFx0cGFyZW50ID0gcGFyYW1ldGVycy5wYXJlbnQgfHwgJChkb2N1bWVudC5ib2R5KTtcclxuXHRcdGlkID0gcGFyYW1ldGVycy5pZCB8fCAnb2xkaWUnO1xyXG5cclxuXHRcdGVsZW1lbnQgPSBEZXRlY3Rvci5nZXRXZWJHTEVycm9yTWVzc2FnZSgpO1xyXG5cdFx0Ly9lbGVtZW50LmlkID0gaWQ7XHJcblxyXG5cdFx0cGFyZW50LmFwcGVuZChlbGVtZW50KTtcclxuXHR9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RldGVjdG9yLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jTW91c2VTaW11bGF0b3Ige1xyXG5cclxuICBzdGF0aWMgSE9WRVIgPSAnU0lNVUxBVEVELUhPVkVSJztcclxuICBzdGF0aWMgQUNUSVZFID0gJ1NJTVVMQVRFRC1BQ1RJVkUnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihqRnJhbWUsIGVsZW1lbnQsIGJFbGVtZW50PWRvY3VtZW50LmJvZHkpIHtcclxuICAgIHRoaXMuakZyYW1lID0gakZyYW1lO1xyXG4gICAgdGhpcy53bmQgPSBqRnJhbWVbMF0uY29udGVudFdpbmRvdztcclxuICAgIHRoaXMuZG9jID0gakZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jLmJvZHk7XHJcbiAgICB0aGlzLmJFbGVtZW50ID0gYkVsZW1lbnQ7XHJcbiAgICB0aGlzLnJlc2VuZFByb3BlcnRpZXMgPSB0aGlzLmdldERlZmF1bHRSZXNlbmRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLnVuZGVmaW5lZFByb3BlcnRpZXMgPSB0aGlzLmdldERlZmF1bHRVbmRlZmluZWRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLmN1cnNvcnMgPSBbXTtcclxuICAgIHRoaXMub25Eb2NDaGFuZ2VDbGJzID0gW107XHJcbiAgICBjb25zdCB0ZXJtcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmaW5kOiAnOmhvdmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6ICcuJytEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmluZDogJzphY3RpdmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogJy4nK0RvY01vdXNlU2ltdWxhdG9yLkFDVElWRVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgXTtcclxuICAgIGxldCBzdHlsZSA9IFsnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiddO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRvYy5zdHlsZVNoZWV0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBsZXQgc3MgPSB0aGlzLmRvYy5zdHlsZVNoZWV0c1tpXTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcy5jc3NSdWxlcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGxldCByID0gc3MuY3NzUnVsZXNbal0sIGNzc1RleHQ7XHJcbiAgICAgICAgZm9yKGxldCB0ZXJtIG9mIHRlcm1zKSB7XHJcbiAgICAgICAgICBpZiAofnIuc2VsZWN0b3JUZXh0LmluZGV4T2YodGVybS5maW5kKSkge1xyXG4gICAgICAgICAgICBjc3NUZXh0ID0gKGNzc1RleHQgfHwgci5jc3NUZXh0KS5yZXBsYWNlKG5ldyBSZWdFeHAodGVybS5maW5kLCAnZycpLCB0ZXJtLnJlcGxhY2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjc3NUZXh0KSB7XHJcbiAgICAgICAgICBzdHlsZS5wdXNoKGNzc1RleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3R5bGUucHVzaCgnPC9zdHlsZT4nKTtcclxuICAgICQodGhpcy5kb2MuaGVhZCkuYXBwZW5kKCQoc3R5bGUuam9pbignJykpKTtcclxuICB9XHJcblxyXG4gIGNvbnZlcnRDb29yZHMoeCwgeSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IG9mZnNldC5sZWZ0K2pFbGVtZW50LndpZHRoKCkqeCxcclxuICAgICAgeTogb2Zmc2V0LnRvcCtqRWxlbWVudC5oZWlnaHQoKSooMS15KVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCB0eXBlLCBhZHZhbmNlZFByb3BzKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xyXG4gICAgZm9yKGxldCBuIG9mIHRoaXMucmVzZW5kUHJvcGVydGllcykge1xyXG4gICAgICBwcm9wc1tuXSA9IGVbbl07XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG4gb2YgdGhpcy51bmRlZmluZWRQcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHByb3BzW25dID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBuIGluIGFkdmFuY2VkUHJvcHMpIHtcclxuICAgICAgaWYoYWR2YW5jZWRQcm9wcy5oYXNPd25Qcm9wZXJ0eShuKSkge1xyXG4gICAgICAgIHByb3BzW25dID0gYWR2YW5jZWRQcm9wc1tuXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJvcHMudmlldyA9IHRoaXMud25kO1xyXG4gICAgcHJvcHMucGFnZVggPSBwLng7XHJcbiAgICBwcm9wcy5wYWdlWSA9IHAueTtcclxuICAgIGNvbnN0IGpFID0gJC5FdmVudCh0eXBlLCBwcm9wcyk7XHJcbiAgICBqRS50aW1lU3RhbXAgPSBlLnRpbWVTdGFtcDtcclxuICAgICQoZWxlbWVudCkudHJpZ2dlcihqRSk7XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzcyhlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAkKGVsZW1lbnQpLmFkZENsYXNzKG5hbWUpO1xyXG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnduZC5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gICAgdGhpcy5jdXJzb3JzLnB1c2goJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicpKTtcclxuICAgICQodGhpcy5iRWxlbWVudCkuY3NzKCdjdXJzb3InLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjdXJzb3InKSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDbGFzcyhlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKG5hbWUpO1xyXG4gICAgJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicsIHRoaXMuY3Vyc29ycy5wb3AoKSk7XHJcbiAgfVxyXG5cclxuICBlbnRlckVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5hZGRDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUik7XHJcbiAgfVxyXG5cclxuICBsZWF2ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUik7XHJcbiAgfVxyXG5cclxuICBhY3RpdmF0ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5hZGRDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgZGVhY3RpdmF0ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgYWRkRG9jQ2hhbmdlQ2xiKGNsYikge1xyXG4gICAgdGhpcy5vbkRvY0NoYW5nZUNsYnMucHVzaChjbGIpO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5KCkge1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5vbkRvY0NoYW5nZUNsYnMpIHtcclxuICAgICAgY2xiKHRoaXMud25kLCB0aGlzLmRvYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbGVtZW50RnJvbVBvaW50KHApIHtcclxuICAgIGxldCBub2RlID0gdGhpcy5kb2MuYm9keSwgbmV4dCA9IHRydWU7XHJcbiAgICB3aGlsZShuZXh0KSB7XHJcbiAgICAgIG5leHQgPSBmYWxzZTtcclxuICAgICAgZm9yKGxldCBpPTA7IGk8bm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgaWYoY2hpbGQgaW5zdGFuY2VvZiB0aGlzLnduZC5FbGVtZW50KSB7XHJcbiAgICAgICAgICBjb25zdCBqQyA9ICQoY2hpbGQpLCBvZmZzZXQgPSBqQy5vZmZzZXQoKSwgaGVpZ2h0ID0gakMuaGVpZ2h0KCksIHdpZHRoID0gakMud2lkdGgoKTtcclxuICAgICAgICAgIGlmKHAueD5vZmZzZXQubGVmdCAmJiBwLng8b2Zmc2V0LmxlZnQrd2lkdGggJiYgcC55Pm9mZnNldC50b3AgJiYgcC55PG9mZnNldC50b3AraGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgbmV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBnZXRFbGVtZW50KHApIHtcclxuICAgIGNvbnN0IG9mZjAgPSB0aGlzLmpGcmFtZS5vZmZzZXQoKTtcclxuICAgIHRoaXMuakZyYW1lLm9mZnNldCh7bGVmdDogMC41KndpbmRvdy5pbm5lcldpZHRoLXAueCwgdG9wOiAwLjUqd2luZG93LmlubmVySGVpZ2h0LXAueX0pO1xyXG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmRvYy5lbGVtZW50RnJvbVBvaW50KHAueCwgcC55KTtcclxuICAgIGlmKCFlbGVtZW50KSB7IC8vIGl0IGlzbid0IGEgam9rZSBpdCdzIElFXHJcbiAgICAgIGVsZW1lbnQgPSB0aGlzLmRvYy5lbGVtZW50RnJvbVBvaW50KHAueCwgcC55KTtcclxuICAgIH1cclxuICAgIHRoaXMuakZyYW1lLm9mZnNldChvZmYwKTtcclxuICAgIHJldHVybiBlbGVtZW50PyBlbGVtZW50OiB0aGlzLmVsZW1lbnRGcm9tUG9pbnQocCk7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShlLCBkb2MsIHgsIHkpIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLmNvbnZlcnRDb29yZHMoeCwgeSksXHJcbiAgICAgICAgICBlbGVtZW50ID0gZG9jPT09dGhpcy5kb2M/IHRoaXMuZ2V0RWxlbWVudChwKTogdW5kZWZpbmVkO1xyXG4gICAgbGV0IHRyaWdnZXIgPSBlbGVtZW50ICE9PSB1bmRlZmluZWQsIG5vdGlmeSA9IGZhbHNlO1xyXG5cclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2Vkb3duJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXBFbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICBpZih0aGlzLmNhcEVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuYWN0aXZhdGVFbGVtZW50KHRoaXMuY2FwRWxlbWVudCk7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZXVwJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aW1lU3RhbXAgPSBlLnRpbWVTdGFtcDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdjbGljayc6IHtcclxuICAgICAgICB0cmlnZ2VyID0gZWxlbWVudCAmJiB0aGlzLmNhcEVsZW1lbnQgPT09IGVsZW1lbnQ7Ly8gJiYgZS50aW1lU3RhbXAgPT09IHRoaXMudGltZVN0YW1wO1xyXG4gICAgICAgIHRoaXMuY2FwRWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWVudGVyJzpcclxuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcclxuICAgICAgY2FzZSAnbW91c2Vtb3ZlJzoge1xyXG4gICAgICAgIGxldCBsZWF2ZWQgPSBudWxsO1xyXG4gICAgICAgIGlmKHRoaXMuaG92RWxlbWVudCAhPT0gZWxlbWVudCAmJiB0aGlzLmhvdkVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHRoaXMuaG92RWxlbWVudCwgZSwgcCwgJ21vdXNlb3V0Jywge3JlbGF0ZWRUYXJnZXQ6IGVsZW1lbnQ/IGVsZW1lbnQ6IG51bGx9KTtcclxuICAgICAgICAgIHRoaXMubGVhdmVFbGVtZW50KHRoaXMuaG92RWxlbWVudCk7XHJcbiAgICAgICAgICBsZWF2ZWQgPSB0aGlzLmhvdkVsZW1lbnQ7XHJcbiAgICAgICAgICB0aGlzLmhvdkVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy5ob3ZFbGVtZW50ICYmIGVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KGVsZW1lbnQsIGUsIHAsICdtb3VzZW92ZXInLCB7cmVsYXRlZFRhcmdldDogbGVhdmVkfSk7XHJcbiAgICAgICAgICB0aGlzLmVudGVyRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmlnZ2VyID0gZWxlbWVudCAmJiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlbGVhdmUnOlxyXG4gICAgICBjYXNlICdtb3VzZW91dCc6IHtcclxuICAgICAgICBpZih0aGlzLmhvdkVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHRoaXMuaG92RWxlbWVudCwgZSwgcCwgJ21vdXNlb3V0Jywge3JlbGF0ZWRUYXJnZXQ6IGUucmVsYXRlZFRhcmdldH0pO1xyXG4gICAgICAgICAgdGhpcy5sZWF2ZUVsZW1lbnQodGhpcy5ob3ZFbGVtZW50KTtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyaWdnZXIgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLnRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCBlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaWYobm90aWZ5KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXREZWZhdWx0VW5kZWZpbmVkUHJvcGVydGllcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdjbGllbnRYJyxcclxuICAgICAgJ2NsaWVudFknLFxyXG4gICAgICAnb2Zmc2V0WCcsXHJcbiAgICAgICdvZmZzZXRZJyxcclxuICAgICAgJ3NjcmVlblgnLFxyXG4gICAgICAnc2NyZWVuWSdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXREZWZhdWx0UmVzZW5kUHJvcGVydGllcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdhbHRLZXknLFxyXG4gICAgICAnYnViYmxlcycsXHJcbiAgICAgICdidXR0b24nLFxyXG4gICAgICAnYnV0dG9ucycsXHJcbiAgICAgICdjYW5jZWxhYmxlJyxcclxuICAgICAgJ2NoYW5nZWRUb3VjaGVzJyxcclxuICAgICAgJ2NoYXInLFxyXG4gICAgICAnY2hhckNvZGUnLFxyXG4gICAgICAnY3RybEtleScsXHJcbiAgICAgICdkYXRhJyxcclxuICAgICAgJ2RldGFpbCcsXHJcbiAgICAgICdldmVudFBoYXNlJyxcclxuICAgICAgJ2lzRGVmYXVsdFByZXZlbnRlZCcsXHJcbiAgICAgICdrZXknLFxyXG4gICAgICAna2V5Q29kZScsXHJcbiAgICAgICdtZXRhS2V5JyxcclxuICAgICAgJ3BvaW50ZXJJZCcsXHJcbiAgICAgICdwb2ludGVyVHlwZScsXHJcbiAgICAgICdzaGlmdEtleScsXHJcbiAgICAgICd0YXJnZXRUb3VjaGVzJyxcclxuICAgICAgJ3RvdWNoZXMnLFxyXG4gICAgICAnd2hpY2gnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qXHJcbmFsdEtleSxcclxuYnViYmxlcyxcclxuYnV0dG9uLFxyXG5idXR0b25zLFxyXG5jYW5jZWxhYmxlLFxyXG5jaGFuZ2VkVG91Y2hlcyxcclxuY2hhcixcclxuY2hhckNvZGUsXHJcbmNsaWVudFgsXHJcbmNsaWVudFksXHJcbmN0cmxLZXksXHJcbmN1cnJlbnRUYXJnZXQsXHJcbmRhdGEsXHJcbmRlbGVnYXRlVGFyZ2V0LFxyXG5kZXRhaWwsXHJcbmV2ZW50UGhhc2UsXHJcbmhhbmRsZU9iaixcclxuaXNEZWZhdWx0UHJldmVudGVkLFxyXG5rZXksXHJcbmtleUNvZGUsXHJcbm1ldGFLZXksXHJcbm9mZnNldFgsXHJcbm9mZnNldFksXHJcbm9yaWdpbmFsRXZlbnQsXHJcbnBhZ2VYLFxyXG5wYWdlWSxcclxucG9pbnRlcklkLFxyXG5wb2ludGVyVHlwZSxcclxucmVsYXRlZFRhcmdldCxcclxuc2NyZWVuWCxcclxuc2NyZWVuWSxcclxuc2hpZnRLZXksXHJcbnRhcmdldCxcclxudGFyZ2V0VG91Y2hlcyxcclxudGltZVN0YW1wLFxyXG50b0VsZW1lbnQsXHJcbnRvdWNoZXMsXHJcbnR5cGUsXHJcbnZpZXcsXHJcbndoaWNoXHJcbiovXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RvY01vdXNlU2ltdWxhdG9yLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9tMkltYWdlIHtcblxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgY2FjaGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLndpbmRvdyA9IHduZDtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jO1xuICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcblxuICAgIGNvbnN0IHV0aWwgPSBuZXdVdGlsKCk7XG4gICAgY29uc3QgaW5saW5lciA9IG5ld0lubGluZXIoKTtcbiAgICBjb25zdCBmb250RmFjZXMgPSBuZXdGb250RmFjZXMoKTtcbiAgICBjb25zdCBpbWFnZXMgPSBuZXdJbWFnZXMoKTtcblxuICAgIHRoaXMudG9TdmcgPSB0b1N2ZztcbiAgICB0aGlzLnRvUG5nID0gdG9Qbmc7XG4gICAgdGhpcy50b0pwZWcgPSB0b0pwZWc7XG4gICAgdGhpcy50b0Jsb2IgPSB0b0Jsb2I7XG4gICAgdGhpcy50b1BpeGVsRGF0YSA9IHRvUGl4ZWxEYXRhO1xuICAgIHRoaXMuaW1wbCA9IHtcbiAgICAgICAgICAgICAgICAgIGZvbnRGYWNlczogZm9udEZhY2VzLFxuICAgICAgICAgICAgICAgICAgaW1hZ2VzOiBpbWFnZXMsXG4gICAgICAgICAgICAgICAgICB1dGlsOiB1dGlsLFxuICAgICAgICAgICAgICAgICAgaW5saW5lcjogaW5saW5lclxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmZpbHRlciAtIFNob3VsZCByZXR1cm4gdHJ1ZSBpZiBwYXNzZWQgbm9kZSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIG91dHB1dFxuICAgICAqICAgICAgICAgIChleGNsdWRpbmcgbm9kZSBtZWFucyBleGNsdWRpbmcgaXQncyBjaGlsZHJlbiBhcyB3ZWxsKS4gTm90IGNhbGxlZCBvbiB0aGUgcm9vdCBub2RlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmJnY29sb3IgLSBjb2xvciBmb3IgdGhlIGJhY2tncm91bmQsIGFueSB2YWxpZCBDU1MgY29sb3IgdmFsdWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMud2lkdGggLSB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIG5vZGUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWlnaHQgLSBoZWlnaHQgdG8gYmUgYXBwbGllZCB0byBub2RlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuc3R5bGUgLSBhbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyB0byBiZSBjb3BpZWQgdG8gbm9kZSdzIHN0eWxlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucXVhbGl0eSAtIGEgTnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHkgKGFwcGxpY2FibGUgdG8gSlBFRyBvbmx5KSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0cyB0byAxLjAuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFNWRyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG5cbiAgICBmdW5jdGlvbiB0b1N2Zyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU5vZGUobm9kZSwgb3B0aW9ucy5maWx0ZXIsIHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGVtYmVkRm9udHMpXG4gICAgICAgICAgICAudGhlbihpbmxpbmVJbWFnZXMpXG4gICAgICAgICAgICAudGhlbihhcHBseU9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVN2Z0RhdGFVcmkoY2xvbmUsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oZWlnaHQgfHwgdXRpbC5oZWlnaHQobm9kZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlPcHRpb25zKGNsb25lKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5iZ2NvbG9yKSBjbG9uZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJnY29sb3I7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpZHRoKSBjbG9uZS5zdHlsZS53aWR0aCA9IG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0KSBjbG9uZS5zdHlsZS5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCArICdweCc7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0eWxlKVxuICAgICAgICAgICAgICAgIHNlbGYud2luZG93Lk9iamVjdC5rZXlzKG9wdGlvbnMuc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlW3Byb3BlcnR5XSA9IG9wdGlvbnMuc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBVaW50OEFycmF5IGNvbnRhaW5pbmcgUkdCQSBwaXhlbCBkYXRhLlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9QaXhlbERhdGEobm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5nZXRJbWFnZURhdGEoXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHV0aWwud2lkdGgobm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuaGVpZ2h0KG5vZGUpXG4gICAgICAgICAgICAgICAgKS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgUE5HIGltYWdlIGRhdGEgVVJMXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b1BuZyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIEpQRUcgaW1hZ2UgZGF0YSBVUkxcbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvSnBlZyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgb3B0aW9ucy5xdWFsaXR5IHx8IDEuMCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBQTkcgaW1hZ2UgYmxvYlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9CbG9iKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucyB8fCB7fSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuY2FudmFzVG9CbG9iKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3KGRvbU5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRvU3ZnKGRvbU5vZGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih1dGlsLm1ha2VJbWFnZSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZGVsYXkoMTAwKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IG5ld0NhbnZhcyhkb21Ob2RlKTtcbiAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBuZXdDYW52YXMoZG9tTm9kZSkge1xuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChkb21Ob2RlKTtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB1dGlsLmhlaWdodChkb21Ob2RlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYmdjb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJnY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgZmlsdGVyLCByb290KSB7XG4gICAgICAgIGlmICghcm9vdCAmJiBmaWx0ZXIgJiYgIWZpbHRlcihub2RlKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKG1ha2VOb2RlQ29weSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZUNoaWxkcmVuKG5vZGUsIGNsb25lLCBmaWx0ZXIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzQ2xvbmUobm9kZSwgY2xvbmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZU5vZGVDb3B5KG5vZGUpIHtcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQ2FudmFzKG5vZGUpKSByZXR1cm4gdXRpbC5tYWtlSW1hZ2Uobm9kZS50b0RhdGFVUkwoKSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbihvcmlnaW5hbCwgY2xvbmUsIGZpbHRlcikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBvcmlnaW5hbC5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjbG9uZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZUNoaWxkcmVuSW5PcmRlcihjbG9uZSwgdXRpbC5hc0FycmF5KGNoaWxkcmVuKSwgZmlsdGVyKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZUNoaWxkcmVuSW5PcmRlcihwYXJlbnQsIGNoaWxkcmVuLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lTm9kZShjaGlsZCwgZmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2hpbGRDbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZENsb25lKSBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGRDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NDbG9uZShvcmlnaW5hbCwgY2xvbmUpIHtcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0VsZW1lbnQoY2xvbmUpKSByZXR1cm4gY2xvbmU7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGNsb25lU3R5bGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2xvbmVQc2V1ZG9FbGVtZW50cylcbiAgICAgICAgICAgICAgICAudGhlbihjb3B5VXNlcklucHV0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZpeFN2ZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVTdHlsZSgpIHtcbiAgICAgICAgICAgICAgICBjb3B5U3R5bGUoc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvcmlnaW5hbCksIGNsb25lLnN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlTdHlsZShzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNzc1RleHQpIHRhcmdldC5jc3NUZXh0ID0gc291cmNlLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY29weVByb3BlcnRpZXMoc291cmNlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFzQXJyYXkoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNldFByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldFByb3BlcnR5UHJpb3JpdHkobmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lUHNldWRvRWxlbWVudHMoKSB7XG4gICAgICAgICAgICAgICAgWyc6YmVmb3JlJywgJzphZnRlciddLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVQc2V1ZG9FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVQc2V1ZG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzZWxmLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9yaWdpbmFsLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdXRpbC51aWQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuY2xhc3NOYW1lID0gY2xvbmUuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSBzZWxmLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUoY2xhc3NOYW1lLCBlbGVtZW50LCBzdHlsZSkpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFBzZXVkb0VsZW1lbnRTdHlsZShjbGFzc05hbWUsIGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9ICcuJyArIGNsYXNzTmFtZSArICc6JyArIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCA/IGZvcm1hdENzc1RleHQoc3R5bGUpIDogZm9ybWF0Q3NzUHJvcGVydGllcyhzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzZWxlY3RvciArICd7JyArIGNzc1RleHQgKyAnfScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRDc3NUZXh0KHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGUuY3NzVGV4dCArICcgY29udGVudDogJyArIGNvbnRlbnQgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdENzc1Byb3BlcnRpZXMoc3R5bGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmFzQXJyYXkoc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZm9ybWF0UHJvcGVydHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7ICcpICsgJzsnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZSArICc6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKSA/ICcgIWltcG9ydGFudCcgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb3B5VXNlcklucHV0KCkge1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzVGV4dEFyZWEob3JpZ2luYWwpKSBjbG9uZS5pbm5lckhUTUwgPSBvcmlnaW5hbC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0lucHV0KG9yaWdpbmFsKSkgY2xvbmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgb3JpZ2luYWwudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBmaXhTdmcoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzU1ZHKGNsb25lKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1NWR1JlY3QoY2xvbmUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgWyd3aWR0aCcsICdoZWlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjbG9uZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlLnNldFByb3BlcnR5KGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1iZWRGb250cyhub2RlKSB7XG4gICAgICAgIHJldHVybiBmb250RmFjZXMucmVzb2x2ZUFsbCgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlTm9kZSA9IHNlbGYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHN0eWxlTm9kZSk7XG4gICAgICAgICAgICAgICAgc3R5bGVOb2RlLmFwcGVuZENoaWxkKHNlbGYuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzVGV4dCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5saW5lSW1hZ2VzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGltYWdlcy5pbmxpbmVBbGwobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VTdmdEYXRhVXJpKG5vZGUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc2VsZi53aW5kb3cuWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKG5vZGUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZXNjYXBlWGh0bWwpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoeGh0bWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwnLFxuICAgICAgICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIicsIHdpZHRoLCAnXCIgaGVpZ2h0PVwiJywgaGVpZ2h0LCAnXCI+JyxcbiAgICAgICAgICAgICAgICAgICc8Zm9yZWlnbk9iamVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiPicsIHhodG1sLCAnPC9mb3JlaWduT2JqZWN0PicsXG4gICAgICAgICAgICAgICAgJzwvc3ZnPiddLmpvaW4oJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3VXRpbCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVzY2FwZTogZXNjYXBlLFxuICAgICAgICAgICAgcGFyc2VFeHRlbnNpb246IHBhcnNlRXh0ZW5zaW9uLFxuICAgICAgICAgICAgbWltZVR5cGU6IG1pbWVUeXBlLFxuICAgICAgICAgICAgZGF0YUFzVXJsOiBkYXRhQXNVcmwsXG4gICAgICAgICAgICBpc0RhdGFVcmw6IGlzRGF0YVVybCxcbiAgICAgICAgICAgIGNhbnZhc1RvQmxvYjogY2FudmFzVG9CbG9iLFxuICAgICAgICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCxcbiAgICAgICAgICAgIGdldEFuZEVuY29kZTogZ2V0QW5kRW5jb2RlLFxuICAgICAgICAgICAgdWlkOiB1aWQoKSxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgICAgIGFzQXJyYXk6IGFzQXJyYXksXG4gICAgICAgICAgICBlc2NhcGVYaHRtbDogZXNjYXBlWGh0bWwsXG4gICAgICAgICAgICBtYWtlSW1hZ2U6IG1ha2VJbWFnZSxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuXG4gICAgICAgICAgICBpc0VsZW1lbnQsXG4gICAgICAgICAgICBpc0NhbnZhcyxcbiAgICAgICAgICAgIGlzVGV4dEFyZWEsXG4gICAgICAgICAgICBpc0lucHV0LFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBpc1NWR1JlY3QsXG4gICAgICAgICAgICBpc0ltYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gbWltZXMoKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogT25seSBXT0ZGIGFuZCBFT1QgbWltZSB0eXBlcyBmb3IgZm9udHMgYXJlICdyZWFsJ1xuICAgICAgICAgICAgICogc2VlIGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgV09GRiA9ICdhcHBsaWNhdGlvbi9mb250LXdvZmYnO1xuICAgICAgICAgICAgY29uc3QgSlBFRyA9ICdpbWFnZS9qcGVnJztcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAnd29mZic6IFdPRkYsXG4gICAgICAgICAgICAgICAgJ3dvZmYyJzogV09GRixcbiAgICAgICAgICAgICAgICAndHRmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtdHJ1ZXR5cGUnLFxuICAgICAgICAgICAgICAgICdlb3QnOiAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICAgICAgICAgICAgICAgICdwbmcnOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICAgICAnanBnJzogSlBFRyxcbiAgICAgICAgICAgICAgICAnanBlZyc6IEpQRUcsXG4gICAgICAgICAgICAgICAgJ2dpZic6ICdpbWFnZS9naWYnLFxuICAgICAgICAgICAgICAgICd0aWZmJzogJ2ltYWdlL3RpZmYnLFxuICAgICAgICAgICAgICAgICdzdmcnOiAnaW1hZ2Uvc3ZnK3htbCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXJzZUV4dGVuc2lvbih1cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL1xcLihbXlxcLlxcL10qPykkL2cuZXhlYyh1cmwpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbMV07XG4gICAgICAgICAgICBlbHNlIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1pbWVUeXBlKHVybCkge1xuICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gcGFyc2VFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1pbWVzKClbZXh0ZW5zaW9uXSB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGF0YVVybCh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmwuc2VhcmNoKC9eKGRhdGE6KS8pICE9PSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvQmxvYihjYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IHNlbGYud2luZG93LmF0b2IoY2FudmFzLnRvRGF0YVVSTCgpLnNwbGl0KCcsJylbMV0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluYXJ5QXJyYXkgPSBuZXcgc2VsZi53aW5kb3cuVWludDhBcnJheShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgYmluYXJ5QXJyYXlbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IHNlbGYud2luZG93LkJsb2IoW2JpbmFyeUFycmF5XSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UvcG5nJ1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FudmFzVG9CbG9iKGNhbnZhcykge1xuICAgICAgICAgICAgaWYgKGNhbnZhcy50b0Jsb2IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IocmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b0Jsb2IoY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVVcmwodXJsLCBiYXNlVXJsKSB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBzZWxmLmRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpO1xuICAgICAgICAgICAgY29uc3QgYmFzZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG4gICAgICAgICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZChiYXNlKTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBkb2MuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICBiYXNlLmhyZWYgPSBiYXNlVXJsO1xuICAgICAgICAgICAgYS5ocmVmID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIGEuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVpZCgpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1JyArIGZvdXJSYW5kb21DaGFycygpICsgaW5kZXgrKztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvdXJSYW5kb21DaGFycygpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzYyNDg3MjIvMjUxOTM3MyAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCcwMDAwJyArIChzZWxmLndpbmRvdy5NYXRoLnJhbmRvbSgpICogc2VsZi53aW5kb3cuTWF0aC5wb3coMzYsIDQpIDw8IDApLnRvU3RyaW5nKDM2KSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlSW1hZ2UodXJpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IHNlbGYud2luZG93LkltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRBbmRFbmNvZGUodXJsKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSBzZWxmLmNhY2hlLmdldCh1cmwpO1xuICAgICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgIGlmKGRhdGEuY29udGVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XG4gICAgICAgICAgICAgICAgaWYoZGF0YS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGF0YS5wZW5kaW5ncy5wdXNoKHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IHNlbGYuY2FjaGUucHV0KHVybCwge3BlbmRpbmdzOiBbXX0pO1xuXG4gICAgICAgICAgICBjb25zdCBUSU1FT1VUID0gMzAwMDA7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgc2VsZi53aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZG9uZTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC50aW1lb3V0ID0gVElNRU9VVDtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwoJ2Nhbm5vdCBmZXRjaCByZXNvdXJjZTogJyArIHVybCArICcsIHN0YXR1czogJyArIHJlcXVlc3Quc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgc2VsZi53aW5kb3cuRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IGVuY29kZXIucmVzdWx0LnNwbGl0KC8sLylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHJlc29sdmUgb2YgZGF0YS5wZW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBlbmRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZXIucmVhZEFzRGF0YVVSTChyZXF1ZXN0LnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aW1lb3V0KCkge1xuICAgICAgICAgICAgICAgICAgICBmYWlsKCd0aW1lb3V0IG9mICcgKyBUSU1FT1VUICsgJ21zIG9jY3VyZWQgd2hpbGUgZmV0Y2hpbmcgcmVzb3VyY2U6ICcgKyB1cmwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZhaWwobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkYXRhQXNVcmwoY29udGVudCwgdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIFsnZGF0YTonLHR5cGUsJztiYXNlNjQsJyxjb250ZW50XS5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/XiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWxheShtcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG1zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc0FycmF5KGFycmF5TGlrZSkge1xuICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlc2NhcGVYaHRtbChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKCN8XFxuKS9nLCAoYyk9PiBjPT09JyMnPyAnJTIzJzogJyUwQScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gd2lkdGgobm9kZSkge1xuICAgICAgICAgICAgY29uc3QgbGVmdEJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItbGVmdC13aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgcmlnaHRCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXJpZ2h0LXdpZHRoJyk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zY3JvbGxXaWR0aCArIGxlZnRCb3JkZXIgKyByaWdodEJvcmRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhlaWdodChub2RlKSB7XG4gICAgICAgICAgICBjb25zdCB0b3BCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXRvcC13aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgYm90dG9tQm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci1ib3R0b20td2lkdGgnKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNjcm9sbEhlaWdodCArIHRvcEJvcmRlciArIGJvdHRvbUJvcmRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHB4KG5vZGUsIHN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0NhbnZhcyhub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5IVE1MQ2FudmFzRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVGV4dEFyZWEobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzSW5wdXQobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU1ZHKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LlNWR0VsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1NWR1JlY3Qobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuU1ZHUmVjdEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0ltYWdlKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdJbmxpbmVyKCkge1xuICAgICAgICBjb25zdCBVUkxfUkVHRVggPSAvdXJsXFwoWydcIl0/KFteJ1wiXSs/KVsnXCJdP1xcKS9nO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmxpbmVBbGw6IGlubGluZUFsbCxcbiAgICAgICAgICAgIHNob3VsZFByb2Nlc3M6IHNob3VsZFByb2Nlc3MsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZFVybHM6IHJlYWRVcmxzLFxuICAgICAgICAgICAgICAgIGlubGluZTogaW5saW5lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvdWxkUHJvY2VzcyhzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuc2VhcmNoKFVSTF9SRUdFWCkgIT09IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZFVybHMoc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBVUkxfUkVHRVguZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hdGNoWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXV0aWwuaXNEYXRhVXJsKHVybCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVybClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlVXJsID8gdXRpbC5yZXNvbHZlVXJsKHVybCwgYmFzZVVybCkgOiB1cmw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuZGF0YUFzVXJsKGRhdGEsIHV0aWwubWltZVR5cGUodXJsKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodXJsQXNSZWdleCh1cmwpLCBbJyQxJywgZGF0YVVybCwgJyQzJ10uam9pbignJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cmxBc1JlZ2V4KHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc2VsZi53aW5kb3cuUmVnRXhwKFsnKHVybFxcXFwoW1xcJ1wiXT8pKCcsIHV0aWwuZXNjYXBlKHVybCksICcpKFtcXCdcIl0/XFxcXCkpJ10uam9pbignJyksICdnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmVBbGwoc3RyaW5nLCBiYXNlVXJsLCBnZXQpIHtcbiAgICAgICAgICAgIGlmIChub3RoaW5nVG9JbmxpbmUoKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0cmluZylcbiAgICAgICAgICAgICAgICAudGhlbihyZWFkVXJscylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJscykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB1cmxzLmZvckVhY2goZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IGRvbmUudGhlbihmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGhpbmdUb0lubGluZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXNob3VsZFByb2Nlc3Moc3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ZvbnRGYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc29sdmVBbGw6IHJlc29sdmVBbGwsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZEFsbDogcmVhZEFsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZEFsbChzZWxmLmRvY3VtZW50KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh3ZWJGb250cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWJGb250cy5tYXAoZnVuY3Rpb24gKHdlYkZvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2ViRm9udC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNzc1N0cmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzc1N0cmluZ3Muam9pbignXFxuJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkQWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1dGlsLmFzQXJyYXkoc2VsZi5kb2N1bWVudC5zdHlsZVNoZWV0cykpXG4gICAgICAgICAgICAgICAgLnRoZW4oZ2V0Q3NzUnVsZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oc2VsZWN0V2ViRm9udFJ1bGVzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZXMubWFwKG5ld1dlYkZvbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RXZWJGb250UnVsZXMoY3NzUnVsZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3NzUnVsZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGUudHlwZSA9PT0gQ1NTUnVsZS5GT05UX0ZBQ0VfUlVMRTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZXIuc2hvdWxkUHJvY2VzcyhydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENzc1J1bGVzKHN0eWxlU2hlZXRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3NzUnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdHlsZVNoZWV0cy5mb3JFYWNoKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KHNoZWV0LmNzc1J1bGVzIHx8IFtdKS5mb3JFYWNoKGNzc1J1bGVzLnB1c2guYmluZChjc3NSdWxlcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igd2hpbGUgcmVhZGluZyBDU1MgcnVsZXMgZnJvbSAnICsgc2hlZXQuaHJlZiwgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbmV3V2ViRm9udCh3ZWJGb250UnVsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gKHdlYkZvbnRSdWxlLnBhcmVudFN0eWxlU2hlZXQgfHwge30pLmhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lci5pbmxpbmVBbGwod2ViRm9udFJ1bGUuY3NzVGV4dCwgYmFzZVVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNyYzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYkZvbnRSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ltYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlubGluZUFsbDogaW5saW5lQWxsLFxuICAgICAgICAgICAgaW1wbDoge1xuICAgICAgICAgICAgICAgIG5ld0ltYWdlOiBuZXdJbWFnZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG5ld0ltYWdlKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5saW5lOiBpbmxpbmVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlubGluZShnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0RhdGFVcmwoZWxlbWVudC5zcmMpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVsZW1lbnQuc3JjKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5kYXRhQXNVcmwoZGF0YSwgdXRpbC5taW1lVHlwZShlbGVtZW50LnNyYykpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3JjID0gZGF0YVVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZUFsbChub2RlKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNFbGVtZW50KG5vZGUpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5saW5lQmFja2dyb3VuZChub2RlKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNJbWFnZShub2RlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdJbWFnZShub2RlKS5pbmxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuYXNBcnJheShub2RlLmNoaWxkTm9kZXMpLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZUFsbChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlubGluZUJhY2tncm91bmQobm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQnKTtcblxuICAgICAgICAgICAgICAgIGlmICghYmFja2dyb3VuZCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVyLmlubGluZUFsbChiYWNrZ3JvdW5kKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW5saW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2JhY2tncm91bmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Eb20ySW1hZ2UuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYWcge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgdmlzdWFsV29ybGQpIHtcclxuICAgIHRoaXMud25kID0gd25kO1xyXG4gICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbFdvcmxkO1xyXG4gICAgdGhpcy5jb29yZHMgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG4gICAgdGhpcy5pbnRlcnNlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSB0aGlzLnZpc3VhbC5yYXljYXN0ZXI7XHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMudmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMucGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKTtcclxuICAgIHRoaXMudGhyZWVzID0gW107XHJcbiAgICB0aGlzLnNlbGVjdGVkID0gbnVsbDtcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgICB0aGlzLmNvbnRyb2xzU3RhdGUgPSB0aGlzLnZpc3VhbC5nZXRDb250cm9sc1N0YXRlKCk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy52aXN1YWwuZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyksXHJcbiAgICAgIG9uTW91c2VVcDogdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ21vdXNlZG93bicsIHRoaXMuYmluZHMub25Nb3VzZURvd24pO1xyXG4gICAgJCh0aGlzLmRvYykub24oJ21vdXNldXAnLCB0aGlzLmJpbmRzLm9uTW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICBhZGRUaHJlZSh0aHJlZSkge1xyXG4gICAgdGhpcy50aHJlZXMucHVzaCh0aHJlZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVUaHJlZSh0aHJlZSkge1xyXG4gICAgY29uc3QgaSA9IHRoaXMudGhyZWVzLmluZGV4T2YodGhyZWUpO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy50aHJlZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25QaWNrQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uRHJhZ0NhbGxiYWNrKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvblJlbGVhc2VDYWxsYmFjaygpIHtcclxuXHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm9uTW91c2VEb3duKTtcclxuICAgICQodGhpcy5kb2MpLm9mZignbW91c2V1cCcsIHRoaXMuYmluZHMub25Nb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHNldENvb3Jkc0Zyb21FdmVudChlKSB7XHJcbiAgICBjb25zdCBqRWxlbWVudCA9ICQodGhpcy5lbGVtZW50KTtcclxuICAgIGNvbnN0IG9mZnNldCA9IGpFbGVtZW50Lm9mZnNldCgpO1xyXG4gICAgdGhpcy5jb29yZHMueCA9ICgoZS5wYWdlWC1vZmZzZXQubGVmdCkvakVsZW1lbnQud2lkdGgoKSkqMi0xO1xyXG4gICAgdGhpcy5jb29yZHMueSA9IC0oKGUucGFnZVktb2Zmc2V0LnRvcCkvakVsZW1lbnQuaGVpZ2h0KCkpKjIrMTtcclxuICAgIHJldHVybiB0aGlzLmNvb3JkcztcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGUpIHtcclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuXHJcbiAgICBpZih0aGlzLnNlbGVjdGVkKSB0aGlzLm9uTW91c2VVcChlKTtcclxuXHJcbiAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICBcdHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuXHJcbiAgXHRjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyh0aGlzLnRocmVlcyk7XHJcbiAgXHRpZihpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBpbnRlcnNlY3RzWzBdLm9iamVjdDtcclxuICAgICAgaWYoIXRoaXMub25QaWNrQ2FsbGJhY2soaW50ZXJzZWN0c1swXSkpIHJldHVybjtcclxuICAgICAgY29uc3QgdiA9IGludGVyc2VjdHNbMF0ucG9pbnQuY2xvbmUoKTtcclxuICAgICAgdGhpcy5kaXN0YW5jZSA9IHYuc3ViKHRoaXMucmF5Y2FzdGVyLnJheS5vcmlnaW4pLmxlbmd0aCgpOztcclxuICAgICAgdGhpcy5jb250cm9sc1N0YXRlID0gdGhpcy52aXN1YWwuZ2V0Q29udHJvbHNTdGF0ZSgpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5zZXRDb250cm9sc1N0YXRlKGZhbHNlKTtcclxuICAgICAgdGhpcy5wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCh0aGlzLnZpc3VhbC5jYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24odGhpcy5wbGFuZS5ub3JtYWwpLCBpbnRlcnNlY3RzWzBdLnBvaW50KTtcclxuICAgICAgLy90aGlzLnBsYW5lLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KHRoaXMucGxhbmUubm9ybWFsLnNldCgwLDAsMSksIG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSk7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcclxuICBcdH1cclxuXHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZShlKSB7XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcbiAgXHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIFx0aWYodGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICAgIFx0dGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLmNvb3JkcywgdGhpcy5jYW1lcmEpO1xyXG5cdCAgICBpZih0aGlzLnJheWNhc3Rlci5yYXkuaW50ZXJzZWN0UGxhbmUodGhpcy5wbGFuZSwgdGhpcy5pbnRlcnNlY3Rpb24pKSB7XHJcbiAgICAgICAgaWYoIXRoaXMub25EcmFnQ2FsbGJhY2sodGhpcy5pbnRlcnNlY3Rpb24pKSB0aGlzLm9uTW91c2VVcChlKTtcclxuICAgICAgfS8qKi9cclxuICAgICAgLy90aGlzLmludGVyc2VjdGlvbi5jb3B5KHRoaXMucmF5Y2FzdGVyLnJheS5kaXJlY3Rpb24pLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuZGlzdGFuY2UpLmFkZCh0aGlzLnJheWNhc3Rlci5yYXkub3JpZ2luKTsvKiovXHJcbiAgICAgIC8vaWYoIXRoaXMub25EcmFnQ2FsbGJhY2sodGhpcy5zZWxlY3RlZCwgdGhpcy5pbnRlcnNlY3Rpb24pKSB0aGlzLm9uTW91c2VVcChlKTtcclxuICBcdH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VVcChlKSB7XHJcbiAgICBpZih0aGlzLnNlbGVjdGVkKSB7XHJcbiAgICAgIHRoaXMub25SZWxlYXNlQ2FsbGJhY2soKTtcclxuICBcdFx0dGhpcy5zZWxlY3RlZCA9IG51bGw7XHJcbiAgICAgIHRoaXMudmlzdWFsLnNldENvbnRyb2xzU3RhdGUodGhpcy5jb250cm9sc1N0YXRlKTtcclxuICBcdH1cclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuICBcdGUucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RyYWcuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5yZXF1aXJlKCdpbXBvcnRzLWxvYWRlcj9kZWZpbmU9PmZhbHNlIWpxdWVyeS1tb3VzZXdoZWVsJykoJCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudHNUb0FjdGlvbnMge1xyXG5cclxuICBzdGF0aWMgbW9kS2V5cyA9IHtcclxuICAgIEN0cmw6IDEsXHJcbiAgICBTaGlmdDogMixcclxuICAgIEFsdDogNFxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBtb3VzZUJ1dHRvbnMgPSB7XHJcbiAgICBMZWZ0OiAwLFxyXG4gICAgTWlkZGxlOiAxLFxyXG4gICAgUmlnaHQ6IDJcclxuICB9O1xyXG5cclxuICBzdGF0aWMgZ2V0RXZlbnRGbGFncyhlKSB7XHJcbiAgICByZXR1cm4gZS5jdHJsS2V5PDwwIHwgZS5zaGlmdEtleTw8MSB8IGUuYWx0S2V5PDwyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFBvc2l0aW9uKHRvdWNoZXMpIHtcclxuICAgIGxldCB4LCB5O1xyXG4gICAgaWYodG91Y2hlcy5sZW5ndGg9PT0yKSB7XHJcbiAgICAgIHggPSB0b3VjaGVzWzFdLnBhZ2VYLXRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgIHkgPSB0b3VjaGVzWzFdLnBhZ2VZLXRvdWNoZXNbMF0ucGFnZVk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgeCA9IHRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgIHkgPSB0b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeCxcclxuICAgICAgeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGFjdGlvbnMpIHtcclxuICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnMgfHwge307XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5kb2MgPSBlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQ7XHJcbiAgICB0aGlzLnduZCA9IHRoaXMuZG9jLmRlZmF1bHRWaWV3O1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBjb250ZXh0TWVudTogdGhpcy5jb250ZXh0TWVudS5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgbW91c2VEb3duOiB0aGlzLm1vdXNlRG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZU1vdmU6IHRoaXMubW91c2VNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIG1vdXNlVXA6IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZVdoZWVsOiB0aGlzLm1vdXNlV2hlZWwuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIG1vdXNlTW92ZURvYzogdGhpcy5tb3VzZU1vdmVEb2MuYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VVcERvYzogdGhpcy5tb3VzZVVwRG9jLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBjbGljazogdGhpcy5jbGljay5iaW5kKHRoaXMpLFxyXG4gICAgICBkYmxjbGljazogdGhpcy5kYmxjbGljay5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgdG91Y2hTdGFydDogdGhpcy50b3VjaFN0YXJ0LmJpbmQodGhpcyksXHJcbiAgICAgIHRvdWNoTW92ZTogdGhpcy50b3VjaE1vdmUuYmluZCh0aGlzKSxcclxuICAgICAgdG91Y2hFbmQ6IHRoaXMudG91Y2hFbmQuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIGtleURvd246IHRoaXMua2V5RG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBrZXlQcmVzczogdGhpcy5rZXlQcmVzcy5iaW5kKHRoaXMpLFxyXG4gICAgICBrZXlVcDogdGhpcy5rZXlVcC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vbignY29udGV4dG1lbnUnLCB0aGlzLmJpbmRzLmNvbnRleHRNZW51KTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNlZG93bicsIHRoaXMuYmluZHMubW91c2VEb3duKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5tb3VzZU1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2V3aGVlbCcsIHRoaXMuYmluZHMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgJCh0aGlzLmRvYykub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlRG9jKTtcclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwRG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5iaW5kcy5jbGljayk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2RibGNsaWNrJywgdGhpcy5iaW5kcy5kYmxjbGljayk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCd0b3VjaHN0YXJ0JywgdGhpcy5iaW5kcy50b3VjaFN0YXJ0KTtcclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2htb3ZlJywgdGhpcy5iaW5kcy50b3VjaE1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMudG91Y2hFbmQpO1xyXG5cclxuICAgICQodGhpcy53bmQpLm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5rZXlEb3duKTtcclxuICAgICQodGhpcy53bmQpLm9uKCdrZXlwcmVzcycsIHRoaXMuYmluZHMua2V5UHJlc3MpO1xyXG4gICAgJCh0aGlzLnduZCkub24oJ2tleXVwJywgdGhpcy5iaW5kcy5rZXlVcCk7XHJcbiAgfVxyXG5cclxuICBhZGRBY3Rpb24oYWN0aW9uLCB0eXBlLCBjb2RlLCBmbGFncykge1xyXG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmKCF0aGlzLmFjdGlvbnNbdHlwZV0pIHtcclxuICAgICAgdGhpcy5hY3Rpb25zW3R5cGVdID0ge307XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXSA9IHt9XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXSkge1xyXG4gICAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV1bZmxhZ3NdID0gW107XHJcbiAgICB9XHJcbiAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV1bZmxhZ3NdLnB1c2goYWN0aW9uKTtcclxuICB9XHJcblxyXG4gIGdldEFjdGlvbnModHlwZSwgY29kZSwgZmxhZ3MpIHtcclxuICAgIHJldHVybiAoKHRoaXMuYWN0aW9uc1t0eXBlXSB8fCB7fSlbY29kZV0gfHwge30pW2ZsYWdzXSB8fCBbXTtcclxuICB9XHJcblxyXG4gIGZpcmVBY3Rpb25zKGFjdGlvbnMsIGUsIGRhdGEpIHtcclxuICAgIGZvcihsZXQgYWN0aW9uIG9mIGFjdGlvbnMpIHtcclxuICAgICAgYWN0aW9uKGUsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udGV4dE1lbnUoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdjb250ZXh0bWVudScsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VEb3duKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMubW91c2VVcERvYygpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZWRvd24nLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgIGFjdGlvbnM6IHRoaXMuZ2V0QWN0aW9ucygnbW91c2VkcmFnJywgZS5idXR0b24sIGZsYWdzKVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ3N0YXJ0J1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlTW92ZShlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ21vdXNlbW92ZScsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VNb3ZlRG9jKGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCAmJiB0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgIGR4OiBlLnBhZ2VYLXRoaXMucGlja2VkLngsXHJcbiAgICAgICAgZHk6IGUucGFnZVktdGhpcy5waWNrZWQueVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgIGFjdGlvbnM6IHRoaXMucGlja2VkLmFjdGlvbnNcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlVXAoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZXVwJywgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZVVwRG9jKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5waWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgIHN0YXRlOiAnZW5kJ1xyXG4gICAgICB9KTtcclxuICAgICAgZGVsZXRlIHRoaXMucGlja2VkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VXaGVlbChlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ21vdXNld2hlZWwnLCAwLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tzKGUsIHR5cGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucyh0eXBlLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrKGUpIHtcclxuICAgIHRoaXMuY2xpY2tzKGUsICdjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgZGJsY2xpY2soZSkge1xyXG4gICAgdGhpcy5jbGlja3MoZSwgJ2RibGNsaWNrJyk7XHJcbiAgfVxyXG5cclxuICB0b3VjaFBpY2soZSwgZmxhZ3MsIHRvdWNoZXMpIHtcclxuICAgIGNvbnN0IHBvcyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRQb3NpdGlvbih0b3VjaGVzKTtcclxuICAgIHRoaXMudG91Y2hQaWNrZWQgPSB7XHJcbiAgICAgIC4uLnBvcyxcclxuICAgICAgYWN0aW9uczogdGhpcy5nZXRBY3Rpb25zKCd0b3VjaGRyYWcnLCB0b3VjaGVzLmxlbmd0aCwgZmxhZ3MpLFxyXG4gICAgICBjb2RlOiB0b3VjaGVzLmxlbmd0aCxcclxuICAgICAgZmxhZ3NcclxuICAgIH07XHJcbiAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICBzdGF0ZTogJ3N0YXJ0JyxcclxuICAgICAgLi4ucG9zXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvdWNoU3RhcnQoZSkge1xyXG4gICAgaWYodGhpcy50b3VjaFBpY2tlZCkge1xyXG4gICAgICB0aGlzLnRvdWNoRW5kKGUpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSksIHRvdWNoZXMgPSBlLnRvdWNoZXMgfHwgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCd0b3VjaHN0YXJ0JywgdG91Y2hlcy5sZW5ndGgsIGZsYWdzKSwgZSk7XHJcbiAgICAgIHRoaXMudG91Y2hQaWNrKGUsIGZsYWdzLCB0b3VjaGVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvdWNoTW92ZShlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKSwgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcztcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ3RvdWNobW92ZScsIHRvdWNoZXMubGVuZ3RoLCBmbGFncyksIGUpO1xyXG4gICAgICBpZih0aGlzLnRvdWNoUGlja2VkKSB7XHJcbiAgICAgICAgaWYodGhpcy50b3VjaFBpY2tlZC5jb2RlPT09dG91Y2hlcy5sZW5ndGggJiYgdGhpcy50b3VjaFBpY2tlZC5mbGFncz09PWZsYWdzKSB7XHJcbiAgICAgICAgICBjb25zdCBwb3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0UG9zaXRpb24odG91Y2hlcyk7XHJcbiAgICAgICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgICBkeDogcG9zLngtdGhpcy50b3VjaFBpY2tlZC54LFxyXG4gICAgICAgICAgICBkeTogcG9zLnktdGhpcy50b3VjaFBpY2tlZC55LFxyXG4gICAgICAgICAgICAuLi5wb3NcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy50b3VjaFBpY2tlZCA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy50b3VjaFBpY2tlZCxcclxuICAgICAgICAgICAgLi4ucG9zXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudG91Y2hFbmQoZSk7XHJcbiAgICAgICAgICB0aGlzLnRvdWNoUGljayhlLCBmbGFncywgdG91Y2hlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b3VjaEVuZChlKSB7XHJcbiAgICBpZih0aGlzLnRvdWNoUGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy50b3VjaFBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdlbmQnXHJcbiAgICAgIH0pO1xyXG4gICAgICBkZWxldGUgdGhpcy50b3VjaFBpY2tlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGtleShlLCB0eXBlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnModHlwZSwgZS5rZXlDb2RlLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAga2V5RG93bihlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5ZG93bicpO1xyXG4gIH1cclxuXHJcbiAga2V5UHJlc3MoZSkge1xyXG4gICAgdGhpcy5rZXkoZSwgJ2tleXByZXNzJyk7XHJcbiAgfVxyXG5cclxuICBrZXlVcChlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5dXAnKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdjb250ZXh0bWVudScsIHRoaXMuYmluZHMuY29udGV4dE1lbnUpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNlZG93bicsIHRoaXMuYmluZHMubW91c2VEb3duKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm1vdXNlVXApO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignbW91c2V3aGVlbCcsIHRoaXMuYmluZHMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm1vdXNlTW92ZURvYyk7XHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm1vdXNlVXBEb2MpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy5jbGljayk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdkYmxjbGljaycsIHRoaXMuYmluZHMuZGJsY2xpY2spO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ3RvdWNoc3RhcnQnLCB0aGlzLmJpbmRzLnRvdWNoU3RhcnQpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2htb3ZlJywgdGhpcy5iaW5kcy50b3VjaE1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2hlbmQnLCB0aGlzLmJpbmRzLnRvdWNoRW5kKTtcclxuXHJcbiAgICAkKHRoaXMud25kKS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmtleURvd24pO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXlwcmVzcycsIHRoaXMuYmluZHMua2V5UHJlc3MpO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHMua2V5VXApO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRXZlbnRzVG9BY3Rpb25zLmpzIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bGxTY3JlZW4ge1xyXG5cclxuXHRzdGF0aWMgX2hhc1dlYmtpdEZ1bGxTY3JlZW5cdD0gISFkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuO1xyXG5cdHN0YXRpYyBfaGFzTW96RnVsbFNjcmVlblx0PSAhIWRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW47XHJcblx0c3RhdGljIF9oYXNNc0Z1bGxzY3JlZW4gPSAhIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuO1xyXG5cclxuXHRzdGF0aWMgYXZhaWxhYmxlKCkge1xyXG5cdFx0cmV0dXJuIEZ1bGxTY3JlZW4uX2hhc1dlYmtpdEZ1bGxTY3JlZW4gfHwgRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbiB8fCBGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW47XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWN0aXZhdGVkKCkge1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQud2Via2l0SXNGdWxsU2NyZWVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNb3pGdWxsU2NyZWVuKSB7XHJcblx0XHRcdHJldHVybiBkb2N1bWVudC5tb3pGdWxsU2NyZWVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW4pIHtcclxuXHRcdFx0cmV0dXJuICEhZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudDtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVxdWVzdChlbGVtZW50KSB7XHJcblx0XHRlbGVtZW50XHQ9IGVsZW1lbnRcdHx8IGRvY3VtZW50LmJvZHk7XHJcblx0XHRpZihGdWxsU2NyZWVuLl9oYXNXZWJraXRGdWxsU2NyZWVuKSB7XHJcblx0XHRcdGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKEZ1bGxTY3JlZW4uX2hhc01zRnVsbHNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY2FuY2VsKCkge1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuKCk7XHJcblx0XHR9ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNb3pGdWxsU2NyZWVuKSB7XHJcblx0XHRcdGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTXNGdWxsc2NyZWVuKSB7XHJcblx0XHRcdGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9GdWxsU2NyZWVuLmpzIiwiaW1wb3J0IHskLCBodG1sMmNhbnZhc30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5pbXBvcnQgRG9tMkltYWdlIGZyb20gJy4vRG9tMkltYWdlJztcclxuaW1wb3J0IERvY01vdXNlU2ltdWxhdG9yIGZyb20gJy4vRG9jTW91c2VTaW11bGF0b3InO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJhY3RpdmVJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBzcmMsIGNhY2hlLCBpbmplY3Rvcikge1xyXG4gICAgc3VwZXIoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpO1xyXG5cclxuICAgIHRoaXMuaUlkID0gJ2knK0Jhc2VNYXRoVXRpbHMuZ2V0VW5pcXVlKCk7XHJcbiAgICBjb25zdCBqRnJhbWUgPSAkKCc8aWZyYW1lIGlkPVwiJyt0aGlzLmlJZCsnXCIgc3JjPVwiJyArIHNyYyArICdcIiBzdHlsZT1cInBvc2l0aW9uOiBmaXhlZDsgbGVmdDogLTEwMDBweDtcIj48L2lmcmFtZT4nKTtcclxuICAgICQodGhpcy5kb2MuYm9keSkuYXBwZW5kKGpGcmFtZSk7XHJcbiAgICB0aGlzLmZyYW1lID0gakZyYW1lWzBdO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7fTtcclxuXHJcbiAgICBpZihpbmplY3Rvcikge1xyXG4gICAgICBpbmplY3Rvcih0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMuZG9jLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ3d3dy5odHRwOi8vdzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjRXh0ZW5zaWJpbGl0eScsICcxLjEnKSkgeyAvLyBzdmcgZm9yZWlnbk9iamVjdCByZW5kZXJlclxyXG4gICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgIHRoaXMuYmluZHMuaW1hZ2VMb2FkID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZSh0aGlzLmltYWdlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICAkKHRoaXMuaW1hZ2UpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpO1xyXG4gICAgICB0aGlzLnN2Z1JlbmRlciA9IG5ldyBEb20ySW1hZ2UodGhpcy5mcmFtZS5jb250ZW50V2luZG93LCB0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudCwgY2FjaGUpO1xyXG4gICAgfSAvLyBvdGhlcndpc2UgLSBodG1sMmNhbnZhc1xyXG5cclxuICAgIHRoaXMuYmluZHMuZnJhbWVMb2FkID0gKCk9PiB7XHJcbiAgICAgIGlmKH50aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC50aXRsZS5pbmRleE9mKCc0MDQnKSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICAgIHRoaXMucmVuZGVyTm90Rm91bmRQYWdlKCk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgIGlmKHRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSkud2lkdGgoKTtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAkKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkpLmhlaWdodCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc0ggPSB0aGlzLmhlaWdodC90aGlzLndpZHRoKnRoaXMucmVzVztcclxuICAgICAgICAgICAgakZyYW1lLmNzcygnd2lkdGgnLCB0aGlzLndpZHRoKydweCcpLmNzcygnaGVpZ2h0JywgdGhpcy5oZWlnaHQrJ3B4Jyk7XHJcbiAgICAgICAgICAgIGpGcmFtZS5vZmZzZXQoe2xlZnQ6IC10aGlzLndpZHRoLTEwMCwgdG9wOiAwfSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc3ZnUmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zaW11bGF0b3IgPSBuZXcgRG9jTW91c2VTaW11bGF0b3IoakZyYW1lLCB0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LCB0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2ltdWxhdG9yLmFkZERvY0NoYW5nZUNsYih0aGlzLmZpbmlzaExvYWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAkKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdykub24oJ2xvYWQnLCB0aGlzLmJpbmRzLmZyYW1lTG9hZCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaW11bGF0ZWREb2MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZih0aGlzLnN2Z1JlbmRlcikge1xyXG4gICAgICB0aGlzLnN2Z1JlbmRlci50b1N2Zyh0aGlzLnNpbXVsYXRvci5lbGVtZW50LCB7aGVpZ2h0OiB0aGlzLmhlaWdodCsncHgnLCB3aWR0aDogdGhpcy53aWR0aCsncHgnfSlcclxuICAgICAgICAudGhlbigoZGF0YVVybCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IGRhdGFVcmw7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycm9yKT0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RvbTJJbWFnZTogJywgZXJyb3IpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaHRtbDJjYW52YXModGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSwge3RpbWVvdXQ6IDMwMDAwfSkuXHJcbiAgICAgICAgdGhlbigoY2FudmFzKT0+IHtcclxuICAgICAgICAgIHRoaXMucmVuZGVySW1hZ2UoY2FudmFzKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmltYWdlKS5vZmYoJ2xvYWQnLCB0aGlzLmJpbmRzLmltYWdlTG9hZCk7XHJcbiAgICAkKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdykub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5mcmFtZUxvYWQpO1xyXG4gICAgJCh0aGlzLmRvYy5ib2R5KS5maW5kKCcjJyt0aGlzLmlJZCkucmVtb3ZlKCk7XHJcbiAgICBpZih0aGlzLmltYWdlKSB7XHJcbiAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gJyc7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmltYWdlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mcmFtZS5zcmMgPSAnJztcclxuICAgIGRlbGV0ZSB0aGlzLmZyYW1lO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgc2ltdWxhdGUoZSwgZG9jLCB4LCB5KSB7XHJcbiAgICBpZih0aGlzLnNpbXVsYXRvcikge1xyXG4gICAgICB0aGlzLnNpbXVsYXRvci5zaW11bGF0ZShlLCBkb2MsIHgsIHkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvSW50ZXJhY3RpdmVJbWFnZS5qcyIsImltcG9ydCB7JCwgdHJ9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdBbmltYXRpb24ge1xyXG5cclxuICBkeSh0LHkpIHtcclxuICAgIGNvbnN0IHc9eVswXSwgYT15WzFdO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgLXRoaXMuZypNYXRoLmNvcyhhKSxcclxuICAgICAgd1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLCBkdD10aGlzLnAuZHQsIG9zID0gdGhpcy5vcztcclxuICAgIHdoaWxlKHQ8VCkge1xyXG4gICAgICBpZih0K2R0PlQpIHtcclxuICAgICAgICBkdD1ULXQ7XHJcbiAgICAgIH1cclxuICAgICAgb3M9TWF0aFV0aWxzLnJrNCh0aGlzLmR5LmJpbmQoe2c6IHRoaXMucC5nfSksIDAsIGR0LCBvcyk7XHJcbiAgICAgIHQrPWR0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9zO1xyXG4gIH1cclxuXHJcbiAgY2FsY1RpbWVUbyh0YXJnZXQpIHtcclxuICAgIGxldCB0PTAsIGR0PXRoaXMucC5kdCwgb3MgPSB0aGlzLm9zO1xyXG4gICAgd2hpbGUoTWF0aC5hYnMob3NbMV0tdGFyZ2V0KT4xZS00KSB7XHJcbiAgICAgIGNvbnN0IG5vcz1NYXRoVXRpbHMucms0KHRoaXMuZHkuYmluZCh7ZzogdGhpcy5wLmd9KSwgMCwgZHQsIG9zKTtcclxuICAgICAgaWYobm9zWzBdPDAgJiYgbm9zWzFdPHRhcmdldCB8fCBub3NbMF0+MCAmJiBub3NbMV0+dGFyZ2V0KSB7XHJcbiAgICAgICAgZHQvPTI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgb3MgPSBub3M7XHJcbiAgICAgICAgdCs9ZHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKFQpIHtcclxuICAgIHRoaXMub3MgPSB0aGlzLmludGVncmF0ZShUKTtcclxuXHJcbiAgICB0aGlzLnQrPVRcclxuICAgIGlmKHRoaXMudD49dGhpcy5wLnVwZGF0ZUludGVydmFsKSB7XHJcbiAgICAgIHRoaXMudCA9IDA7XHJcbiAgICAgIGNvbnN0IHIgPSAwLjA0Kk1hdGgubWluKHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCksXHJcbiAgICAgICAgICAgIGEgPSB0aGlzLm9zWzFdLFxyXG4gICAgICAgICAgICB4MCA9IDAuNSp0aGlzLmMud2lkdGgsXHJcbiAgICAgICAgICAgIHkwID0gMC41KnRoaXMuYy5oZWlnaHQsXHJcbiAgICAgICAgICAgIGN0eCA9IHRoaXMuY3R4O1xyXG5cclxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEodGhpcy5wLmNvbG9yLDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCAwLCB0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguc2hhZG93Qmx1ciA9IDUwO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwwLjkpLE1hdGguYWJzKHRoaXMub3NbMF0vNi4zNikpO1xyXG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLDEpLDAuOSk7XHJcbiAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICBjdHguZm9udD0nYm9sZCAnK01hdGgucm91bmQoMC4yNSpyKSsncHggQXJpYWwnO1xyXG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgICAgY3R4LmZpbGxUZXh0KHRyKCdMb2FkaW5nLi4uJykseDAseTApO1xyXG5cclxuICAgICAgY29uc3QgcHMgPSAxMCwgZGE9MipNYXRoLlBJL3BzOy8vMi41Kl9yL3JcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwxKSwwLjcpO1xyXG4gICAgICBmb3IobGV0IGk9MCwgX2E9YSwgX3I9MC4yKnI7IGk8cHM7ICsraSwgX3IqPTAuOSwgX2ErPWRhKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLChwcy1pKS9wcyksMC43Kihwcy1pKS9wcyk7XHJcbiAgICAgICAgY29uc3QgY3g9eDArcipNYXRoLmNvcyhfYSksIGN5PXkwLXIqTWF0aC5zaW4oX2EpLCBueD14MCtyKk1hdGguY29zKF9hK2RhKSwgbnk9eTAtcipNYXRoLnNpbihfYStkYSk7XHJcbiAgICAgICAgY3R4LnNoYWRvd09mZnNldFggPSAwLjIqKG54LWN4KTtcclxuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDAuMioobnktY3kpO1xyXG4gICAgICAgIGN0eC5hcmMoY3gsIGN5LCBfciwgMCwgTWF0aC5QSSoyLCAxKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuYywgdGhpcy5wLmNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0SW1hZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuYy53aWR0aCA9IDA7XHJcbiAgICB0aGlzLmMuaGVpZ2h0ID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmN0eDtcclxuICAgIGRlbGV0ZSB0aGlzLmM7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTcHJpdGUobikge1xyXG4gICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKHRoaXMuYy53aWR0aCpuLCB0aGlzLmMuaGVpZ2h0KSwgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpLFxyXG4gICAgdCA9IHRoaXMuY2FsY1RpbWVUbyh0aGlzLm9zWzFdK01hdGguc2lnbih0aGlzLm9zWzBdKSoyKk1hdGguUEkpLCBkdD10LyhuKzEpO1xyXG4gICAgY29uc3Qge3VwZGF0ZUludGVydmFsfSA9IHRoaXMucDtcclxuICAgIHRoaXMucC51cGRhdGVJbnRlcnZhbCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxuOyArK2kpIHtcclxuICAgICAgdGhpcy51cGRhdGUoZHQpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYywgaSp0aGlzLmMud2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wLnVwZGF0ZUludGVydmFsID0gdXBkYXRlSW50ZXJ2YWw7XHJcbiAgICByZXR1cm4gYztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICB0aGlzLmMgPSBHcmFwaFV0aWxzLmNyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgZzogOS44LFxyXG4gICAgICBkdDogMS82MCxcclxuICAgICAgY29sb3IsXHJcbiAgICAgIHVwZGF0ZUludGVydmFsOiAwLjI1XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jdHggPSB0aGlzLmMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHRoaXMub3MgPSBbLTIsIE1hdGguUEkvMl07XHJcbiAgICB0aGlzLnQgPSB0aGlzLnAudXBkYXRlSW50ZXJ2YWw7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQW5pbWF0aW9uLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlldywgc2hvd1Byb2dyZXNzPXRydWUsIGxvYWRpbmdNc2c9dW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5wcm9ncmVzcyA9IDA7XHJcbiAgICB0aGlzLnNob3dQcm9ncmVzcyA9IHNob3dQcm9ncmVzcztcclxuICAgIHRoaXMuZ2V0TG9hZGluZ01zZyA9IGxvYWRpbmdNc2cgfHwgTG9hZGluZ0NvbnRyb2xsZXIuZGVmYXVsdExvYWRpbmdNc2c7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0TG9hZGluZ01zZyhwcm9ncmVzcykge1xyXG4gICAgcmV0dXJuIFsnUGxlYXNlIHdhaXQuLi4gdGhlIEFwcGxpY2F0aW9uIGlzIExvYWRpbmc6ICcsIHByb2dyZXNzLCAnJSddLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gZmFsc2U7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBzZXRQcm9ncmVzcyh2KSB7XHJcbiAgICB0aGlzLnByb2dyZXNzID0gdjtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nUHJvZ3Jlc3MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuc2hvd1Byb2dyZXNzLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3R4dExvYWRpbmdQcm9ncmVzcycsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5nZXRMb2FkaW5nTXNnKHRoaXMucHJvZ3Jlc3MpLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgdGhpcy52aWV3LmdldExpbmtzKCkpIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0U3RhdGUobmFtZSwge1xyXG4gICAgICAgICAgZW5hYmxlOiBmYWxzZSxcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnaW5wUGFnZXMnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2lucFBhZ2UnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBlbmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBlbGVtZW50KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIGNvbnZlcnQ6IHRoaXMuY29udmVydC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdtb3VzZW1vdmUgbW91c2Vkb3duIG1vdXNlb3ZlciBtb3VzZW91dCBjbGljaycsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlIG1vdXNlZG93biBtb3VzZW92ZXIgbW91c2VvdXQgY2xpY2snLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9iamVjdDNEV2F0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm91bmRCb3hDbGIsIHRlc3RTY2FsZT10aGlzLnRlc3RTY2FsZSkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgICB0aGlzLnRlc3RTY2FsZSA9IHRlc3RTY2FsZTtcclxuICAgIHRoaXMuY2FtZXJhID0gdmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlzdWFsLmVsZW1lbnQ7XHJcbiAgICB0aGlzLmVsZW1lbnRTaXplID0ge3c6IDEsIGg6IDF9O1xyXG4gICAgdGhpcy5vcmJpdCA9IHZpc3VhbC5nZXRPcmJpdCgpO1xyXG4gICAgdGhpcy5zY2FsZSA9IDE7XHJcbiAgICB0aGlzLnBhZGRpbmcgPSAwO1xyXG5cclxuICAgIHRoaXMuZXBzID0gMWUtNDtcclxuICAgIHRoaXMudiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgICB0aGlzLmR2ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuXHJcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy5vcyA9IHtcclxuICAgICAgdng6IDAsXHJcbiAgICAgIHZ5OiAwLFxyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICBsZXQgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKSwgaz0xLjExO1xyXG4gICAgdGhpcy5tb3ZlUGFuKHt4OiAtaypib3gubWlkLngsIHk6IC1rKmJveC5taWQueX0pO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFkZGluZyhwYWRkaW5nKSB7XHJcbiAgICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xyXG4gIH1cclxuXHJcbiAgbW92ZVBhbihkdikge1xyXG4gICAgdGhpcy5vcmJpdC5wYW4oZHYueCp0aGlzLnZpc3VhbC53aWR0aCgpLCAtZHYueSp0aGlzLnZpc3VhbC5oZWlnaHQoKSk7XHJcbiAgfVxyXG5cclxuICB2VG9DYW1lcmEodikge1xyXG4gICAgdi5wcm9qZWN0KHRoaXMuY2FtZXJhKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IDAuNSp2LngsXHJcbiAgICAgIHk6IDAuNSp2LnlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wdXRlQ2xpZW50Qm91bmRCb3goKSB7XHJcbiAgICBjb25zdCBib3ggPSB0aGlzLmJvdW5kQm94Q2xiKCksXHJcbiAgICAgIHhzID0gW2JveC5taW4ueCwgYm94Lm1heC54XSxcclxuICAgICAgeXMgPSBbMCwgMF0sXHJcbiAgICAgIHpzID0gW2JveC5taW4ueiwgYm94Lm1heC56XTtcclxuXHJcbiAgICBjb25zdCBwcyA9IFtdLCByZXMgPSB7bWF4OiB7fSwgbWluOiB7fX07XHJcbiAgICBmb3IobGV0IHggb2YgeHMpIHtcclxuICAgICAgZm9yKGxldCB5IG9mIHlzKSB7XHJcbiAgICAgICAgZm9yKGxldCB6IG9mIHpzKSB7XHJcbiAgICAgICAgICBwcy5wdXNoKHRoaXMudlRvQ2FtZXJhKHRoaXMudi5zZXQoeCx5LHopKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHMuc29ydCgocDEsIHAyKT0+IHAxLngtcDIueCk7XHJcbiAgICByZXMubWluLnggPSBwc1swXS54O1xyXG4gICAgcmVzLm1heC54ID0gcHNbcHMubGVuZ3RoLTFdLng7XHJcbiAgICBwcy5zb3J0KChwMSwgcDIpPT4gcDEueS1wMi55KTtcclxuICAgIHJlcy5taW4ueSA9IHBzWzBdLnk7XHJcbiAgICByZXMubWF4LnkgPSBwc1twcy5sZW5ndGgtMV0ueTtcclxuXHJcbiAgICByZXMud2lkdGggPSByZXMubWF4LngtcmVzLm1pbi54O1xyXG4gICAgcmVzLmhlaWdodCA9IHJlcy5tYXgueS1yZXMubWluLnk7XHJcblxyXG4gICAgcmVzLm1pZCA9IHtcclxuICAgICAgeDogMC41KihyZXMubWF4LngrcmVzLm1pbi54KSxcclxuICAgICAgeTogMC41KihyZXMubWF4LnkrcmVzLm1pbi55KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc2V0T2JqZWN0KGJvdW5kQm94Q2xiKSB7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgfVxyXG5cclxuICB0ZXN0U2NhbGUoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNvbXB1dGVDb3JyKEssIG1pbiwgbWF4KSB7XHJcbiAgICBsZXQgY29yciA9IDA7XHJcbiAgICBpZihLPDEpIHtcclxuICAgICAgaWYobWluPi0wLjUpIHtcclxuICAgICAgICBjb3JyID0gLTAuNS1taW47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihtYXg8MC41KSB7XHJcbiAgICAgICAgY29yciA9IDAuNS1tYXg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihtaW48LTAuNSkge1xyXG4gICAgICAgIGNvcnIgPSAtMC41LW1pbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG1heD4wLjUpIHtcclxuICAgICAgICBjb3JyID0gMC41LW1heDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvcnI7XHJcbiAgfVxyXG5cclxuICBjZW50ZXJWaWV3KFQpIHtcclxuICAgIGxldCBib3ggPSB0aGlzLmNvbXB1dGVDbGllbnRCb3VuZEJveCgpLFxyXG4gICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGgsXHJcbiAgICAgIEt5ID0gdGhpcy5lbGVtZW50U2l6ZS5oL2JveC5oZWlnaHQsXHJcbiAgICAgIEsgPSBNYXRoLm1pbihLeCwgS3kpLFxyXG4gICAgICBtb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBpZih0aGlzLnRlc3RTY2FsZSgpICYmIE1hdGguYWJzKDEvSy10aGlzLnNjYWxlKT50aGlzLmVwcykge1xyXG4gICAgICBjb25zdCBzY2FsZSA9IDEvSyswLjIqKHRoaXMuc2NhbGUtMS9LKTtcclxuICAgICAgdGhpcy5vcmJpdC5zZXRTY2FsZSh0aGlzLm9yYml0LmdldFNjYWxlKCkvKEsqc2NhbGUpKTtcclxuICAgICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgICAgdGhpcy5jYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuICAgICAgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKTtcclxuICAgICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGg7XHJcbiAgICAgICAgS3kgPSB0aGlzLmVsZW1lbnRTaXplLmgvYm94LmhlaWdodDtcclxuICAgICAgICBLID0gTWF0aC5taW4oS3gsIEt5KTtcclxuICAgICAgbW92aW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkdiA9IHRoaXMuZHY7XHJcbiAgICBpZihLPjEtdGhpcy5lcHMpIHtcclxuICAgICAgaWYodGhpcy5wYWRkaW5nKSB7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy52aXN1YWwuaGVpZ2h0KCksIG1hcmcgPSAwLjUqKEt5LTEpL0t5LCBwYWQgPSB0aGlzLnBhZGRpbmcvaGVpZ2h0LCBkcGFkID0gTWF0aC5tYXgoMCwgTWF0aC5hYnMocGFkKS1tYXJnKTtcclxuICAgICAgICBkdi5zZXQoLWJveC5taWQueCwgLU1hdGguc2lnbihwYWQpKk1hdGgubWluKE1hdGgubWF4KDAsIG1hcmctMjAvaGVpZ2h0KSwgZHBhZCktYm94Lm1pZC55KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBkdi5zZXQoLWJveC5taWQueCwgLWJveC5taWQueSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zdCBweCA9IDcwL3RoaXMudmlzdWFsLndpZHRoKCksIHB5PTcwL3RoaXMudmlzdWFsLmhlaWdodCgpO1xyXG4gICAgICBkdi5zZXQodGhpcy5jb21wdXRlQ29ycihLeCwgYm94Lm1pbi54LXB4LCBib3gubWF4LngrcHgpLFxyXG4gICAgICAgICAgICAgdGhpcy5jb21wdXRlQ29ycihLeSwgYm94Lm1pbi55LXB5LCBib3gubWF4LnkrcHkpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihNYXRoLnNxcnQodGhpcy5vcy52eCp0aGlzLm9zLnZ4K3RoaXMub3MudnkqdGhpcy5vcy52eSk+MC4wMDMgfHwgZHYubGVuZ3RoKCk+MC4wMDMpIHtcclxuICAgICAgbGV0IGR0ID0gMS82MCwgdD0wLCBvcyA9IHtcclxuICAgICAgICAuLi50aGlzLm9zLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMFxyXG4gICAgICB9O1xyXG4gICAgICBvcy50ZiA9ICh2eCwgdnksIHgsIHkpPT4gKHtcclxuICAgICAgICB4OiA3NSooZHYueC14KSxcclxuICAgICAgICB5OiA3NSooZHYueS15KVxyXG4gICAgICB9KTtcclxuICAgICAgd2hpbGUodDxUKSB7XHJcbiAgICAgICAgaWYodCtkdD5UKSB7XHJcbiAgICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3MgPSB0aGlzLmludGVncmF0ZShvcywgZHQpO1xyXG4gICAgICAgIHQgKz0gZHQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tb3ZlUGFuKG9zKTtcclxuICAgICAgdGhpcy5vcyA9IG9zO1xyXG4gICAgICBtb3ZpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcmJpdC5zZXRNb3ZpbmcobW92aW5nKTtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShvcywgZHQpIHtcclxuICAgIGNvbnN0IFt2eCwgdnksIHgsIHldID0gTWF0aFV0aWxzLnJrNChcclxuICAgICAgdGhpcy5keS5iaW5kKG9zKSxcclxuICAgICAgMCxcclxuICAgICAgZHQsXHJcbiAgICAgIFtvcy52eCwgb3MudnksIG9zLngsIG9zLnldXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4ub3MsXHJcbiAgICAgIHZ4LCB2eSwgeCwgeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGR5KHQsWSkge1xyXG4gICAgY29uc3QgW3Z4LCB2eSwgeCwgeV0gPSBZLCB2ZCA9IDE1LCB0ZiA9IHRoaXMudGYodngsIHZ5LCB4LCB5KTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHRmLngtdmQqdngsXHJcbiAgICAgIHRmLnktdmQqdnksXHJcbiAgICAgIHZ4LFxyXG4gICAgICB2eVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYm91bmRCb3hDbGIpIHtcclxuICAgICAgdGhpcy5jZW50ZXJWaWV3KGR0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL09iamVjdDNEV2F0Y2hlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JiaXQgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihvYmplY3QsIHdvcmxkKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcclxuICBcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gIFx0dGhpcy53b3JsZCA9IHdvcmxkO1xyXG5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxyXG4gIFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgXHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcclxuICBcdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dChQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5KVxyXG4gIFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XHJcbiAgXHR0aGlzLm1heERpc3RhbmNlID0gSW5maW5pdHk7XHJcblxyXG4gIFx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dChPcnRob2dyYXBoaWNDYW1lcmEgb25seSlcclxuICBcdHRoaXMubWluWm9vbSA9IDA7XHJcbiAgXHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cclxuICBcdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxyXG4gIFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xyXG4gIFx0dGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xyXG5cclxuICBcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXHJcbiAgXHQvLyBJZiBzZXQsIG11c3QgYmUgYSBzdWItaW50ZXJ2YWwgb2YgdGhlIGludGVydmFsIFstTWF0aC5QSSwgTWF0aC5QSSBdLlxyXG4gIFx0dGhpcy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuICBcdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuXHJcbiAgXHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcclxuICBcdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXHJcbiAgXHR0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcclxuICBcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMjU7XHJcblxyXG4gIFx0Ly8gVGhpcyBvcHRpb24gYWN0dWFsbHkgZW5hYmxlcyBkb2xseWluZyBpbiBhbmQgb3V0OyBsZWZ0IGFzIFwiem9vbVwiIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcclxuICBcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XHJcbiAgXHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xyXG4gIFx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gIFx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYW5uaW5nXHJcbiAgXHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XHJcblxyXG4gIFx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcclxuICBcdC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gIFx0dGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XHJcbiAgXHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcclxuXHJcbiAgXHQvLyBmb3IgcmVzZXRcclxuICBcdHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XHJcbiAgXHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgXHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gcHVibGljIG1ldGhvZHNcclxuICBcdC8vXHJcbiAgXHR0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgXHRcdHJldHVybiBzcGhlcmljYWwucGhpO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRyZXR1cm4gc3BoZXJpY2FsLnRoZXRhO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRzY29wZS50YXJnZXQuY29weShzY29wZS50YXJnZXQwKTtcclxuICBcdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoc2NvcGUucG9zaXRpb24wKTtcclxuICBcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBzY29wZS56b29tMDtcclxuXHJcbiAgXHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpO1xyXG5cclxuICBcdFx0c2NvcGUudXBkYXRlKCk7XHJcbiAgXHR9O1xyXG5cclxuICAgIHRoaXMuem9vbU91dCA9IGZ1bmN0aW9uKHNwZWVkPXRoaXMuem9vbVNwZWVkKSB7XHJcbiAgICAgIGNvbnN0IF9zcGVlZCA9IHRoaXMuem9vbVNwZWVkO1xyXG4gICAgICB0aGlzLnpvb21TcGVlZCA9IHNwZWVkO1xyXG4gICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuem9vbUluID0gZnVuY3Rpb24oc3BlZWQ9dGhpcy56b29tU3BlZWQpIHtcclxuICAgICAgY29uc3QgX3NwZWVkID0gdGhpcy56b29tU3BlZWQ7XHJcbiAgICAgIHRoaXMuem9vbVNwZWVkID0gc3BlZWQ7XHJcbiAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0U2NhbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U2NhbGUgPSBmdW5jdGlvbihuZXdTY2FsZSkge1xyXG4gICAgICBzY2FsZSA9IG5ld1NjYWxlO1xyXG4gICAgfVxyXG5cclxuICBcdC8vIHRoaXMgbWV0aG9kIGlzIGV4cG9zZWQsIGJ1dCBwZXJoYXBzIGl0IHdvdWxkIGJlIGJldHRlciBpZiB3ZSBjYW4gbWFrZSBpdCBwcml2YXRlLi4uXHJcbiAgXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXHJcbiAgXHRcdHZhciBxdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tVW5pdFZlY3RvcnMob2JqZWN0LnVwLCBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKSk7XHJcbiAgXHRcdHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XHJcbiAgXHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHR2YXIgbGFzdFF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xyXG5cclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XHJcbiAgXHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xyXG4gIFx0XHRcdG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWIoc2NvcGUudGFyZ2V0KTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IHRvIFwieS1heGlzLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXQpO1xyXG4gIFx0XHRcdC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcclxuICBcdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMob2Zmc2V0KTtcclxuICBcdFx0XHRpZihzY29wZS5hdXRvUm90YXRlKSB7XHJcbiAgXHRcdFx0XHRyb3RhdGVMZWZ0KGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkpO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnBoaSArPSBzcGhlcmljYWxEZWx0YS5waGk7XHJcbiAgXHRcdFx0Ly8gcmVzdHJpY3QgdGhldGEgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KHNjb3BlLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4oc2NvcGUubWF4QXppbXV0aEFuZ2xlLCBzcGhlcmljYWwudGhldGEpKTtcclxuICBcdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5waGkgPSBNYXRoLm1heChzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbihzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpKSk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLm1ha2VTYWZlKCk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnJhZGl1cyAqPSBzY2FsZTtcclxuICBcdFx0XHQvLyByZXN0cmljdCByYWRpdXMgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heChzY29wZS5taW5EaXN0YW5jZSwgTWF0aC5taW4oc2NvcGUubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMpKTtcclxuICBcdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cclxuICBcdFx0XHRzY29wZS50YXJnZXQuYWRkKHBhbk9mZnNldCk7XHJcbiAgXHRcdFx0b2Zmc2V0LnNldEZyb21TcGhlcmljYWwoc3BoZXJpY2FsKTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IGJhY2sgdG8gXCJjYW1lcmEtdXAtdmVjdG9yLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXRJbnZlcnNlKTtcclxuICBcdFx0XHRwb3NpdGlvbi5jb3B5KHNjb3BlLnRhcmdldCkuYWRkKG9mZnNldCk7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdChzY29wZS50YXJnZXQpO1xyXG5cclxuICBcdFx0XHRpZihzY29wZS5lbmFibGVEYW1waW5nPT09dHJ1ZSkge1xyXG4gIFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgKj0oMS1zY29wZS5kYW1waW5nRmFjdG9yKTtcclxuICBcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSgxLXNjb3BlLmRhbXBpbmdGYWN0b3IpO1xyXG4gIFx0XHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0XHRzcGhlcmljYWxEZWx0YS5zZXQoMCwgMCwgMCk7XHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0XHRzY2FsZSA9IDE7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LnNldCgwLCAwLCAwKTtcclxuXHJcbiAgXHRcdFx0Ly8gdXBkYXRlIGNvbmRpdGlvbiBpczpcclxuICBcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcclxuICBcdFx0XHQvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMS14XjIgLyA4XHJcblxyXG4gIFx0XHRcdGlmKHpvb21DaGFuZ2VkIHx8XHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoc2NvcGUub2JqZWN0LnBvc2l0aW9uKSA+IEVQUyB8fFxyXG4gIFx0XHRcdFx0OCAqKDEtbGFzdFF1YXRlcm5pb24uZG90KHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uKSkgPiBFUFMpIHtcclxuXHJcbiAgXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcclxuXHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uY29weShzY29wZS5vYmplY3QucG9zaXRpb24pO1xyXG4gIFx0XHRcdFx0bGFzdFF1YXRlcm5pb24uY29weShzY29wZS5vYmplY3QucXVhdGVybmlvbik7XHJcbiAgXHRcdFx0XHR6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICBcdFx0XHRcdHJldHVybiB0cnVlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gaW50ZXJuYWxzXHJcbiAgXHQvL1xyXG4gIFx0dmFyIHNjb3BlID0gdGhpcztcclxuICBcdHZhciBjaGFuZ2VFdmVudCA9IHsgdHlwZTogJ2NoYW5nZScgfTtcclxuICBcdHZhciBFUFMgPSAxZS02O1xyXG4gIFx0Ly8gY3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZXNcclxuICBcdHZhciBzcGhlcmljYWwgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcbiAgXHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcblxyXG4gIFx0dmFyIHNjYWxlID0gMTtcclxuICBcdHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0dmFyIHpvb21DaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XHJcbiAgXHRcdHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xyXG4gIFx0XHRyZXR1cm4gTWF0aC5wb3coMC45NSwgc2NvcGUuem9vbVNwZWVkKTtcclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiByb3RhdGVMZWZ0KGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJvdGF0ZVVwKGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnBoaSAtPSBhbmdsZTtcclxuICBcdH1cclxuXHJcbiAgXHR2YXIgcGFuTGVmdCA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgdiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbiBwYW5MZWZ0KGRpc3RhbmNlLCBvYmplY3RNYXRyaXgpIHtcclxuICBcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4ob2JqZWN0TWF0cml4LCAwKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxyXG4gIFx0XHRcdHYubXVsdGlwbHlTY2FsYXIoLSBkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHR2YXIgcGFuVXAgPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuVXAoZGlzdGFuY2UsIG9iamVjdE1hdHJpeCkge1xyXG4gIFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDEpOyAvLyBnZXQgWSBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XHJcbiAgXHRcdFx0di5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcclxuICBcdHNjb3BlLnBhbiA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbihkZWx0YVgsIGRlbHRhWSkge1xyXG4gIFx0XHRcdHZhciBjbGllbnRXaWR0aCA9IHNjb3BlLndvcmxkLndpZHRoKCksIGNsaWVudEhlaWdodCA9IHNjb3BlLndvcmxkLmhlaWdodCgpO1xyXG4gIFx0XHRcdGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgXHRcdFx0XHQvLyBwZXJzcGVjdGl2ZVxyXG4gIFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xyXG4gIFx0XHRcdFx0b2Zmc2V0LmNvcHkocG9zaXRpb24pLnN1YihzY29wZS50YXJnZXQpO1xyXG4gIFx0XHRcdFx0dmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xyXG4gIFx0XHRcdFx0Ly8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXHJcbiAgXHRcdFx0XHR0YXJnZXREaXN0YW5jZSAqPSBNYXRoLnRhbigoc2NvcGUub2JqZWN0LmZvdiAvIDIpICogTWF0aC5QSSAvIDE4MC4wKTtcclxuICBcdFx0XHRcdC8vIHdlIGFjdHVhbGx5IGRvbid0IHVzZSBzY3JlZW5XaWR0aCwgc2luY2UgcGVyc3BlY3RpdmUgY2FtZXJhIGlzIGZpeGVkIHRvIHNjcmVlbiBoZWlnaHRcclxuICBcdFx0XHRcdHBhbkxlZnQoMiAqIGRlbHRhWCAqIHRhcmdldERpc3RhbmNlIC8gY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHRcdHBhblVwKDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gIFx0XHRcdFx0Ly8gb3J0aG9ncmFwaGljXHJcbiAgXHRcdFx0XHRwYW5MZWZ0KGRlbHRhWCAqKHNjb3BlLm9iamVjdC5yaWdodC1zY29wZS5vYmplY3QubGVmdCkgLyBzY29wZS5vYmplY3Quem9vbSAvIGNsaWVudFdpZHRoLCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHRcdHBhblVwKGRlbHRhWSAqKHNjb3BlLm9iamVjdC50b3Atc2NvcGUub2JqZWN0LmJvdHRvbSkgLyBzY29wZS5vYmplY3Quem9vbSAvIGNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcclxuICBcdFx0XHRcdGNvbnNvbGUud2FybignV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlLXBhbiBkaXNhYmxlZC4nKTtcclxuICBcdFx0XHRcdHNjb3BlLmVuYWJsZVBhbiA9IGZhbHNlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHRmdW5jdGlvbiBkb2xseUluKGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAvPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGRvbGx5T3V0KGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAqPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICAgIC8qIEFjdGlvbnMgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGUoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVSb3RhdGUgJiYgZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgIHZhciBjbGllbnRXaWR0aCA9IHNjb3BlLndvcmxkLndpZHRoKCksIGNsaWVudEhlaWdodCA9IHNjb3BlLndvcmxkLmhlaWdodCgpO1xyXG4gICAgICAgIC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcclxuICAgICAgICByb3RhdGVMZWZ0KDIgKiBNYXRoLlBJICogZGF0YS5keCAvIGNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQpO1xyXG4gICAgICAgIC8vIHJvdGF0aW5nIHVwIGFuZCBkb3duIGFsb25nIHdob2xlIHNjcmVlbiBhdHRlbXB0cyB0byBnbyAzNjAsIGJ1dCBsaW1pdGVkIHRvIDE4MFxyXG4gICAgICAgIHJvdGF0ZVVwKDIgKiBNYXRoLlBJICogZGF0YS5keSAvIGNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkKTtcclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhbihldmVudCwgZGF0YSkge1xyXG4gICAgICBpZihzY29wZS5lbmFibGVkICYmIHNjb3BlLmVuYWJsZVBhbiAmJiBkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgc2NvcGUucGFuKGRhdGEuZHgsIGRhdGEuZHkpO1xyXG4gICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb2Zmc2V0RG9sbHkoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVab29tICYmIGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICBpZihkYXRhLmR5PjApIHtcclxuICAgICAgICAgIGRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH0gZWxzZSBpZihkYXRhLmR5PDApIHtcclxuICAgICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3aGVlbERvbGx5KGV2ZW50KSB7XHJcbiAgICAgIGlmKHNjb3BlLmVuYWJsZWQgJiYgc2NvcGUuZW5hYmxlWm9vbSkge1xyXG4gICAgICAgIGlmKGV2ZW50LmRlbHRhWT4wKSB7XHJcbiAgICAgICAgICBkb2xseU91dChnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGV2ZW50LmRlbHRhWTwwKSB7XHJcbiAgICAgICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFjdGlvbnMgPSB7XHJcbiAgICAgIHJvdGF0ZSxcclxuICAgICAgcGFuLFxyXG4gICAgICBvZmZzZXREb2xseSxcclxuICAgICAgd2hlZWxEb2xseVxyXG4gICAgfVxyXG5cclxuICBcdC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxyXG4gIFx0dGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHNldE1vdmluZyhtb3ZpbmcpIHtcclxuICAgIHRoaXMubW92aW5nID0gbW92aW5nO1xyXG4gIH1cclxuXHJcbiAgaXNNb3ZpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tb3Zpbmc7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9PcmJpdC5qcyIsImltcG9ydCB7JCxQREZKU30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5pbXBvcnQgUGRmIGZyb20gJy4vUGRmJztcclxuaW1wb3J0IEJhc2VNYXRoVXRpbHMgZnJvbSAnLi9CYXNlTWF0aFV0aWxzJztcclxuaW1wb3J0IEN1c3RvbUV2ZW50Q29udmVydGVyIGZyb20gJy4vQ3VzdG9tRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgUG9seVRhcmdldCBmcm9tICcuL3RhcmdldHMvUG9seVRhcmdldCc7XHJcblxyXG5pbXBvcnQgRmluZGVyIGZyb20gJy4vRmluZGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBkZkltYWdlIGV4dGVuZHMgSW1hZ2VCYXNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IsIHBkZiwgbikge1xyXG4gICAgc3VwZXIoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpO1xyXG5cclxuICAgIHRoaXMucXVlcnkgPSAnJztcclxuICAgIHRoaXMubiA9IG47XHJcbiAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgIHRoaXMudiA9IHt4OiAwLCB5OiAwLCB6OiAwLCBzZXQ6IGZ1bmN0aW9uKHgseSx6KSB7XHJcbiAgICAgIHRoaXMueD14OyB0aGlzLnk9eTsgdGhpcy56PXo7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSwgdHJhbnNmb3JtOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgIGNvbnN0IHg9bS5tWzBdWzBdKnRoaXMueCttLm1bMV1bMF0qdGhpcy55K20ubVsyXVswXSp0aGlzLnosXHJcbiAgICAgICAgICAgIHk9bS5tWzBdWzFdKnRoaXMueCttLm1bMV1bMV0qdGhpcy55K20ubVsyXVsxXSp0aGlzLnosXHJcbiAgICAgICAgICAgIHo9bS5tWzBdWzJdKnRoaXMueCttLm1bMF1bMl0qdGhpcy55K20ubVsyXVswXSp0aGlzLno7XHJcbiAgICAgIHRoaXMueD14O1xyXG4gICAgICB0aGlzLnk9eTtcclxuICAgICAgdGhpcy56PXo7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfX07XHJcbiAgICB0aGlzLm0gPSB7bTogW1sxLDAsMF0sWzAsMSwwXSxbMCwwLDFdXSwgc2V0OiBmdW5jdGlvbihtMDAsbTAxLG0wMixtMTAsbTExLG0xMixtMjAsbTIxLG0yMikge1xyXG4gICAgICB0aGlzLm09W1ttMDAsbTAxLG0wMl0sW20xMCxtMTEsbTEyXSxbbTIwLG0yMSxtMjJdXTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9fTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgIHRoaXMucGRmLmdldEhhbmRsZXIodGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkuXHJcbiAgICAgIHRoZW4oKCk9PiB0aGlzLnBkZi5nZXRIYW5kbGVyKHRoaXMuaW5pdC5iaW5kKHRoaXMpKSk7XHJcblxyXG4gICAgdGhpcy5jc3NMYXllclJlcXVlc3RzID0gW107XHJcbiAgfVxyXG5cclxuICBzZXRRdWVyeShxdWVyeSkge1xyXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5LnRyaW0oKTtcclxuICAgIGlmKHRoaXMudGV4dENvbnRlbnQpIHtcclxuICAgICAgdGhpcy5zZXRIaXRzKHRoaXMudGV4dENvbnRlbnQpO1xyXG4gICAgICAvLyB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlY3RTaXplKHIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiByWzJdLXJbMF0sXHJcbiAgICAgIGhlaWdodDogclszXS1yWzFdXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUG9seShtLCBwLCBzKSB7XHJcbiAgICBjb25zdCBwb2x5ID0gW10sIHYgPSB0aGlzLnY7XHJcbiAgICB2LnNldChwLngsIHAueSwgMSkudHJhbnNmb3JtKG0pO1xyXG4gICAgcG9seS5wdXNoKHt4OiB2LngsIHk6IHYueX0pO1xyXG4gICAgdi5zZXQocC54LCBwLnkrcy5oZWlnaHQsIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHYuc2V0KHAueCtzLndpZHRoLCBwLnkrcy5oZWlnaHQsIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHYuc2V0KHAueCtzLndpZHRoLCBwLnksIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHJldHVybiBwb2x5O1xyXG4gIH1cclxuXHJcbiAgZ2V0U2ltdWxhdGVkRG9jKCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShlLCBkb2MsIHgsIHkpIHtcclxuICAgIGlmKHRoaXMuZXZlbnRDb252ZXJ0ZXIpIHtcclxuICAgICAgdGhpcy5ldmVudENvbnZlcnRlci5jb252ZXJ0KGUsIHtkb2MsIHgsIHl9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEFubm90YXRpb25zKGFubm9zKSB7XHJcbiAgICBjb25zdCB0ID0gdGhpcy52aWV3cG9ydC50cmFuc2Zvcm0sIGh0bWxzID0gW10sIHIgPSAobik9PiAobioxMDArJycpLnN1YnN0cigwLDUpLFxyXG4gICAgICB0YXJnZXRzID0gW107XHJcbiAgICB0aGlzLm0uc2V0KFxyXG4gICAgICB0WzBdLHRbMV0sMCxcclxuICAgICAgdFsyXSx0WzNdLDAsXHJcbiAgICAgIHRbNF0sdFs1XSwxKTtcclxuXHJcbiAgICBmb3IobGV0IGFubm8gb2YgYW5ub3MpIHtcclxuICAgICAgaWYgKGFubm8uc3VidHlwZT09PSdMaW5rJyB8fCBhbm5vLnN1YnR5cGU9PT0nV2lkZ2V0Jykge1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBhbm5vLnJlY3QsXHJcbiAgICAgICAgICBhUG9zID0ge1xyXG4gICAgICAgICAgICB4OiByZWN0WzBdLFxyXG4gICAgICAgICAgICB5OiByZWN0WzFdXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYVN6ID0gdGhpcy5yZWN0U2l6ZShyZWN0KTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBuZXcgUG9seVRhcmdldCh0aGlzLmNyZWF0ZVBvbHkodGhpcy5tLCBhUG9zLCBhU3opLm1hcCgocCk9PiAoe3g6IHAueC90aGlzLnZpZXdwb3J0LndpZHRoLCB5OiAxLXAueS90aGlzLnZpZXdwb3J0LmhlaWdodH0pKSk7XHJcbiAgICAgICAgdGFyZ2V0LmFubm8gPSBhbm5vO1xyXG4gICAgICAgIHRhcmdldC5jYWxsYmFjayA9IHRoaXMuYW5ub0NsYi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRhcmdldHMucHVzaCh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHAgPSB0YXJnZXQucG9seTtcclxuICAgICAgICBodG1scy5wdXNoKCc8ZGl2IGNsYXNzPVwiZmIzZC1ibG9jayBmYjNkLWxpbmtcIiBzdHlsZT1cInRvcDogJytyKDEtcFsyXS55KSsnJTsgbGVmdDogJytyKHBbMF0ueCkrJyU7IHdpZHRoOiAnK3IocFsyXS54LXBbMF0ueCkrJyU7IGhlaWdodDogJytyKHBbMl0ueS1wWzBdLnkpKyclO1wiPjxhPjwvYT48L2Rpdj4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYodGFyZ2V0cy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5ldmVudENvbnZlcnRlciA9IG5ldyBDdXN0b21FdmVudENvbnZlcnRlcih0aGlzLnduZCwgdGhpcy5kb2MsIFBvbHlUYXJnZXQudGVzdCwgdGhpcy5nZXRTaW11bGF0ZWREb2MoKSk7XHJcbiAgICAgIGZvcihsZXQgdGFyZ2V0IG9mIHRhcmdldHMpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Q29udmVydGVyLmFkZEN1c3RvbSh0YXJnZXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmNzc0xheWVyID0ge2h0bWw6IGh0bWxzLmxlbmd0aD8gJzxwZGYtbGF5ZXI+JytodG1scy5qb2luKCcnKSsnPC9wZGYtbGF5ZXI+JzogdW5kZWZpbmVkfTtcclxuICAgIHRoaXMucmVzb2x2ZUNzc0xheWVyUmVxdWVzdHMoKTtcclxuICB9XHJcblxyXG4gIHJlc29sdmVDc3NMYXllclJlcXVlc3RzKCkge1xyXG4gICAgaWYodGhpcy5jc3NMYXllcikge1xyXG4gICAgICBmb3IobGV0IHIgb2YgdGhpcy5jc3NMYXllclJlcXVlc3RzKSB7XHJcbiAgICAgICAgcih0aGlzLmNzc0xheWVyLmh0bWw/IHRoaXMuY3NzTGF5ZXI6IHVuZGVmaW5lZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldENTU0xheWVyKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgdGhpcy5jc3NMYXllclJlcXVlc3RzLnB1c2gocmVzb2x2ZSk7XHJcbiAgICAgIHRoaXMucmVzb2x2ZUNzc0xheWVyUmVxdWVzdHMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0SGl0cyh0ZXh0Q29udGVudCkge1xyXG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xyXG4gICAgaWYodGhpcy5xdWVyeSE9PScnKSB7XHJcbiAgICAgIHRoaXMuZmluZGVyID0gbmV3IEZpbmRlcih0ZXh0Q29udGVudC5pdGVtcy5tYXAoKGl0ZW0pPT4gaXRlbS5zdHIpLCB0aGlzLnF1ZXJ5LCB7Y29udGV4dHM6IGZhbHNlfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXJIaXRzKCkge1xyXG4gICAgaWYodGhpcy5maW5kZXIpIHtcclxuICAgICAgY29uc3QgdmlldyA9IHRoaXMucGFnZS52aWV3LFxyXG4gICAgICAgIHRlc3RTeiA9ICQoJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHZpc2liaWxpdHk6IGhpZGRlbjtcIj48L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpLCB0ZXh0RGl2ID0gdGVzdFN6WzBdLFxyXG4gICAgICAgIGJhc2VPZmZzZXQgPSB0ZXN0U3oub2Zmc2V0KCkubGVmdDtcclxuICAgICAgZm9yKGxldCBoaXQgb2YgdGhpcy5maW5kZXIuZ2V0SGl0cygpKSB7XHJcbiAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy50ZXh0Q29udGVudC5pdGVtc1toaXQuaW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgdCA9IFBERkpTLlV0aWwudHJhbnNmb3JtKHRoaXMudmlld3BvcnQudHJhbnNmb3JtLCBpdGVtLnRyYW5zZm9ybSksXHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHRoaXMudGV4dENvbnRlbnQuc3R5bGVzW2l0ZW0uZm9udE5hbWVdLFxyXG4gICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmF0YW4yKHRbMV0sIHRbMF0pKyhzdHlsZS52ZXJ0aWNhbD8gTWF0aC5QSSAvIDI6IDApLFxyXG4gICAgICAgICAgICAgICAgZm9udEhlaWdodCA9IE1hdGguc3FydCgodFsyXSAqIHRbMl0pICsgKHRbM10gKiB0WzNdKSksXHJcbiAgICAgICAgICAgICAgICBmb250QXNjZW50ID0gc3R5bGUuYXNjZW50P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5hc2NlbnQgKiBmb250SGVpZ2h0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3R5bGUuZGVzY2VudD8gKDEgKyBzdHlsZS5kZXNjZW50KSAqIGZvbnRIZWlnaHQ6IGZvbnRIZWlnaHQpO1xyXG4gICAgICAgICAgdGVzdFN6Lmh0bWwoaXRlbS5zdHIuc3Vic3RyKDAsIGhpdC5vZmZzZXQpKyc8c3Bhbj4nK2l0ZW0uc3RyLnN1YnN0cihoaXQub2Zmc2V0LCBoaXQubGVuZ3RoKSsnPC9zcGFuPicraXRlbS5zdHIuc3Vic3RyKGhpdC5vZmZzZXQraGl0Lmxlbmd0aCkpO1xyXG5cclxuICAgICAgICAgIHRleHREaXYuc3R5bGUuZm9udFNpemUgPSBmb250SGVpZ2h0KydweCc7XHJcbiAgICAgICAgICB0ZXh0RGl2LnN0eWxlLmZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5O1xyXG5cclxuICAgICAgICAgIGNvbnN0IHRlc3RTcGFuID0gdGVzdFN6LmZpbmQoJ3NwYW4nKSxcclxuICAgICAgICAgICAgICBpd2lkdGggPSBzdHlsZS52ZXJ0aWNhbD8gaXRlbS5oZWlnaHQqdGhpcy52aWV3cG9ydC5zY2FsZTogaXRlbS53aWR0aCp0aGlzLnZpZXdwb3J0LnNjYWxlLFxyXG4gICAgICAgICAgICAgIHdpZHRoID0gdGVzdFN6LndpZHRoKCksXHJcbiAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXQgPSAodGVzdFNwYW4ub2Zmc2V0KCkubGVmdC1iYXNlT2Zmc2V0KS93aWR0aDtcclxuICAgICAgICAgIHRoaXMubS5zZXQoXHJcbiAgICAgICAgICAgIDEsMCwwLFxyXG4gICAgICAgICAgICAwLDEsMCxcclxuICAgICAgICAgICAgdFs0XStmb250QXNjZW50Kk1hdGguc2luKGFuZ2xlKSx0WzVdLWZvbnRBc2NlbnQqTWF0aC5jb3MoYW5nbGUpLDEpO1xyXG4gICAgICAgICAgbGV0IHBvbHkgPSB0aGlzLmNyZWF0ZVBvbHkodGhpcy5tLCB7eDogcmVsYXRpdmVPZmZzZXQqaXdpZHRoLCB5OiAwfSwge3dpZHRoOiBpd2lkdGgqdGVzdFNwYW4ud2lkdGgoKS93aWR0aCwgaGVpZ2h0OiB0ZXN0U3Bhbi5oZWlnaHQoKX0pO1xyXG4gICAgICAgICAgcG9seSA9IHBvbHkubWFwKChwKT0+ICh7eDogcC54L3RoaXMudmlld3BvcnQud2lkdGgsIHk6IDEtcC55L3RoaXMudmlld3BvcnQuaGVpZ2h0fSkpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJIaXQocG9seSk7XHJcbiAgICAgIH1cclxuICAgICAgdGVzdFN6LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYW5ub0NsYihlLCBkYXRhKSB7XHJcbiAgICBpZih0aGlzLmNvbnRleHQuZGlzcGF0Y2hFdmVudCkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ3BkZkFubm90YXRpb24nLFxyXG4gICAgICAgIGV2ZW50OiBlLFxyXG4gICAgICAgIGFubm90YXRpb246IGRhdGEudGFyZ2V0LmFubm9cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjVmlld3BvcnQoKSB7XHJcbiAgICBjb25zdCBzY2FsZSA9IEJhc2VNYXRoVXRpbHMuY2FsY1NjYWxlKHRoaXMuc2l6ZS53aWR0aCwgdGhpcy5zaXplLmhlaWdodCwgdGhpcy5yZXNXLCB0aGlzLnJlc0gpO1xyXG4gICAgaWYoIXRoaXMudmlld3BvcnQgfHwgTWF0aC5hYnModGhpcy52aWV3cG9ydC5zY2FsZS1zY2FsZSk+MWUtNCkge1xyXG4gICAgICB0aGlzLnZpZXdwb3J0ID0gdGhpcy5wYWdlLmdldFZpZXdwb3J0KHtzY2FsZX0pO1xyXG4gICAgICBpZih0aGlzLnR5cGUhPT0nZnVsbCcpIHtcclxuICAgICAgICBpZih0aGlzLnR5cGU9PT0ncmlnaHQnKSB7XHJcbiAgICAgICAgICB0aGlzLnZpZXdwb3J0Lm9mZnNldFggKz0gMC41KnRoaXMudmlld3BvcnQud2lkdGgqMS4wMDA1O1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydC50cmFuc2Zvcm1bNF0gLT0gMC41KnRoaXMudmlld3BvcnQud2lkdGgqMS4wMDA1O1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydC53aWR0aCAqPSAwLjUvMS4wMDA1O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudmlld3BvcnQud2lkdGggLz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZXNXID0gdGhpcy53aWR0aCA9IHRoaXMudmlld3BvcnQud2lkdGg7XHJcbiAgICAgIHRoaXMucmVzSCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy50eXBlID0gdGhpcy5wZGYuZ2V0UGFnZVR5cGUodGhpcy5uKTtcclxuICAgIHRoaXMucGRmLmdldFBhZ2UodGhpcy5uKS5cclxuICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcclxuICAgICAgICB0aGlzLnNpemUgPSBQZGYuZ2V0UGFnZVNpemUocGFnZSk7XHJcbiAgICAgICAgaWYodGhpcy50eXBlIT09J2Z1bGwnKSB7XHJcbiAgICAgICAgICB0aGlzLnNpemUud2lkdGggLz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFnZS5nZXRBbm5vdGF0aW9ucygpLlxyXG4gICAgICAgICAgdGhlbih0aGlzLnNldEFubm90YXRpb25zLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHBhZ2UuZ2V0VGV4dENvbnRlbnQoKS5cclxuICAgICAgICAgIHRoZW4odGhpcy5zZXRIaXRzLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0KCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH0pLlxyXG4gICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGxvYWQgUERGIHBhZ2U6ICcrKHRoaXMubisxKSk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRSZXNvbHV0aW9uKHJlcykge1xyXG4gICAgc3VwZXIuc2V0UmVzb2x1dGlvbihyZXMpO1xyXG4gICAgaWYodGhpcy5wYWdlKSB7XHJcbiAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoaGFuZGxlcikge1xyXG4gICAgaWYodGhpcy5wYWdlKSB7XHJcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMucHVzaEN0eCgpO1xyXG4gICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgICAgdGhpcy5yZW5kZXJUYXNrID0gdGhpcy5wYWdlLnJlbmRlcih7XHJcbiAgICAgICAgY2FudmFzQ29udGV4dDogdGhpcy5jdHgsXHJcbiAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnRcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucmVuZGVyVGFzay5vbkNvbnRpbnVlID0gKGNvbnRpbnVlUmVuZGVyKT0+IHtcclxuICAgICAgICBpZih0aGlzLnJlbmRlclBhdXNlKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnRpbnVlUmVuZGVyID0gY29udGludWVSZW5kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgY29udGludWVSZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMucmVuZGVyVGFzay5wcm9taXNlLlxyXG4gICAgICB0aGVuKCgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVySGl0cygpO1xyXG4gICAgICAgIHRoaXMucG9wQ3R4KCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgfSkuXHJcbiAgICAgIGNhdGNoKChlKT0+IHtcclxuICAgICAgICB0aGlzLnBvcEN0eCgpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKHRydWUpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBwYWdlcykge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnBhZ2VzID0gcGFnZXM7XHJcbiAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICBjb250YWluZXIuaHRtbChgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzZWFyY2hcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicXVlcnlcIj5cclxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImlucFF1ZXJ5XCIgdHlwZT1cInRleHRcIiBtYXhsZW5ndGg9XCIzMFwiIHZhbHVlPVwiXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdWx0c1wiPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYC5mYjNkUUZpbHRlcigpKTtcclxuICAgIHRoaXMucXVlcnkgPSBjb250YWluZXIuZmluZCgnLnF1ZXJ5IGlucHV0Jyk7XHJcbiAgICB0aGlzLnJlc3VsdHMgPSBjb250YWluZXIuZmluZCgnLnJlc3VsdHMnKTtcclxuICAgIHRoaXMuc3RhdHVzID0gY29udGFpbmVyLmZpbmQoJy5zdGF0dXMnKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBuYXZpZ2F0ZTogdGhpcy5uYXZpZ2F0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBkb1F1ZXJ5OiB0aGlzLmRvUXVlcnkuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnF1ZXJ5Lm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5kb1F1ZXJ5KTtcclxuICAgIHRoaXMucmVzdWx0cy5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnJlc3VsdHMub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5xdWVyeS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmRvUXVlcnkpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGUoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYodGhpcy5vbk5hdmlnYXRlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgaWYoIXRhcmdldC5oYXNDbGFzcygncmVzdWx0JykpIHtcclxuICAgICAgICBjb25zdCB0ID0gdGFyZ2V0LmZpbmQoJy5yZXN1bHQnKTtcclxuICAgICAgICBpZih0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgdGFyZ2V0ID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB3aGlsZSh0YXJnZXQubGVuZ3RoICYmICF0YXJnZXQuaGFzQ2xhc3MoJ3Jlc3VsdCcpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICQodGFyZ2V0WzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwYWdlID0gdGFyZ2V0LmF0dHIoJ2RhdGEnKTtcclxuICAgICAgaWYocGFnZSE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMub25OYXZpZ2F0ZShwYXJzZUludChwYWdlKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvUXVlcnkoKSB7XHJcbiAgICBpZih0aGlzLm9uUXVlcnkpIHtcclxuICAgICAgY29uc3QgcXVlcnlTdGFtcCA9IHRoaXMucXVlcnlTdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgaWYocXVlcnlTdGFtcCA9PT0gdGhpcy5xdWVyeVN0YW1wKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUXVlcnkodGhpcy5xdWVyeVswXS52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRSZXN1bHRzKHJlc3VsdHMsIGxhc3RQYWdlKSB7XHJcbiAgICBpZih0aGlzLnByZXZSZXN1bHRzLmxlbmd0aCAmJiByZXN1bHRzWzBdIT09dGhpcy5wcmV2UmVzdWx0c1swXSkge1xyXG4gICAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICAgIHRoaXMucmVzdWx0cy5odG1sKCcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGh0bWxzID0gW107XHJcbiAgICBmb3IobGV0IGk9dGhpcy5wcmV2UmVzdWx0cy5sZW5ndGg7IGk8cmVzdWx0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2ldO1xyXG4gICAgICBodG1scy5wdXNoKCc8ZGl2IGNsYXNzPVwicmVzdWx0XCIgZGF0YT1cIicrcmVzdWx0LnBhZ2UrJ1wiPicpO1xyXG4gICAgICAgIGh0bWxzLnB1c2goJzxhPicpO1xyXG4gICAgICAgICAgaHRtbHMucHVzaCgnPGRpdj4nK3Jlc3VsdC5jb250ZXh0cy5qb2luKCc8L2Rpdj48ZGl2PicpKyc8L2Rpdj4nKTtcclxuICAgICAgICBodG1scy5wdXNoKCc8L2E+Jyk7XHJcbiAgICAgIGh0bWxzLnB1c2goJzwvZGl2PicpO1xyXG4gICAgfVxyXG4gICAgJChodG1scy5qb2luKCcnKSkuYXBwZW5kVG8odGhpcy5yZXN1bHRzKTtcclxuICAgIHRoaXMucHJldlJlc3VsdHMgPSBbLi4ucmVzdWx0c107XHJcbiAgICBpZihsYXN0UGFnZT09PXVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnN0YXR1cy5odG1sKCcnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXR1cy5odG1sKChsYXN0UGFnZSsxKSsnIG9mICcrdGhpcy5wYWdlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9TZWFyY2guanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VCYXNlIGZyb20gJy4vSW1hZ2VCYXNlJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGljSW1hZ2UgZXh0ZW5kcyBJbWFnZUJhc2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvciwgc3JjKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHt9XHJcbiAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XHJcbiAgICB0aGlzLmJpbmRzLmltYWdlTG9hZCA9ICgpPT4ge1xyXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodDtcclxuICAgICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQvdGhpcy53aWR0aCp0aGlzLnJlc1c7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlckltYWdlKHRoaXMuaW1hZ2UpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYmluZHMuaW1hZ2VFcnJvciA9ICgpPT4ge1xyXG4gICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJOb3RGb3VuZFBhZ2UoKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH07XHJcbiAgICAkKHRoaXMuaW1hZ2UpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpLm9uKCdlcnJvcicsIHRoaXMuYmluZHMuaW1hZ2VFcnJvcik7XHJcbiAgICB0aGlzLmltYWdlLnNyYyA9IFV0aWxzLm5vcm1hbGl6ZVVybChzcmMpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgICQodGhpcy5pbWFnZSkub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpLm9mZignZXJyb3InLCB0aGlzLmJpbmRzLmltYWdlRXJyb3IpO1xyXG4gICAgdGhpcy5pbWFnZS5zcmMgPSAnJztcclxuICAgIGRlbGV0ZSB0aGlzLmltYWdlO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvU3RhdGljSW1hZ2UuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZUFuaW1hdG9yIHtcclxuICBjb25zdHJ1Y3RvcihpbWcsIHRpbGVzSG9yaXosIHRpbGVzVmVydCwgbnVtVGlsZXMsIHRpbGVEaXNwRHVyYXRpb24pIHtcclxuXHJcbiAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoKTtcclxuICAgIHRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgdGV4dHVyZS5pbWFnZSA9IGltZztcclxuICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICBcdC8vIG5vdGU6IHRleHR1cmUgcGFzc2VkIGJ5IHJlZmVyZW5jZSwgd2lsbCBiZSB1cGRhdGVkIGJ5IHRoZSB1cGRhdGUgZnVuY3Rpb24uXHJcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gIFx0dGhpcy50aWxlc0hvcml6b250YWwgPSB0aWxlc0hvcml6O1xyXG4gIFx0dGhpcy50aWxlc1ZlcnRpY2FsID0gdGlsZXNWZXJ0O1xyXG4gIFx0Ly8gaG93IG1hbnkgaW1hZ2VzIGRvZXMgdGhpcyBzcHJpdGVzaGVldCBjb250YWluP1xyXG4gIFx0Ly8gIHVzdWFsbHkgZXF1YWxzIHRpbGVzSG9yaXogKiB0aWxlc1ZlcnQsIGJ1dCBub3QgbmVjZXNzYXJpbHksXHJcbiAgXHQvLyAgaWYgdGhlcmUgYXQgYmxhbmsgdGlsZXMgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc3ByaXRlc2hlZXQuXHJcbiAgXHR0aGlzLm51bWJlck9mVGlsZXMgPSBudW1UaWxlcztcclxuICBcdHRleHR1cmUucmVwZWF0LnNldCgxL3RoaXMudGlsZXNIb3Jpem9udGFsLCAxL3RoaXMudGlsZXNWZXJ0aWNhbCk7XHJcblxyXG4gIFx0Ly8gaG93IGxvbmcgc2hvdWxkIGVhY2ggaW1hZ2UgYmUgZGlzcGxheWVkP1xyXG4gIFx0dGhpcy50aWxlRGlzcGxheUR1cmF0aW9uID0gdGlsZURpc3BEdXJhdGlvbjtcclxuXHJcbiAgXHQvLyBob3cgbG9uZyBoYXMgdGhlIGN1cnJlbnQgaW1hZ2UgYmVlbiBkaXNwbGF5ZWQ/XHJcbiAgXHR0aGlzLmN1cnJlbnREaXNwbGF5VGltZSA9IDA7XHJcblxyXG4gIFx0Ly8gd2hpY2ggaW1hZ2UgaXMgY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZD9cclxuICBcdHRoaXMuY3VycmVudFRpbGUgPSAwO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKG1pbGxpU2VjKSB7XHJcbiAgICB0aGlzLmN1cnJlbnREaXNwbGF5VGltZSArPSBtaWxsaVNlYztcclxuICAgIHdoaWxlKHRoaXMuY3VycmVudERpc3BsYXlUaW1lID4gdGhpcy50aWxlRGlzcGxheUR1cmF0aW9uKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudERpc3BsYXlUaW1lIC09IHRoaXMudGlsZURpc3BsYXlEdXJhdGlvbjtcclxuICAgICAgKyt0aGlzLmN1cnJlbnRUaWxlO1xyXG4gICAgICBpZih0aGlzLmN1cnJlbnRUaWxlID09IHRoaXMubnVtYmVyT2ZUaWxlcylcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaWxlID0gMDtcclxuICAgICAgdmFyIGN1cnJlbnRDb2x1bW4gPSB0aGlzLmN1cnJlbnRUaWxlJXRoaXMudGlsZXNIb3Jpem9udGFsO1xyXG4gICAgICB0aGlzLnRleHR1cmUub2Zmc2V0LnggPSBjdXJyZW50Q29sdW1uL3RoaXMudGlsZXNIb3Jpem9udGFsO1xyXG4gICAgICB2YXIgY3VycmVudFJvdyA9IE1hdGguZmxvb3IodGhpcy5jdXJyZW50VGlsZS90aGlzLnRpbGVzSG9yaXpvbnRhbCk7XHJcbiAgICAgIHRoaXMudGV4dHVyZS5vZmZzZXQueSA9IGN1cnJlbnRSb3cvdGhpcy50aWxlc1ZlcnRpY2FsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGNvbnN0IGltZyA9IHRoaXMudGV4dHVyZS5pbWFnZTtcclxuICAgIGltZy5oZWlnaHQgPSBpbWcud2lkdGggPSAwO1xyXG4gICAgdGhpcy50ZXh0dXJlLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGV4dHVyZUFuaW1hdG9yLmpzIiwiaW1wb3J0IHtUSFJFRSwgJH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuaW1wb3J0IE1vdXNlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9Nb3VzZUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IFRocmVlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9UaHJlZUV2ZW50Q29udmVydGVyJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBNb3VzZUV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIHZpc3VhbFdvcmxkLCB0ZXN0KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYywgdmlzdWFsV29ybGQuZWxlbWVudCk7XHJcbiAgICBVdGlscy5leHRlbmRzKHRoaXMsIG5ldyBUaHJlZUV2ZW50Q29udmVydGVyKHZpc3VhbFdvcmxkLCB0ZXN0KSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiBvYmplY3Qub2JqZWN0LnVzZXJEYXRhLm1vdXNlQ2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBzZXRDb29yZHNGcm9tRXZlbnQoZSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHRoaXMuY29vcmRzLnggPSAoKGUucGFnZVgtb2Zmc2V0LmxlZnQpL2pFbGVtZW50LndpZHRoKCkpKjItMTtcclxuICAgIHRoaXMuY29vcmRzLnkgPSAtKChlLnBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcbmltcG9ydCBUb3VjaEV2ZW50Q29udmVydGVyIGZyb20gJy4vVG91Y2hFdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBUaHJlZUV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVFdmVudENvbnZlcnRlcic7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIGV4dGVuZHMgVG91Y2hFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCB2aXN1YWxXb3JsZCwgdGVzdCkge1xyXG4gICAgc3VwZXIod25kLCBkb2MsIHZpc3VhbFdvcmxkLmVsZW1lbnQpO1xyXG4gICAgVXRpbHMuZXh0ZW5kcyh0aGlzLCBuZXcgVGhyZWVFdmVudENvbnZlcnRlcih2aXN1YWxXb3JsZCwgdGVzdCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0Lm9iamVjdC51c2VyRGF0YS50b3VjaENhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29vcmRzRnJvbUV2ZW50KGUpIHtcclxuICAgIGNvbnN0IGpFbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpLCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKSxcclxuICAgICAgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcywgdG91Y2ggPSB0b3VjaGVzLmxlbmd0aD8gdG91Y2hlc1swXTogKHRoaXMubGFzdFRvdWNoZXMgfHwgW3twYWdlWDogMCwgcGFnZVk6IDB9XSlbMF0sXHJcbiAgICAgIHBhZ2VYID0gdG91Y2gucGFnZVgsIHBhZ2VZID0gdG91Y2gucGFnZVk7XHJcbiAgICB0aGlzLmxhc3RUb3VjaGVzID0gdG91Y2hlcy5sZW5ndGg/IHRvdWNoZXM6IHRoaXMubGFzdFRvdWNoZXM7XHJcbiAgICB0aGlzLmNvb3Jkcy54ID0gKChwYWdlWC1vZmZzZXQubGVmdCkvakVsZW1lbnQud2lkdGgoKSkqMi0xO1xyXG4gICAgdGhpcy5jb29yZHMueSA9IC0oKHBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlVG91Y2hFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUZhY3RvcnkgZnJvbSAnLi9JbWFnZUZhY3RvcnknO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGh1bWJuYWlscyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNvbnRhaW5lciwgdGh1bWJuYWlsc0NsYiwgc2l6ZSwgcHJvcHM9e2tXdG9IOiAyMTAvMjk3fSkge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnAgPSBwcm9wcztcclxuICAgIHRoaXMudGh1bWJuYWlsc0NsYiA9IHRodW1ibmFpbHNDbGI7XHJcbiAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgdGhpcy5xdWV1ZSA9IHtmaXJzdDogMCwgbGVuOiAwfTtcclxuICAgIHRoaXMuY2FudmFzID0gR3JhcGhVdGlscy5jcmVhdGVDYW52YXMoKTtcclxuICAgIHRoaXMuaW1hZ2VGYWN0b3J5ID0gbmV3IEltYWdlRmFjdG9yeSh7XHJcbiAgICAgIC4uLmNvbnRleHQsXHJcbiAgICAgIHJlbmRlckNhbnZhczogdGhpcy5jYW52YXMsXHJcbiAgICAgIHJlbmRlckNhbnZhc0N0eDogdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnRodW1ibmFpbHMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHNpemU7ICsraSkge1xyXG4gICAgICBjb25zdCBpbmZvID0gdGhpcy50aHVtYm5haWxzQ2xiKGkpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHMucHVzaCh7XHJcbiAgICAgICAgLi4uaW5mbyxcclxuICAgICAgICBpbmRleDogaSxcclxuICAgICAgICBsb2FkZWQ6IGluZm8udHlwZT09PSd0aHVtYm5haWwtaW1hZ2UnLFxyXG4gICAgICAgIGhlYWRpbmc6IG51bGwsXHJcbiAgICAgICAgdGh1bWJuYWlsOiBudWxsLFxyXG4gICAgICAgIHRpdGxlOiBpbmZvLnRpdGxlIHx8IGlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgdXBkYXRlOiB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBuYXZpZ2F0ZTogKGUpPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgIGxldCBub2RlID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICB3aGlsZShub2RlICYmICFub2RlLmRhdGFUaHVtYm5haWwpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLmRhdGFUaHVtYm5haWwuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuY29udGFpbmVyLm9uKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZShlbmFibGUpIHtcclxuICAgIHRoaXMuZW5hYmxlID0gZW5hYmxlO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdhJykub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5jb250YWluZXIub2ZmKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuY2FudmFzLndpZHRoID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmNhbnZhcztcclxuICB9XHJcblxyXG4gIHNldExvYWRRdWV1ZShmaXJzdCwgbGVuKSB7XHJcbiAgICBmaXJzdCA9IE1hdGgubWluKGZpcnN0LCB0aGlzLnNpemUtMSk7XHJcbiAgICBsZW4gPSBNYXRoLm1pbihsZW4sIHRoaXMuc2l6ZS1maXJzdCk7XHJcbiAgICB0aGlzLnF1ZXVlID0ge2ZpcnN0LCBsZW59O1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHRoaXMudXBkYXRlKCkpO1xyXG4gIH1cclxuXHJcbiAgbG9hZCh0aHVtYm5haWwpIHtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5pbWFnZUZhY3RvcnkuYnVpbGQodGh1bWJuYWlsLCB0aHVtYm5haWwubnVtYmVyPT09dW5kZWZpbmVkPyB0aHVtYm5haWwuaW5kZXg6IHRodW1ibmFpbC5udW1iZXIsIHRoaXMucC5rV3RvSCozMDAsIDMwMCk7XHJcbiAgICB3cmFwcGVyLm9uQ2hhbmdlID0gKGNhbnZhcyk9PiB7XHJcbiAgICAgIHRoaXMuc2V0SW1hZ2UodGh1bWJuYWlsLCBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7XHJcbiAgICAgIHRodW1ibmFpbC5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICB3cmFwcGVyLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnVwZGF0ZSgpKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRBY3RpdmUoKSB7XHJcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCgpLCBsYXN0ID0gZmlyc3QgKyB0aGlzLmNvbnRhaW5lci5oZWlnaHQoKSwgcmVzID0gW107XHJcbiAgICBmb3IobGV0IHRodW1ibmFpbCBvZiB0aGlzLnRodW1ibmFpbHMpIHtcclxuICAgICAgaWYoTWF0aC5tYXgodGh1bWJuYWlsLmZpcnN0LCBmaXJzdCk8TWF0aC5taW4odGh1bWJuYWlsLmxhc3QsIGxhc3QpKSB7XHJcbiAgICAgICAgcmVzLnB1c2godGh1bWJuYWlsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmKCF0aGlzLmxvYWRpbmcgJiYgdGhpcy5jYW52YXMpIHtcclxuICAgICAgaWYodGhpcy5lbmFibGUpIHtcclxuICAgICAgICBpZighdGhpcy5idWlsdCkge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcclxuICAgICAgICBmb3IobGV0IHRodW1ibmFpbCBvZiBhY3RpdmUpIHtcclxuICAgICAgICAgIGlmKCF0aHVtYm5haWwubG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZCh0aHVtYm5haWwpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoIXRoaXMubG9hZGluZykge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IHRoaXMucXVldWUuZmlyc3Q7IGk8dGhpcy5xdWV1ZS5maXJzdCt0aGlzLnF1ZXVlLmxlbjsgKytpKSB7XHJcbiAgICAgICAgICBjb25zdCB0ID0gdGhpcy50aHVtYm5haWxzW2ldO1xyXG4gICAgICAgICAgaWYoIXQubG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZCh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRJbWFnZSh0aHVtYm5haWwsIGltZykge1xyXG4gICAgY29uc3QgdHJpZ2dlciA9IHRodW1ibmFpbC5pbWchPT1pbWc7XHJcbiAgICB0aHVtYm5haWwuaW1nID0gaW1nO1xyXG4gICAgaWYodGh1bWJuYWlsLnRodW1ibmFpbCkge1xyXG4gICAgICB0aHVtYm5haWwudGh1bWJuYWlsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIFsndXJsKFxcJycsIGltZywnXFwnKSddLmpvaW4oJycpKTtcclxuICAgICAgdGh1bWJuYWlsLnRodW1ibmFpbC5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xyXG4gICAgfVxyXG4gICAgaWYodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLmNvbnRhaW5lci50cmlnZ2VyKCdmYjNkLnRodW1ibmFpbHMudGh1bWJuYWlsTG9hZGVkJywgW3RodW1ibmFpbF0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgZWxlbWVudHMgPSBbJzxkaXYgY2xhc3M9XCJ0aHVtYm5haWxzXCI+J11cclxuICAgIGZvcihsZXQgaT0wOyBpPHRoaXMuc2l6ZTsgKytpKSB7XHJcbiAgICAgIGVsZW1lbnRzLnB1c2goWyc8ZGl2IGNsYXNzPVwiaXRlbVwiPjxhPjxkaXYgY2xhc3M9XCJ0aHVtYm5haWwgbG9hZGluZ1wiIHN0eWxlPVwicGFkZGluZy10b3A6JytNYXRoLnJvdW5kKDEwMC90aGlzLnAua1d0b0gpKyclO1wiPjwvZGl2PjwvYT48ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPjxhIHRpdGxlPVwiJywgaSsxLCdcIj4nLCBpKzEsICc8L2E+PC9kaXY+PC9kaXY+J10uam9pbignJykpO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudHMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoZWxlbWVudHMuam9pbignJykpO1xyXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuaXRlbScpLCBiYXNlID0gdGhpcy5jb250YWluZXIuZmluZCgnLnRodW1ibmFpbHMnKS5vZmZzZXQoKS50b3A7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxpdGVtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCBpdGVtID0gJChpdGVtc1tpXSk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5oZWFkaW5nID0gaXRlbS5maW5kKCcuaGVhZGluZycpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHNbaV0udGh1bWJuYWlsID0gaXRlbS5maW5kKCcudGh1bWJuYWlsJyk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5maXJzdCA9IGl0ZW0ub2Zmc2V0KCkudG9wLWJhc2U7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5sYXN0ID0gdGhpcy50aHVtYm5haWxzW2ldLmZpcnN0K2l0ZW0uaGVpZ2h0KCk7XHJcbiAgICAgIGlmKHRoaXMudGh1bWJuYWlsc1tpXS5sb2FkZWQpIHtcclxuICAgICAgICB0aGlzLnNldEltYWdlKHRoaXMudGh1bWJuYWlsc1tpXSwgdGhpcy50aHVtYm5haWxzW2ldLmltZyB8fCB0aGlzLnRodW1ibmFpbHNbaV0uc3JjKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhcyA9IGl0ZW0uZmluZCgnYScpO1xyXG4gICAgICBmb3IobGV0IGo9MDsgajxhcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGNvbnN0IGEgPSBhc1tqXTtcclxuICAgICAgICBhLmRhdGFUaHVtYm5haWwgPSB0aGlzLnRodW1ibmFpbHNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJ2EnKS5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICAgIHRoaXMuYnVpbHQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGh1bWJuYWlscy5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvdWNoQ29udmVydGVyIGV4dGVuZHMgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgZWxlbWVudCkge1xyXG4gICAgc3VwZXIod25kLCBkb2MpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBjb252ZXJ0OiB0aGlzLmNvbnZlcnQuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vbigndG91Y2hzdGFydCB0b3VjaG1vdmUnLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub24oJ3RvdWNoZW5kJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub2ZmKCd0b3VjaHN0YXJ0IHRvdWNobW92ZScsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ3RvdWNoZW5kJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVG91Y2hFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyTWVzc2FnZUNvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3KSB7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5zaG93TWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5tZXNzYWdlID0gJyc7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBzZXRFcnJvcih0ZXh0KSB7XHJcbiAgICB0aGlzLnNob3dNZXNzYWdlID0gdHJ1ZTtcclxuICAgIHRoaXMubWVzc2FnZSA9IFsnPGRpdiBjbGFzcz1cInRleHQgZXJyb3JcIj4nLCB0ZXh0LCAnPC9kaXY+J10uam9pbignJyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZih0aGlzLnZpZXcpIHtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRVc2VyTWVzc2FnZScsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5zaG93TWVzc2FnZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd0eHRVc2VyTWVzc2FnZScsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5tZXNzYWdlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Vc2VyTWVzc2FnZUNvbnRyb2xsZXIuanMiLCJpbXBvcnQgeyQsIHRyfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXcge1xyXG5cclxuICBzdGF0aWMgaW5pdFVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2BcclxuICAgIDwhRE9DVFlQRSBodG1sPlxyXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XHJcbiAgICAgIDxoZWFkPlxyXG4gICAgICAgIDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxyXG4gICAgICA8L2hlYWQ+XHJcbiAgICAgIDxib2R5IHN0eWxlPVwiaGVpZ2h0OiAxMDB2aFwiPlxyXG4gICAgICA8L2JvZHk+XHJcbiAgICA8L2h0bWw+XHJcbiAgYF0sIHt0eXBlIDogJ3RleHQvaHRtbCd9KSk7XHJcblxyXG4gIHN0YXRpYyBsaW5rU3RhdGVIYW5kbGVycyA9IHtcclxuICAgIHZpc2libGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2hpZGRlbicsICF2YWx1ZSksXHJcbiAgICBhY3RpdmU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2FjdGl2ZScsIHZhbHVlKSxcclxuICAgIGVuYWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnZGlzYWJsZWQnLCAhdmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIHdpZGdldFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgYWN0aXZlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdhY3RpdmUnLCB2YWx1ZSksXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2Rpc2FibGVkJywgIXZhbHVlKVxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBpbnB1dFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgdmFsdWU6IChjdHJsLCB2YWx1ZSk9PiBjdHJsWzBdLnZhbHVlID0gdmFsdWUsXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmF0dHJpYnV0ZVByb3BlcnR5KGN0cmwsICdkaXNhYmxlZCcsICF2YWx1ZSlcclxuICB9O1xyXG5cclxuICBzdGF0aWMgdGV4dFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgdmFsdWU6IChjdHJsLCB2YWx1ZSk9PiBjdHJsLmh0bWwodmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGNsYXNzUHJvcGVydHkoY3RybCwgY2xhc3NOYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgY3RybC5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGN0cmwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBhdHRyaWJ1dGVQcm9wZXJ0eShjdHJsLCBhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgY3RybC5hdHRyKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjdHJsLnJlbW92ZUF0dHIoYXR0cmlidXRlTmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsbEhhbmRsZXJzKGhhbmRsZXJzLCBpZCwgZSwgZGF0YSkge1xyXG4gICAgZm9yKGxldCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XHJcbiAgICAgIGlmKGhhbmRsZXJbaWRdKSB7XHJcbiAgICAgICAgaGFuZGxlcltpZF0oZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihoYW5kbGVyLmhhbmRsZURlZmF1bHQpIHtcclxuICAgICAgICBoYW5kbGVyLmhhbmRsZURlZmF1bHQoaWQsIGUsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlRXZlbnQoaWQsIGdldEhhbmRsZXJzLCBlLCBkYXRhKSB7XHJcbiAgICBWaWV3LmNhbGxIYW5kbGVycyhnZXRIYW5kbGVycyhpZCksIGlkLCBlLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYW5kbGVMaW5rRXZlbnQoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYoIXRoaXMuY3RybC5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xyXG4gICAgICBWaWV3LmhhbmRsZUV2ZW50KHRoaXMuaWQsIHRoaXMuZ2V0SGFuZGxlcnMsIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUlucHV0RXZlbnQoZSkge1xyXG4gICAgVmlldy5oYW5kbGVFdmVudCh0aGlzLmlkLCB0aGlzLmdldEhhbmRsZXJzLCBlLCBlLnRhcmdldC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlRm9ybUV2ZW50KGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIFZpZXcuaGFuZGxlRXZlbnQodGhpcy5pZCwgdGhpcy5nZXRIYW5kbGVycywgZSk7XHJcbiAgfVxyXG5cclxuICAvLyB2aXJ0dWFsIGZ1bmN0aW9ucyB7XHJcbiAgZ2V0TGlua3MoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFdpZGdldHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldElucHV0cygpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgZ2V0SGFuZGxlcnMoaWQpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzO1xyXG4gIH1cclxuICAvLyB9XHJcblxyXG4gIGNhbGxMYXRlcihoYW5kbGVycywgaWQsIGUsIGRhdGEsIG1zKSB7XHJcbiAgICB0aGlzLnBlbmRpbmdzW2lkXSA9IHtcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgfTtcclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBwZW5kaW5nID0gdGhpcy5wZW5kaW5nc1tpZF07XHJcbiAgICAgIGlmKHBlbmRpbmcgJiYgdGltZXN0YW1wLXBlbmRpbmcudGltZXN0YW1wPj1tcykge1xyXG4gICAgICAgIFZpZXcuY2FsbEhhbmRsZXJzKGhhbmRsZXJzLCBpZCwgZSwgZGF0YSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ3NbaWRdO1xyXG4gICAgICB9XHJcbiAgICB9LCBtcyk7XHJcbiAgfVxyXG5cclxuICAvLyBsb2FkRmlsZXModXJscywgcmVhZHksIGZhaWx1cmUpIHtcclxuICAvLyAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgLy8gICBmb3IobGV0IHVybCBvZiB1cmxzKSB7XHJcbiAgLy8gICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgLy8gICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gIC8vICAgICAgICAgJC5nZXQodXJsLCAocmVzKT0+IHtcclxuICAvLyAgICAgICAgICAgcmVhZHkocmVzLCB1cmwpO1xyXG4gIC8vICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgLy8gICAgICAgICB9KS5mYWlsKChyZXMpPT4ge1xyXG4gIC8vICAgICAgICAgICBpZihmYWlsdXJlICYmIGZhaWx1cmUocmVzLCB1cmwpKSB7XHJcbiAgLy8gICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gIC8vICAgICAgICAgICB9XHJcbiAgLy8gICAgICAgICAgIGVsc2Uge1xyXG4gIC8vICAgICAgICAgICAgIHJlamVjdChyZXMpO1xyXG4gIC8vICAgICAgICAgICB9XHJcbiAgLy8gICAgICAgICB9KTtcclxuICAvLyAgICAgICB9KTtcclxuICAvLyAgICAgfSk7XHJcbiAgLy8gICB9XHJcbiAgLy8gICByZXR1cm4gZG9uZTtcclxuICAvLyB9XHJcblxyXG4gIGxvYWRGaWxlcyh1cmxzLCBmaWxlcykge1xyXG4gICAgY29uc3QgdGFza3MgPSBbXTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh1cmxzKSkge1xyXG4gICAgICBmaWxlc1tuYW1lXSA9IFtdO1xyXG4gICAgICBmb3IobGV0IHVybCBvZiB1cmxzW25hbWVdKSB7XHJcbiAgICAgICAgdGFza3MucHVzaChcclxuICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gICAgICAgICAgICAkLmdldCh1cmwsIChkYXRhKT0+IHtcclxuICAgICAgICAgICAgICBmaWxlc1tuYW1lXS5wdXNoKHt1cmwsIGRhdGF9KTtcclxuICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pLmZhaWwoKHJlcyk9PiB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KHJlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFza3MpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Um9vdFVybCgpIHtcclxuICAgIHJldHVybiBsb2NhdGlvbi5vcmlnaW4rJy8nO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q3VycmVudFVybCgpIHtcclxuICAgIHJldHVybiBsb2NhdGlvbi5ocmVmLnN1YnN0cigwLCBsb2NhdGlvbi5ocmVmLmxhc3RJbmRleE9mKCcvJykrMSk7XHJcbiAgfVxyXG5cclxuICB1cmxSZXNvbHZlcihiYXNlVXJsLCB1cmwpIHtcclxuICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XHJcbiAgICBpZih1cmwuY2hhckF0KDApPT09Jy8nKSB7XHJcbiAgICAgIGJhc2VVcmwgPSB0aGlzLmdldFJvb3RVcmwoKTtcclxuICAgICAgdXJsID0gdXJsLnN1YnN0cigxKTtcclxuICAgIH1cclxuICAgIGlmKCFiYXNlVXJsLm1hdGNoKC9eaHR0cHN7MCwxfTovaSkpIHtcclxuICAgICAgYmFzZVVybCA9IHRoaXMudXJsUmVzb2x2ZXIodGhpcy5nZXRDdXJyZW50VXJsKCksIGJhc2VVcmwpO1xyXG4gICAgfVxyXG4gICAgaWYoIXVybC5tYXRjaCgvXihkYXRhfGJsb2J8aHR0cHxodHRwcyk6L2kpKSB7XHJcbiAgICAgIGJhc2VVcmwgPSBiYXNlVXJsLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxuICAgICAgY29uc3QgcCA9IGJhc2VVcmwubGFzdEluZGV4T2YoJy8nKTtcclxuICAgICAgdXJsID0gKH5wPyBiYXNlVXJsLnN1YnN0cigwLCBwKzEpOiAnJykrdXJsO1xyXG5cclxuICAgICAgY29uc3QgcGFydHMgPSB1cmwuc3BsaXQoJy8nKTtcclxuICAgICAgdXJsID0gW107XHJcbiAgICAgIGZvcihsZXQgcGFydCBvZiBwYXJ0cykge1xyXG4gICAgICAgIGlmKHBhcnQ9PT0nLicpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihwYXJ0PT09Jy4uJykge1xyXG4gICAgICAgICAgaWYodXJsLmxlbmd0aD4zKSB7XHJcbiAgICAgICAgICAgIHVybC5wb3AoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB1cmwucHVzaChwYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdXJsID0gdXJsLmpvaW4oJy8nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJsO1xyXG4gIH1cclxuXHJcbiAgb2JqVG9BdHRyc1N0cihvKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhvKSkge1xyXG4gICAgICByZXMucHVzaChbbmFtZSwgJz1cIicsIG9bbmFtZV0sICdcIiddLmpvaW4oJycpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXMuam9pbignICcpO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tJZnJhbWVTaXplKCkge1xyXG4gICAgaWYodGhpcy5mcmFtZSkge1xyXG4gICAgICBpZihNYXRoLmFicyh0aGlzLmZyYW1lLndpZHRoLXRoaXMucGFyZW50Q29udGFpbmVyLndpZHRoKCkpPjEgfHwgTWF0aC5hYnModGhpcy5mcmFtZS5oZWlnaHQtdGhpcy5wYXJlbnRDb250YWluZXIuaGVpZ2h0KCkpPjEpIHtcclxuICAgICAgICB0aGlzLm9uUmVzaXplKCk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0VGltZW91dCh0aGlzLmNoZWNrSWZyYW1lU2l6ZS5iaW5kKHRoaXMpLCAyNTApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICB0aGlzLmZyYW1lLndpZHRoID0gdGhpcy5wYXJlbnRDb250YWluZXIud2lkdGgoKTtcclxuICAgIHRoaXMuZnJhbWUuaGVpZ2h0ID0gdGhpcy5wYXJlbnRDb250YWluZXIuaGVpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICB0cmFuc2xhdGUoaHRtbCkge1xyXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPFxcJHRyPiguKik8XFwvXFwkdHI+L2dpLCAoczAsczEpPT4gdHIoczEpKTtcclxuICB9XHJcblxyXG4gIGZpcmVMaW5rc09uTG9hZEV2ZW50KCkge1xyXG4gICAgaWYodGhpcy50ZW1wbGF0ZU9iamVjdCAmJiB0aGlzLnRlbXBsYXRlT2JqZWN0LmxpbmtMb2FkZWQpIHtcclxuICAgICAgbGV0IGxvYWRlZCA9IHRydWU7XHJcbiAgICAgIGZvcihsZXQgakxpbmsgb2YgdGhpcy5qTGlua3MpIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gakxpbmtbMF07XHJcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1nLm9uZXJyb3IgPSAoKT0+IHRoaXMudGVtcGxhdGVPYmplY3QubGlua0xvYWRlZChsaW5rKTtcclxuICAgICAgICBpbWcuc3JjID0gbGluay5ocmVmO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwYXJlbnRDb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGU9e30pIHtcclxuICAgIHRoaXMucGVuZGluZ3MgPSB7fTtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uUmVzaXplOiB0aGlzLm9uUmVzaXplLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLnBhcmVudENvbnRhaW5lciA9ICQocGFyZW50Q29udGFpbmVyKTtcclxuICAgIHRoaXMuaXNJT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xyXG4gICAgdGhpcy5pc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7Ly8gJiYgfm5hdmlnYXRvci51c2VyQWdlbnQuc2VhcmNoKCdWZXJzaW9uLzE0LjEnKTtcclxuICAgIGNvbnN0IGluaXRVcmwgPSB0aGlzLmlzU2FmYXJpPyBWaWV3LmluaXRVcmw6IHVuZGVmaW5lZDtcclxuICAgIHRoaXMucGFyZW50Q29udGFpbmVyLmh0bWwoJzxpZnJhbWUgdGl0bGU9XCJWaWV3XCIgc3R5bGU9XCJib3JkZXI6IDA7JysodGhpcy5pc0lPUz8gJyc6ICcgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJScpKydcIiAnKyhpbml0VXJsPyAnIHNyYz1cIicraW5pdFVybCsnXCInOiAnJykrJyBzY3JvbGxpbmc9XCJub1wiPjwvaWZyYW1lPicpO1xyXG5cclxuICAgIHRoaXMuZnJhbWUgPSB0aGlzLnBhcmVudENvbnRhaW5lci5maW5kKCdpZnJhbWUnKVswXTtcclxuICAgIGNvbnN0IGJ1aWxkID0gKCk9PiB7XHJcbiAgICAgIGlmKHRoaXMuaXNJT1MpIHtcclxuICAgICAgICAkKHRoaXMucGFyZW50Q29udGFpbmVyWzBdLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpLm9uKCdyZXNpemUnLCB0aGlzLmJpbmRzLm9uUmVzaXplKTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLmNoZWNrSWZyYW1lU2l6ZS5iaW5kKHRoaXMpLCAyNTApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmNvbnRhaW5lciA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSk7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLmNzcygnbWFyZ2luJywgJzAnKTtcclxuICAgICAgdGhpcy5oZWFkID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5oZWFkKTtcclxuICAgICAgdGhpcy5vbkxvYWQgPSBvbkxvYWQ7XHJcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcclxuICAgICAgdGhpcy5zdHlsZURhdGEgPSB7fTtcclxuXHJcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRlbXBsYXRlLmh0bWw/IHRlbXBsYXRlLnNjcmlwdDogdGhpcy5nZXRUZW1wbGF0ZSgpLnNjcmlwdDtcclxuICAgICAgbGV0IHVybHMsIGZpbGVzLCBsaW5rcywgdGVtcGxhdGVOYW1lO1xyXG4gICAgICBpZih0eXBlb2YgdGVtcGxhdGU9PT0nZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdXJscyA9IHt9O1xyXG4gICAgICAgIGZpbGVzID0gdGVtcGxhdGUoKTtcclxuICAgICAgICBsaW5rcyA9IFtdO1xyXG4gICAgICAgIHRlbXBsYXRlTmFtZSA9IGZpbGVzLm5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbGlua3MgPSB0ZW1wbGF0ZS5saW5rcyB8fCB0aGlzLmdldFRlbXBsYXRlKCkubGlua3M7XHJcbiAgICAgICAgdXJscyA9IHtcclxuICAgICAgICAgIHN0eWxlczogdGVtcGxhdGUuc3R5bGVzIHx8IHRoaXMuZ2V0VGVtcGxhdGUoKS5zdHlsZXMsXHJcbiAgICAgICAgICBodG1sOiBbdGVtcGxhdGUuaHRtbCB8fCB0aGlzLmdldFRlbXBsYXRlKCkuaHRtbF0sXHJcbiAgICAgICAgICBzY3JpcHQ6IHNjcmlwdD8gW3NjcmlwdF06IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0ZW1wbGF0ZU5hbWUgPSB0ZW1wbGF0ZS5uYW1lO1xyXG4gICAgICAgIGZpbGVzID0ge307XHJcbiAgICAgIH1cclxuICAgICAgaWYodGVtcGxhdGVOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGVtcGxhdGVOYW1lKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxvYWRGaWxlcyh1cmxzLCBmaWxlcykudGhlbigoKT0+IHtcclxuICAgICAgICBmb3IobGV0IHN0eWxlIG9mIGZpbGVzLnN0eWxlcykge1xyXG4gICAgICAgICAgbGV0IHRleHRDc3MgPSBzdHlsZS5kYXRhLCB1cmwgPSBzdHlsZS51cmw7XHJcbiAgICAgICAgICB0ZXh0Q3NzID0gdGV4dENzcy5yZXBsYWNlKC91cmxcXChbJ1wiXSguKj8pW1wiJ11cXCkvZywgKHIsIHIxKT0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFsndXJsKFxcJycsIHRoaXMudXJsUmVzb2x2ZXIodXJsLCByMSksICdcXCcpJ10uam9pbignJyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICQoYDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4ke3RleHRDc3N9PC9zdHlsZT5gKS5hcHBlbmRUbyh0aGlzLmhlYWQpO1xyXG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSB0ZXh0Q3NzLm1hdGNoKC9cXC9cXCpqc29uLWRhdGE6KChbXFxuXFxyXXwuKSo/KVxcKlxcLy8pO1xyXG4gICAgICAgICAgaWYobWF0Y2gpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICB0aGlzLnN0eWxlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuc3R5bGVEYXRhLFxyXG4gICAgICAgICAgICAgICAgLi4uSlNPTi5wYXJzZShtYXRjaFsxXSlcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5odG1sKHRoaXMudHJhbnNsYXRlKGZpbGVzLmh0bWxbMF0uZGF0YSkpO1xyXG5cclxuICAgICAgICB0aGlzLmpMaW5rcyA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgICAgdGhpcy5qTGlua3MucHVzaCgkKFsnPGxpbmsgJywgdGhpcy5vYmpUb0F0dHJzU3RyKHsuLi5saW5rLCBocmVmOiB0aGlzLnVybFJlc29sdmVyKHRoaXMuZ2V0Q3VycmVudFVybCgpLCBsaW5rLmhyZWYpfSksICc+J10uam9pbignJykpLmFwcGVuZFRvKHRoaXMuaGVhZCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoZmlsZXMuc2NyaXB0WzBdKSB7XHJcbiAgICAgICAgICBjb25zdCBpbml0ID0gZXZhbChmaWxlcy5zY3JpcHRbMF0uZGF0YSk7XHJcbiAgICAgICAgICB0aGlzLnRlbXBsYXRlT2JqZWN0ID0gaW5pdCh0aGlzLmNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZU9iamVjdCA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saW5rQ29udHJvbHMgPSB7fTtcclxuICAgICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kc1tpZF0gPSBWaWV3LmhhbmRsZUxpbmtFdmVudC5iaW5kKHtnZXRIYW5kbGVyczogdGhpcy5nZXRIYW5kbGVycy5iaW5kKHRoaXMpLCBpZCwgY3RybDogdGhpcy5saW5rQ29udHJvbHNbaWRdfSk7XHJcbiAgICAgICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0ub24oJ2NsaWNrJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy53aWRnZXRDb250cm9scyA9IHt9O1xyXG4gICAgICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRXaWRnZXRzKCkpIHtcclxuICAgICAgICAgIHRoaXMud2lkZ2V0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dENvbnRyb2xzID0ge307XHJcbiAgICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgICAgICB0aGlzLmlucHV0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kc1tpZF0gPSBWaWV3LmhhbmRsZUlucHV0RXZlbnQuYmluZCh7Z2V0SGFuZGxlcnM6IHRoaXMuZ2V0SGFuZGxlcnMuYmluZCh0aGlzKSwgaWQsIGN0cmw6IHRoaXMuaW5wdXRDb250cm9sc1tpZF19KTtcclxuICAgICAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub24oJ2tleXVwJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mb3JtQ29udHJvbHMgPSB7fTtcclxuICAgICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICAgICAgdGhpcy5mb3JtQ29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kc1tpZF0gPSBWaWV3LmhhbmRsZUZvcm1FdmVudC5iaW5kKHtnZXRIYW5kbGVyczogdGhpcy5nZXRIYW5kbGVycy5iaW5kKHRoaXMpLCBpZCwgY3RybDogdGhpcy5mb3JtQ29udHJvbHNbaWRdfSk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub24oJ3N1Ym1pdCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGV4dENvbnRyb2xzID0ge307XHJcbiAgICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldFRleHRzKCkpIHtcclxuICAgICAgICAgIHRoaXMudGV4dENvbnRyb2xzW2lkXSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy4nK2lkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGVTZXR0ZXJzID0gW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMubGlua0NvbnRyb2xzLFxyXG4gICAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0TGlua0NvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMud2lkZ2V0Q29udHJvbHMsXHJcbiAgICAgICAgICAgIHNldHRlcjogdGhpcy5zZXRXaWRnZXRDb250cm9sU3RhdGUuYmluZCh0aGlzKVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgbWFwOiB0aGlzLmlucHV0Q29udHJvbHMsXHJcbiAgICAgICAgICAgIHNldHRlcjogdGhpcy5zZXRJbnB1dENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMudGV4dENvbnRyb2xzLFxyXG4gICAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0VGV4dENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0VmlldygpO1xyXG5cclxuICAgICAgICBpZih0aGlzLm9uTG9hZCkge1xyXG4gICAgICAgICAgdGhpcy5vbkxvYWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmlyZUxpbmtzT25Mb2FkRXZlbnQoKTtcclxuICAgICAgfSkuXHJcbiAgICAgIGNhdGNoKChyZXMpPT4gY29uc29sZS5lcnJvcihyZXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihpbml0VXJsKSB7XHJcbiAgICAgICQodGhpcy5mcmFtZS5jb250ZW50V2luZG93KS5vbignbG9hZCcsIGJ1aWxkKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZih0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cuc3RvcCkge1xyXG4gICAgICAgIHRoaXMuZnJhbWUuY29udGVudFdpbmRvdy5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgICAgYnVpbGQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy50ZXh0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0ub2ZmKCdjbGljaycsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmxpbmtDb250cm9scztcclxuICAgIGRlbGV0ZSB0aGlzLndpZGdldENvbnRyb2xzO1xyXG4gICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmlucHV0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub2ZmKCdzdWJtaXQnLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5mb3JtQ29udHJvbHM7XHJcblxyXG4gICAgIXRoaXMudGVtcGxhdGVPYmplY3QuZGlzcG9zZSB8fCB0aGlzLnRlbXBsYXRlT2JqZWN0LmRpc3Bvc2UoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnRlbXBsYXRlT2JqZWN0O1xyXG5cclxuICAgIGlmKHRoaXMuaXNJT1MpIHtcclxuICAgICAgJCh0aGlzLnBhcmVudENvbnRhaW5lclswXS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KS5vZmYoJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25SZXNpemUpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wYXJlbnRDb250YWluZXIuaHRtbCgnJyk7XHJcbiAgICBkZWxldGUgdGhpcy5mcmFtZTtcclxuICB9XHJcblxyXG4gIGdldFN0eWxlRGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0eWxlRGF0YTtcclxuICB9XHJcblxyXG4gIGdldENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lclswXTtcclxuICB9XHJcblxyXG4gIGdldFBhcmVudENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudENvbnRhaW5lclswXTtcclxuICB9XHJcblxyXG4gIGFkZEhhbmRsZXIoaGFuZGxlcikge1xyXG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFZpZXcoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldENvbnRyb2xTdGF0ZShjdHJsLCBkZWZhdWx0cywgc3RhdGUsIHN0YXRlSGFuZGxlcnMpIHtcclxuICAgIGlmKGN0cmwgJiYgY3RybFswXSkge1xyXG4gICAgICBjb25zdCBzdCA9IHtcclxuICAgICAgICAuLi5kZWZhdWx0cyxcclxuICAgICAgICAuLi5zdGF0ZVxyXG4gICAgICB9O1xyXG4gICAgICBmb3IobGV0IG5hbWUgaW4gc3QpIHtcclxuICAgICAgICBpZihzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBzdGF0ZUhhbmRsZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICBzdGF0ZUhhbmRsZXJzW25hbWVdKGN0cmwsIHN0W25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldExpbmtDb250cm9sU3RhdGUoaWQsIHN0YXRlKSB7XHJcbiAgICBWaWV3LnNldENvbnRyb2xTdGF0ZShcclxuICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy5saW5rU3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldFdpZGdldENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLndpZGdldENvbnRyb2xzW2lkXSxcclxuICAgICAge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBlbmFibGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcud2lkZ2V0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldElucHV0Q29udHJvbFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgVmlldy5zZXRDb250cm9sU3RhdGUoXHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcuaW5wdXRTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLnRleHRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy50ZXh0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9uSXRlbVN0YXRlQ2hhbmdlZCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIGZvcihsZXQgaXRlbSBvZiB0aGlzLnN0YXRlU2V0dGVycykge1xyXG4gICAgICBpZihpdGVtLm1hcFtpZF0pIHtcclxuICAgICAgICBpdGVtLnNldHRlcihpZCwgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMub25JdGVtU3RhdGVDaGFuZ2VkKGlkLCBzdGF0ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1ZpZXcuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5pbXBvcnQgT3JiaXQgZnJvbSAnLi9PcmJpdCc7XHJcbmltcG9ydCBUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IERyYWcgZnJvbSAnLi9EcmFnJztcclxuaW1wb3J0IENTUzNEUmVuZGVyZXIgZnJvbSAnLi9DU1MzRFJlbmRlcmVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpc3VhbFdvcmxkIGV4dGVuZHMgVEhSRUUuRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGNvbnRhaW5lciwgdXNlSGVscGVycz1mYWxzZSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuY2hlY2tVcGRhdGVGbGFnID0gdHJ1ZTtcclxuICAgIHRoaXMud25kID0gd25kO1xyXG4gICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICB0aGlzLmpDb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnJlbmRlckNhbGxiYWNrcyA9IFtdO1xyXG4gICAgdGhpcy5kaWFnID0gdGhpcy5nZXREaWFnKCk7XHJcblxyXG4gICAgdGhpcy5jbG9jayA9IG5ldyBUSFJFRS5DbG9jaygpO1xyXG5cclxuICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xyXG5cclxuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuICAgIHRoaXMuY3NzU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuXHJcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgzMCwgdGhpcy53aWR0aCgpL3RoaXMuaGVpZ2h0KCksIDAuMiwgMjAwMCk7XHJcbiAgICBjb25zdCBzY2FsZSA9IDE7XHJcblxyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueCA9IDA7XHJcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi55ID0gNS41KnNjYWxlO1xyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDA7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbHBoYTogdHJ1ZSwgcHJlY2lzaW9uOiBWaXN1YWxXb3JsZC5nZXRQcmVjaXNpb24oKSwgYW50aWFsaWFzOiB0cnVlfSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xyXG5cclxuICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8oTWF0aC5zcXJ0KHRoaXMud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMSkpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XHJcblxyXG4gICAgdGhpcy5qQ29udGFpbmVyLmFwcGVuZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuY3NzUmVuZGVyZXJcdD0gbmV3IENTUzNEUmVuZGVyZXIoKTtcclxuICAgIHRoaXMuY3NzUmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xyXG4gICAgJCh0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQpLmNzcyh7XHJcbiAgXHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gIFx0XHR0b3A6IDAsXHJcbiAgXHRcdG1hcmdpbjogMCxcclxuICBcdFx0cGFkZGluZzogMFxyXG5cdCAgfSk7XHJcbiAgICB0aGlzLmpDb250YWluZXIuYXBwZW5kKHRoaXMuY3NzUmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50O1xyXG5cclxuICAgIHRoaXMudGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XHJcblxyXG4gICAgdGhpcy5hbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4ZmZmZmZmKTtcclxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuYW1iaWVudExpZ2h0KTtcclxuXHJcbiAgICB0aGlzLmxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHgwMDAwMDAsIDEpO1xyXG4gICAgdGhpcy5saWdodC5wb3NpdGlvbi5zZXQoLTYqc2NhbGUsIDYqc2NhbGUsIC0zKnNjYWxlKTtcclxuICAgIGNvbnN0IGQgPSAzKnNjYWxlO1xyXG4gICAgdGhpcy5saWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcclxuICAgIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLWQ7XHJcbiAgICB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSBkO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLnRvcCA9IGQ7XHJcbiAgICB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLWQ7XHJcbiAgICB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IC41KnNjYWxlO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLmZhciA9IDIwKnNjYWxlO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cubWFwU2l6ZS54ID0gNTEyO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cubWFwU2l6ZS55ID0gNTEyO1xyXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5saWdodCk7XHJcbiAgICAvLyB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYSkpO1xyXG5cclxuICAgIHRoaXMuc2hhZG93UGxhY2UgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxMCwgMTApLnJvdGF0ZVgoLU1hdGguUEkvMiksIG5ldyBUSFJFRS5TaGFkb3dNYXRlcmlhbCh7Y29sb3I6IDB4MDAwMDAwLCB0cmFuc3BhcmVudDogdHJ1ZSwgb3BhY2l0eTouMn0pKTtcclxuICAgIHRoaXMuc2hhZG93UGxhY2UucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgdGhpcy5zaGFkb3dQbGFjZS5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcclxuICAgIHRoaXMuc2hhZG93UGxhY2UuY2FzdFNoYWRvdyA9IGZhbHNlO1xyXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5zaGFkb3dQbGFjZSk7XHJcblxyXG5cclxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXQodGhpcy5jYW1lcmEsIHRoaXMpO1xyXG4gICAgdGhpcy5jb250cm9scy50YXJnZXQueSA9IDAuNTtcclxuXHJcbiAgICBjb25zdCBjc3NTY2VuZSA9ICQodGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50KS5maW5kKCdkaXYnKSwgdG1wVmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHRoaXMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCk9PiB7XHJcbiAgICAgIHRoaXMuY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKHRtcFZlY3Rvcik7XHJcbiAgICAgIGNzc1NjZW5lLmNzcygnZGlzcGxheScsIHRtcFZlY3Rvci55LXRoaXMuY2FtZXJhLnBvc2l0aW9uLnk+MD8gJ25vbmUnOiAnYmxvY2snKTtcclxuICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYodXNlSGVscGVycykge1xyXG4gICAgICB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQXhpc0hlbHBlcig1KSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25XaW5kb3dSZXNpemU6IHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSxcclxuICAgICAgYW5pbWF0ZTogdGhpcy5hbmltYXRlLmJpbmQodGhpcylcclxuICAgIH07XHJcblxyXG4gICAgJCh0aGlzLnduZCkub24oJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25XaW5kb3dSZXNpemUpO1xyXG5cclxuICAgIHRoaXMubW91c2VFdmVudHMgPSBuZXcgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcbiAgICB0aGlzLnRvdWNoRXZlbnRzID0gbmV3IFRocmVlVG91Y2hFdmVudENvbnZlcnRlcih0aGlzLnduZCwgdGhpcy5kb2MsIHRoaXMpO1xyXG4gICAgY29uc3QgZmlsdGVyRGF0YSA9IHt0eXBlOiAnbW91c2Vtb3ZlJ307XHJcbiAgICB0aGlzLm1vdXNlRXZlbnRzLmZpbHRlciA9IChlbGVtZW50LCBlKT0+IHtcclxuICAgICAgY29uc3QgdHlwZXMgPSBbJ21vdXNlZW50ZXInLCAnbW91c2VvdmVyJywgJ21vdXNlbGVhdmUnLCAnbW91c2VvdXQnXSwgY29udGFpbnMgPSAocCwgYyk9PiBwPT09YyB8fCAkLmNvbnRhaW5zKHAsIGMpO1xyXG4gICAgICBpZihlLnR5cGU9PT0nbW91c2Vtb3ZlJykge1xyXG4gICAgICAgIGZpbHRlckRhdGEucGFnZVggPSBlLnBhZ2VYO1xyXG4gICAgICAgIGZpbHRlckRhdGEucGFnZVkgPSBlLnBhZ2VZO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBlLnJlbGF0ZWRUYXJnZXQgJiYgfnR5cGVzLmluZGV4T2YoZS50eXBlKSAmJiBjb250YWlucyhlbGVtZW50LCBlLnRhcmdldCkgJiYgY29udGFpbnMoZWxlbWVudCwgZS5yZWxhdGVkVGFyZ2V0KT8gey4uLmUsIC4uLmZpbHRlckRhdGF9OiBlO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZHJhZyA9IG5ldyBEcmFnKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcblxyXG4gICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpO1xyXG4gICAgdGhpcy5hbmltYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXREaWFnKCkge1xyXG4gICAgY29uc3QgdGVzdCA9ICQoJzxkaXYgc3R5bGU9XCJoZWlnaHQ6IDFpbjsgd2lkdGg6IDFpbjsgZGlzcGxheTogbm9uZTtcIj48L2Rpdj4nKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpLFxyXG4gICAgciA9IG5ldyBUSFJFRS5WZWN0b3IyKHNjcmVlbi53aWR0aC90ZXN0LndpZHRoKCksIHNjcmVlbi5oZWlnaHQvdGVzdC5oZWlnaHQoKSk7XHJcbiAgICB0ZXN0LnJlbW92ZSgpO1xyXG4gICAgcmV0dXJuIHIubGVuZ3RoKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUaHJlZSgpIHtcclxuICAgIHRoaXMubGlnaHQudXNlckRhdGEubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0TGlnaHQoYW1iaWVudCwgZGlyZWN0aW9uYWwpIHtcclxuICAgIHRoaXMuYW1iaWVudExpZ2h0LmNvbG9yLnNldChhbWJpZW50KTtcclxuICAgIHRoaXMubGlnaHQuY29sb3Iuc2V0KGRpcmVjdGlvbmFsKTtcclxuICAgIHRoaXMudXBkYXRlVGhyZWUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5iaW5kcy5hbmltYXRlO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdyZXNpemUnLCB0aGlzLmJpbmRzLm9uV2luZG93UmVzaXplKTtcclxuICAgIHRoaXMubW91c2VFdmVudHMuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy50b3VjaEV2ZW50cy5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmRyYWcuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5jb250cm9scy5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICB3aWR0aCgpIHtcclxuICAgIHJldHVybiB0aGlzLmpDb250YWluZXIud2lkdGgoKSB8fCAyMDA7XHJcbiAgfVxyXG5cclxuICBoZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLmhlaWdodCgpIHx8IDIwMDtcclxuICB9XHJcblxyXG4gIHNldEV4dHJhTGlnaHRpbmcodikge1xyXG4gICAgdGhpcy5saWdodC5pbnRlbnNpdHkgPSB2O1xyXG4gIH1cclxuXHJcbiAgaXNNb2JpbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kaWFnPFV0aWxzLk1PQklMRV9ESUFHO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3JiaXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9scztcclxuICB9XHJcblxyXG4gIHNldENvbnRyb2xzU3RhdGUoc3RhdGUpIHtcclxuICAgIHRoaXMuY29udHJvbHMuZW5hYmxlZCA9IHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udHJvbHNTdGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLmVuYWJsZWQ7XHJcbiAgfVxyXG5cclxuICBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCgpLCBoZWlnaHQgPSB0aGlzLmhlaWdodCgpO1xyXG4gICAgaWYod2lkdGg+MSAmJiBoZWlnaHQ+MSkge1xyXG4gICAgICBjb25zdCB1cGRhdGVDYW1lcmEgPSAoY2FtZXJhKT0+IHtcclxuICAgICAgICBjYW1lcmEuYXNwZWN0ID0gd2lkdGgvaGVpZ2h0O1xyXG4gICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHVwZGF0ZVJlbmRlcmVyID0gKHJlbmRlcmVyKT0+IHtcclxuICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICB9O1xyXG4gICAgICBpZighdGhpcy5sYXN0UmVzaXplIHx8IE1hdGguYWJzKHRoaXMubGFzdFJlc2l6ZS53aWR0aC13aWR0aCkrTWF0aC5hYnModGhpcy5sYXN0UmVzaXplLmhlaWdodC1oZWlnaHQpPjEpIHtcclxuICAgICAgICB0aGlzLmxhc3RSZXNpemUgPSB7d2lkdGgsIGhlaWdodH07XHJcbiAgICAgICAgY29uc3QgcmVzaXplU3RhbXAgPSB0aGlzLnJlc2l6ZVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgaWYocmVzaXplU3RhbXA9PT10aGlzLnJlc2l6ZVN0YW1wKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNhbWVyYSh0aGlzLmNhbWVyYSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xyXG4gICAgICAgICAgICB1cGRhdGVSZW5kZXJlcih0aGlzLmNzc1JlbmRlcmVyKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdyZXNpemUnfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplKCk7XHJcbiAgICAgIH0sIDI1MCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLmFkZChvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3NzT2JqZWN0KG9iamVjdCkge1xyXG4gICAgdGhpcy5jc3NTY2VuZS5hZGQob2JqZWN0KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNzc09iamVjdChvYmplY3QpIHtcclxuICAgIHRoaXMuY3NzU2NlbmUucmVtb3ZlKG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLnJlbW92ZShvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZSgpIHtcclxuICAgIGlmKHRoaXMuYmluZHMuYW5pbWF0ZSkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5iaW5kcy5hbmltYXRlKTtcclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBhZGRSZW5kZXJDYWxsYmFjayhjbGIpIHtcclxuICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnB1c2goY2xiKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVJlbmRlckNhbGxiYWNrKGNsYikge1xyXG4gICAgY29uc3QgaSA9IHRoaXMucmVuZGVyQ2FsbGJhY2tzLmluZGV4T2YoY2xiKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGRlbHRhVGltZSA9IE1hdGgubWluKHRoaXMuY2xvY2suZ2V0RGVsdGEoKSwgMC4wMTcqMik7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5yZW5kZXJDYWxsYmFja3MpIHtcclxuICAgICAgY2xiKGRlbHRhVGltZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyLnJlbmRlcih0aGlzLmNzc1NjZW5lLCB0aGlzLmNhbWVyYSk7XHJcbiAgICBsZXQgcmVuZGVyID0gdHJ1ZTtcclxuICAgIGlmKHRoaXMuY2hlY2tVcGRhdGVGbGFnKSB7XHJcbiAgICAgIHJlbmRlciA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IG8gb2YgdGhpcy5zY2VuZS5jaGlsZHJlbikge1xyXG4gICAgICAgIHJlbmRlciA9IHJlbmRlciB8fCBvLnVzZXJEYXRhLm5lZWRzVXBkYXRlO1xyXG4gICAgICAgIG8udXNlckRhdGEubmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYocmVuZGVyKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRQcmVjaXNpb24oKSB7XHJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYpKTtcclxuXHJcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoMzAsIDEsIDEsIDEwMCk7XHJcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEpO1xyXG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcclxuXHJcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XHJcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4ZmZmZmZmKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUoMSwgMSk7XHJcblxyXG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLCBjdHggPSBjLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjLndpZHRoID0gYy5oZWlnaHQgPSAxO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjZmYwMDAwJztcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7XHJcbiAgICBjb25zdCB0ID0gbmV3IFRIUkVFLlRleHR1cmUoYyk7XHJcbiAgICB0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBzY2VuZS5hZGQobmV3IFRIUkVFLk1lc2goXHJcbiAgICAgIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEsIDEsIDEsIDEpLFxyXG4gICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdH0pXHJcbiAgICApKTtcclxuXHJcbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGl4ZWwoYywgeCwgeSkge1xyXG4gICAgICBjb25zdCBwcyA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG4gICAgICBjLnJlYWRQaXhlbHMoeCwgeSwgMSwgMSwgYy5SR0JBLCBjLlVOU0lHTkVEX0JZVEUsIHBzKTtcclxuICAgICAgcmV0dXJuIHBzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IGdldFBpeGVsKHJlbmRlcmVyLmRvbUVsZW1lbnQuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCByZW5kZXJlci5kb21FbGVtZW50LmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpLCAwLCAwKTtcclxuICAgIHJldHVybiBwWzBdPT09MjU1JiZwWzFdPT09MCYmcFsyXT09PTA/ICdoaWdocCc6ICdtZWRpdW1wJztcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVmlzdWFsV29ybGQuanMiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWW91VHViZUFwaSB7XHJcbiAgc3RhdGljIGluaXQoKSB7XHJcbiAgICBpZighWW91VHViZUFwaS50YXNrKSB7XHJcbiAgICAgIFlvdVR1YmVBcGkudGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICBpZighd2luZG93WydZVCddKSB7XHJcbiAgICAgICAgICB3aW5kb3dbJ1lUJ10gPSB7XHJcbiAgICAgICAgICAgIGxvYWRpbmc6IDAsXHJcbiAgICAgICAgICAgIGxvYWRlZDogMFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXdpbmRvd1snWVRDb25maWcnXSkge1xyXG4gICAgICAgICAgd2luZG93WydZVENvbmZpZyddID0ge1xyXG4gICAgICAgICAgICAnaG9zdCc6ICdodHRwOi8vd3d3LnlvdXR1YmUuY29tJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIVlULmxvYWRpbmcpIHtcclxuICAgICAgICAgIFlULmxvYWRpbmcgPSAxO1xyXG4gICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IFtdO1xyXG4gICAgICAgICAgICBZVC5yZWFkeSA9IGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgICAgICBpZihZVC5sb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIGYoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aW5kb3cub25ZVFJlYWR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgWVQubG9hZGVkID0gMTtcclxuICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgbFtpXSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgWVQuc2V0Q29uZmlnID0gZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgayBpbiBjKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjLmhhc093blByb3BlcnR5KGspKSB7XHJcbiAgICAgICAgICAgICAgICAgIFlUQ29uZmlnW2tdID0gY1trXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIGEudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICBhLmlkID0gJ3d3dy13aWRnZXRhcGktc2NyaXB0JztcclxuICAgICAgICAgICAgYS5zcmMgPSAnaHR0cHM6Ly9zLnl0aW1nLmNvbS95dHMvanNiaW4vd3d3LXdpZGdldGFwaS12ZmxkbjFqUk0vd3d3LXdpZGdldGFwaS5qcyc7XHJcbiAgICAgICAgICAgIGEuYXN5bmMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xyXG4gICAgICAgICAgICBpZihjKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG4gPSBjLm5vbmNlIHx8IGMuZ2V0QXR0cmlidXRlKCdub25jZScpO1xyXG4gICAgICAgICAgICAgIGlmKG4pIHtcclxuICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdub25jZScsIG4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuICAgICAgICAgICAgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTtcclxuICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBZb3VUdWJlQXBpLnRhc2s7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1lvdVR1YmVBcGkuanMiLCJpbXBvcnQgVGFyZ2V0IGZyb20gJy4vVGFyZ2V0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpcmNsZVRhcmdldCBleHRlbmRzIFRhcmdldCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHgsIHksIHIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIHJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB0ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCB7eCwgeX0gPSBkYXRhLCBwID0gdGhpcy5wO1xyXG4gICAgaWYoKHgtcC54KSooeC1wLngpKyh5LXAueSkqKHktcC55KTw9cC5yKnAucikge1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICAgIGRhdGFcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL0NpcmNsZVRhcmdldC5qcyIsImltcG9ydCBUYXJnZXQgZnJvbSAnLi9UYXJnZXQnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuLi9CYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlUYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwb2x5KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wb2x5ID0gcG9seTtcclxuICB9XHJcblxyXG4gIHRlc3RJbnRlcnNlY3Rpb24oZSwgcCkge1xyXG4gICAgcmV0dXJuIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHRoaXMucG9seSwgcCk/IHtcclxuICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICBkYXRhOiBwXHJcbiAgICB9OiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL1BvbHlUYXJnZXQuanMiLCIvLyBzdGF0cy5qcyAtIGh0dHA6Ly9naXRodWIuY29tL21yZG9vYi9zdGF0cy5qc1xuKGZ1bmN0aW9uKGYsZSl7XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6Zi5TdGF0cz1lKCl9KSh0aGlzLGZ1bmN0aW9uKCl7dmFyIGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGEpe2MuYXBwZW5kQ2hpbGQoYS5kb20pO3JldHVybiBhfWZ1bmN0aW9uIHUoYSl7Zm9yKHZhciBkPTA7ZDxjLmNoaWxkcmVuLmxlbmd0aDtkKyspYy5jaGlsZHJlbltkXS5zdHlsZS5kaXNwbGF5PWQ9PT1hP1wiYmxvY2tcIjpcIm5vbmVcIjtsPWF9dmFyIGw9MCxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO2N1cnNvcjpwb2ludGVyO29wYWNpdHk6MC45O3otaW5kZXg6MTAwMDBcIjtjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTtcbnUoKytsJWMuY2hpbGRyZW4ubGVuZ3RoKX0sITEpO3ZhciBrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCksZz1rLGE9MCxyPWUobmV3IGYuUGFuZWwoXCJGUFNcIixcIiMwZmZcIixcIiMwMDJcIikpLGg9ZShuZXcgZi5QYW5lbChcIk1TXCIsXCIjMGYwXCIsXCIjMDIwXCIpKTtpZihzZWxmLnBlcmZvcm1hbmNlJiZzZWxmLnBlcmZvcm1hbmNlLm1lbW9yeSl2YXIgdD1lKG5ldyBmLlBhbmVsKFwiTUJcIixcIiNmMDhcIixcIiMyMDFcIikpO3UoMCk7cmV0dXJue1JFVklTSU9OOjE2LGRvbTpjLGFkZFBhbmVsOmUsc2hvd1BhbmVsOnUsYmVnaW46ZnVuY3Rpb24oKXtrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCl9LGVuZDpmdW5jdGlvbigpe2ErKzt2YXIgYz0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpO2gudXBkYXRlKGMtaywyMDApO2lmKGM+ZysxRTMmJihyLnVwZGF0ZSgxRTMqYS8oYy1nKSwxMDApLGc9YyxhPTAsdCkpe3ZhciBkPXBlcmZvcm1hbmNlLm1lbW9yeTt0LnVwZGF0ZShkLnVzZWRKU0hlYXBTaXplL1xuMTA0ODU3NixkLmpzSGVhcFNpemVMaW1pdC8xMDQ4NTc2KX1yZXR1cm4gY30sdXBkYXRlOmZ1bmN0aW9uKCl7az10aGlzLmVuZCgpfSxkb21FbGVtZW50OmMsc2V0TW9kZTp1fX07Zi5QYW5lbD1mdW5jdGlvbihlLGYsbCl7dmFyIGM9SW5maW5pdHksaz0wLGc9TWF0aC5yb3VuZCxhPWcod2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLHI9ODAqYSxoPTQ4KmEsdD0zKmEsdj0yKmEsZD0zKmEsbT0xNSphLG49NzQqYSxwPTMwKmEscT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Eud2lkdGg9cjtxLmhlaWdodD1oO3Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOjgwcHg7aGVpZ2h0OjQ4cHhcIjt2YXIgYj1xLmdldENvbnRleHQoXCIyZFwiKTtiLmZvbnQ9XCJib2xkIFwiKzkqYStcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7Yi50ZXh0QmFzZWxpbmU9XCJ0b3BcIjtiLmZpbGxTdHlsZT1sO2IuZmlsbFJlY3QoMCwwLHIsaCk7Yi5maWxsU3R5bGU9ZjtiLmZpbGxUZXh0KGUsdCx2KTtcbmIuZmlsbFJlY3QoZCxtLG4scCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCxtLG4scCk7cmV0dXJue2RvbTpxLHVwZGF0ZTpmdW5jdGlvbihoLHcpe2M9TWF0aC5taW4oYyxoKTtrPU1hdGgubWF4KGssaCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPTE7Yi5maWxsUmVjdCgwLDAscixtKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZyhoKStcIiBcIitlK1wiIChcIitnKGMpK1wiLVwiK2coaykrXCIpXCIsdCx2KTtiLmRyYXdJbWFnZShxLGQrYSxtLG4tYSxwLGQsbSxuLWEscCk7Yi5maWxsUmVjdChkK24tYSxtLGEscCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCtuLWEsbSxhLGcoKDEtaC93KSpwKSl9fX07cmV0dXJuIGZ9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zdGF0cy5qcy9idWlsZC9zdGF0cy5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxuLyohXG4gKiBqUXVlcnkgTW91c2V3aGVlbCAzLjEuMTNcbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlMgc3R5bGUgZm9yIEJyb3dzZXJpZnlcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxufShmdW5jdGlvbiAoJCkge1xuXG4gICAgdmFyIHRvRml4ICA9IFsnd2hlZWwnLCAnbW91c2V3aGVlbCcsICdET01Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ10sXG4gICAgICAgIHRvQmluZCA9ICggJ29ud2hlZWwnIGluIGRvY3VtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+PSA5ICkgP1xuICAgICAgICAgICAgICAgICAgICBbJ3doZWVsJ10gOiBbJ21vdXNld2hlZWwnLCAnRG9tTW91c2VTY3JvbGwnLCAnTW96TW91c2VQaXhlbFNjcm9sbCddLFxuICAgICAgICBzbGljZSAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsXG4gICAgICAgIG51bGxMb3dlc3REZWx0YVRpbWVvdXQsIGxvd2VzdERlbHRhO1xuXG4gICAgaWYgKCAkLmV2ZW50LmZpeEhvb2tzICkge1xuICAgICAgICBmb3IgKCB2YXIgaSA9IHRvRml4Lmxlbmd0aDsgaTsgKSB7XG4gICAgICAgICAgICAkLmV2ZW50LmZpeEhvb2tzWyB0b0ZpeFstLWldIF0gPSAkLmV2ZW50Lm1vdXNlSG9va3M7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3BlY2lhbCA9ICQuZXZlbnQuc3BlY2lhbC5tb3VzZXdoZWVsID0ge1xuICAgICAgICB2ZXJzaW9uOiAnMy4xLjEyJyxcblxuICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRvQmluZC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBoYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGxpbmUgaGVpZ2h0IGFuZCBwYWdlIGhlaWdodCBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVsZW1lbnRcbiAgICAgICAgICAgICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcsIHNwZWNpYWwuZ2V0TGluZUhlaWdodCh0aGlzKSk7XG4gICAgICAgICAgICAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnLCBzcGVjaWFsLmdldFBhZ2VIZWlnaHQodGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggdG9CaW5kWy0taV0sIGhhbmRsZXIsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubW91c2V3aGVlbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgZGF0YSB3ZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKHRoaXMsICdtb3VzZXdoZWVsLWxpbmUtaGVpZ2h0Jyk7XG4gICAgICAgICAgICAkLnJlbW92ZURhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRMaW5lSGVpZ2h0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pLFxuICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkZWxlbVsnb2Zmc2V0UGFyZW50JyBpbiAkLmZuID8gJ29mZnNldFBhcmVudCcgOiAncGFyZW50J10oKTtcbiAgICAgICAgICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJCgnYm9keScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KCRwYXJlbnQuY3NzKCdmb250U2l6ZScpLCAxMCkgfHwgcGFyc2VJbnQoJGVsZW0uY3NzKCdmb250U2l6ZScpLCAxMCkgfHwgMTY7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UGFnZUhlaWdodDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuICQoZWxlbSkuaGVpZ2h0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIGFkanVzdE9sZERlbHRhczogdHJ1ZSwgLy8gc2VlIHNob3VsZEFkanVzdE9sZERlbHRhcygpIGJlbG93XG4gICAgICAgICAgICBub3JtYWxpemVPZmZzZXQ6IHRydWUgIC8vIGNhbGxzIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmb3IgZWFjaCBldmVudFxuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuZm4uZXh0ZW5kKHtcbiAgICAgICAgbW91c2V3aGVlbDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHJldHVybiBmbiA/IHRoaXMuYmluZCgnbW91c2V3aGVlbCcsIGZuKSA6IHRoaXMudHJpZ2dlcignbW91c2V3aGVlbCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVubW91c2V3aGVlbDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuYmluZCgnbW91c2V3aGVlbCcsIGZuKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIHZhciBvcmdFdmVudCAgID0gZXZlbnQgfHwgd2luZG93LmV2ZW50LFxuICAgICAgICAgICAgYXJncyAgICAgICA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGRlbHRhICAgICAgPSAwLFxuICAgICAgICAgICAgZGVsdGFYICAgICA9IDAsXG4gICAgICAgICAgICBkZWx0YVkgICAgID0gMCxcbiAgICAgICAgICAgIGFic0RlbHRhICAgPSAwLFxuICAgICAgICAgICAgb2Zmc2V0WCAgICA9IDAsXG4gICAgICAgICAgICBvZmZzZXRZICAgID0gMDtcbiAgICAgICAgZXZlbnQgPSAkLmV2ZW50LmZpeChvcmdFdmVudCk7XG4gICAgICAgIGV2ZW50LnR5cGUgPSAnbW91c2V3aGVlbCc7XG5cbiAgICAgICAgLy8gT2xkIHNjaG9vbCBzY3JvbGx3aGVlbCBkZWx0YVxuICAgICAgICBpZiAoICdkZXRhaWwnICAgICAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LmRldGFpbCAqIC0xOyAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YScgIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC53aGVlbERlbHRhOyAgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGFZJyBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQud2hlZWxEZWx0YVk7ICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhWCcgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWCA9IG9yZ0V2ZW50LndoZWVsRGVsdGFYICogLTE7IH1cblxuICAgICAgICAvLyBGaXJlZm94IDwgMTcgaG9yaXpvbnRhbCBzY3JvbGxpbmcgcmVsYXRlZCB0byBET01Nb3VzZVNjcm9sbCBldmVudFxuICAgICAgICBpZiAoICdheGlzJyBpbiBvcmdFdmVudCAmJiBvcmdFdmVudC5heGlzID09PSBvcmdFdmVudC5IT1JJWk9OVEFMX0FYSVMgKSB7XG4gICAgICAgICAgICBkZWx0YVggPSBkZWx0YVkgKiAtMTtcbiAgICAgICAgICAgIGRlbHRhWSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgZGVsdGEgdG8gYmUgZGVsdGFZIG9yIGRlbHRhWCBpZiBkZWx0YVkgaXMgMCBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdGl5XG4gICAgICAgIGRlbHRhID0gZGVsdGFZID09PSAwID8gZGVsdGFYIDogZGVsdGFZO1xuXG4gICAgICAgIC8vIE5ldyBzY2hvb2wgd2hlZWwgZGVsdGEgKHdoZWVsIGV2ZW50KVxuICAgICAgICBpZiAoICdkZWx0YVknIGluIG9yZ0V2ZW50ICkge1xuICAgICAgICAgICAgZGVsdGFZID0gb3JnRXZlbnQuZGVsdGFZICogLTE7XG4gICAgICAgICAgICBkZWx0YSAgPSBkZWx0YVk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAnZGVsdGFYJyBpbiBvcmdFdmVudCApIHtcbiAgICAgICAgICAgIGRlbHRhWCA9IG9yZ0V2ZW50LmRlbHRhWDtcbiAgICAgICAgICAgIGlmICggZGVsdGFZID09PSAwICkgeyBkZWx0YSAgPSBkZWx0YVggKiAtMTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm8gY2hhbmdlIGFjdHVhbGx5IGhhcHBlbmVkLCBubyByZWFzb24gdG8gZ28gYW55IGZ1cnRoZXJcbiAgICAgICAgaWYgKCBkZWx0YVkgPT09IDAgJiYgZGVsdGFYID09PSAwICkgeyByZXR1cm47IH1cblxuICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgbGluZXMgYW5kIHBhZ2VzIHRvIHBpeGVscyBpZiB3ZSBhcmVuJ3QgYWxyZWFkeSBpbiBwaXhlbHNcbiAgICAgICAgLy8gVGhlcmUgYXJlIHRocmVlIGRlbHRhIG1vZGVzOlxuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDAgaXMgYnkgcGl4ZWxzLCBub3RoaW5nIHRvIGRvXG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMSBpcyBieSBsaW5lc1xuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDIgaXMgYnkgcGFnZXNcbiAgICAgICAgaWYgKCBvcmdFdmVudC5kZWx0YU1vZGUgPT09IDEgKSB7XG4gICAgICAgICAgICB2YXIgbGluZUhlaWdodCA9ICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xuICAgICAgICAgICAgZGVsdGEgICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVkgKj0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWCAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKCBvcmdFdmVudC5kZWx0YU1vZGUgPT09IDIgKSB7XG4gICAgICAgICAgICB2YXIgcGFnZUhlaWdodCA9ICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcpO1xuICAgICAgICAgICAgZGVsdGEgICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVkgKj0gcGFnZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWCAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgbG93ZXN0IGFic29sdXRlIGRlbHRhIHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGEgdmFsdWVzXG4gICAgICAgIGFic0RlbHRhID0gTWF0aC5tYXgoIE1hdGguYWJzKGRlbHRhWSksIE1hdGguYWJzKGRlbHRhWCkgKTtcblxuICAgICAgICBpZiAoICFsb3dlc3REZWx0YSB8fCBhYnNEZWx0YSA8IGxvd2VzdERlbHRhICkge1xuICAgICAgICAgICAgbG93ZXN0RGVsdGEgPSBhYnNEZWx0YTtcblxuICAgICAgICAgICAgLy8gQWRqdXN0IG9sZGVyIGRlbHRhcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIGlmICggc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkgKSB7XG4gICAgICAgICAgICAgICAgbG93ZXN0RGVsdGEgLz0gNDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGp1c3Qgb2xkZXIgZGVsdGFzIGlmIG5lY2Vzc2FyeVxuICAgICAgICBpZiAoIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpICkge1xuICAgICAgICAgICAgLy8gRGl2aWRlIGFsbCB0aGUgdGhpbmdzIGJ5IDQwIVxuICAgICAgICAgICAgZGVsdGEgIC89IDQwO1xuICAgICAgICAgICAgZGVsdGFYIC89IDQwO1xuICAgICAgICAgICAgZGVsdGFZIC89IDQwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGEgd2hvbGUsIG5vcm1hbGl6ZWQgdmFsdWUgZm9yIHRoZSBkZWx0YXNcbiAgICAgICAgZGVsdGEgID0gTWF0aFsgZGVsdGEgID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGEgIC8gbG93ZXN0RGVsdGEpO1xuICAgICAgICBkZWx0YVggPSBNYXRoWyBkZWx0YVggPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVggLyBsb3dlc3REZWx0YSk7XG4gICAgICAgIGRlbHRhWSA9IE1hdGhbIGRlbHRhWSA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhWSAvIGxvd2VzdERlbHRhKTtcblxuICAgICAgICAvLyBOb3JtYWxpc2Ugb2Zmc2V0WCBhbmQgb2Zmc2V0WSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICggc3BlY2lhbC5zZXR0aW5ncy5ub3JtYWxpemVPZmZzZXQgJiYgdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QgKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRpbmdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIG9mZnNldFggPSBldmVudC5jbGllbnRYIC0gYm91bmRpbmdSZWN0LmxlZnQ7XG4gICAgICAgICAgICBvZmZzZXRZID0gZXZlbnQuY2xpZW50WSAtIGJvdW5kaW5nUmVjdC50b3A7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaW5mb3JtYXRpb24gdG8gdGhlIGV2ZW50IG9iamVjdFxuICAgICAgICBldmVudC5kZWx0YVggPSBkZWx0YVg7XG4gICAgICAgIGV2ZW50LmRlbHRhWSA9IGRlbHRhWTtcbiAgICAgICAgZXZlbnQuZGVsdGFGYWN0b3IgPSBsb3dlc3REZWx0YTtcbiAgICAgICAgZXZlbnQub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgIGV2ZW50Lm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICAvLyBHbyBhaGVhZCBhbmQgc2V0IGRlbHRhTW9kZSB0byAwIHNpbmNlIHdlIGNvbnZlcnRlZCB0byBwaXhlbHNcbiAgICAgICAgLy8gQWx0aG91Z2ggdGhpcyBpcyBhIGxpdHRsZSBvZGQgc2luY2Ugd2Ugb3ZlcndyaXRlIHRoZSBkZWx0YVgvWVxuICAgICAgICAvLyBwcm9wZXJ0aWVzIHdpdGggbm9ybWFsaXplZCBkZWx0YXMuXG4gICAgICAgIGV2ZW50LmRlbHRhTW9kZSA9IDA7XG5cbiAgICAgICAgLy8gQWRkIGV2ZW50IGFuZCBkZWx0YSB0byB0aGUgZnJvbnQgb2YgdGhlIGFyZ3VtZW50c1xuICAgICAgICBhcmdzLnVuc2hpZnQoZXZlbnQsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgLy8gQ2xlYXJvdXQgbG93ZXN0RGVsdGEgYWZ0ZXIgc29tZXRpbWUgdG8gYmV0dGVyXG4gICAgICAgIC8vIGhhbmRsZSBtdWx0aXBsZSBkZXZpY2UgdHlwZXMgdGhhdCBnaXZlIGRpZmZlcmVudFxuICAgICAgICAvLyBhIGRpZmZlcmVudCBsb3dlc3REZWx0YVxuICAgICAgICAvLyBFeDogdHJhY2twYWQgPSAzIGFuZCBtb3VzZSB3aGVlbCA9IDEyMFxuICAgICAgICBpZiAobnVsbExvd2VzdERlbHRhVGltZW91dCkgeyBjbGVhclRpbWVvdXQobnVsbExvd2VzdERlbHRhVGltZW91dCk7IH1cbiAgICAgICAgbnVsbExvd2VzdERlbHRhVGltZW91dCA9IHNldFRpbWVvdXQobnVsbExvd2VzdERlbHRhLCAyMDApO1xuXG4gICAgICAgIHJldHVybiAoJC5ldmVudC5kaXNwYXRjaCB8fCAkLmV2ZW50LmhhbmRsZSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbnVsbExvd2VzdERlbHRhKCkge1xuICAgICAgICBsb3dlc3REZWx0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIG9sZGVyIGV2ZW50IGFuZCB0aGUgZGVsdGEgaXMgZGl2aXNhYmxlIGJ5IDEyMCxcbiAgICAgICAgLy8gdGhlbiB3ZSBhcmUgYXNzdW1pbmcgdGhhdCB0aGUgYnJvd3NlciBpcyB0cmVhdGluZyB0aGlzIGFzIGFuXG4gICAgICAgIC8vIG9sZGVyIG1vdXNlIHdoZWVsIGV2ZW50IGFuZCB0aGF0IHdlIHNob3VsZCBkaXZpZGUgdGhlIGRlbHRhc1xuICAgICAgICAvLyBieSA0MCB0byB0cnkgYW5kIGdldCBhIG1vcmUgdXNhYmxlIGRlbHRhRmFjdG9yLlxuICAgICAgICAvLyBTaWRlIG5vdGUsIHRoaXMgYWN0dWFsbHkgaW1wYWN0cyB0aGUgcmVwb3J0ZWQgc2Nyb2xsIGRpc3RhbmNlXG4gICAgICAgIC8vIGluIG9sZGVyIGJyb3dzZXJzIGFuZCBjYW4gY2F1c2Ugc2Nyb2xsaW5nIHRvIGJlIHNsb3dlciB0aGFuIG5hdGl2ZS5cbiAgICAgICAgLy8gVHVybiB0aGlzIG9mZiBieSBzZXR0aW5nICQuZXZlbnQuc3BlY2lhbC5tb3VzZXdoZWVsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyB0byBmYWxzZS5cbiAgICAgICAgcmV0dXJuIHNwZWNpYWwuc2V0dGluZ3MuYWRqdXN0T2xkRGVsdGFzICYmIG9yZ0V2ZW50LnR5cGUgPT09ICdtb3VzZXdoZWVsJyAmJiBhYnNEZWx0YSAlIDEyMCA9PT0gMDtcbiAgICB9XG5cbn0pKTtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vY29tbW9uL34vaW1wb3J0cy1sb2FkZXI/ZGVmaW5lPT5mYWxzZSEuL34vanF1ZXJ5LW1vdXNld2hlZWwvanF1ZXJ5Lm1vdXNld2hlZWwuanNcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=
